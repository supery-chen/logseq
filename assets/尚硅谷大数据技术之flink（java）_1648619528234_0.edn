{:highlights [{:id #uuid "62440a36-c97d-4cb0-939a-621b0e56e98b", :page 28, :position {:bounding {:x1 -0.008093699812889099, :y1 705.771728515625, :x2 721.9751586914062, :y2 749.8054809570312, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.01123809814453, :y1 705.771728515625, :x2 721.9751586914062, :y2 724.771728515625, :width 722, :height 1005.3286062486153} {:x1 -0.008093699812889099, :y1 727.1804809570312, :x2 246.83384704589844, :y2 749.8054809570312, :width 722, :height 1005.3286062486153}), :page 28}, :content {:text "这里需要提到Flink中的几个关键组件：客户端（Client）、作业管理器（JobManager）和任务管理器（TaskManager）"}, :properties {:color "yellow"}} {:id #uuid "62440a74-bd5d-41e4-b278-4d1f25aaba68", :page 29, :position {:bounding {:x1 119, :y1 56, :x2 615, :y2 385, :width 722, :height 1005.3286062486153}, :rects (), :page 29}, :content {:text "[:span]", :image 1648626292381}, :properties {:color "yellow"}} {:id #uuid "62450ce5-4bd3-430d-ad09-3c77d87ceace", :page 38, :position {:bounding {:x1 96.00945281982422, :y1 269.5573425292969, :x2 446.33260345458984, :y2 288.557373046875, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.00945281982422, :y1 269.5573425292969, :x2 446.33260345458984, :y2 288.557373046875, :width 722, :height 1005.3286062486153}), :page 38}, :content {:text "会话模式比较适合于单个规模小、执行时间短的大量作业"}, :properties {:color "yellow"}} {:id #uuid "62450cfa-2832-4b40-b6f9-7b46e358410e", :page 38, :position {:bounding {:x1 180.0704803466797, :y1 707.849853515625, :x2 586.4908905029297, :y2 726.849853515625, :width 722, :height 1005.3286062486153}, :rects ({:x1 180.0704803466797, :y1 707.849853515625, :x2 586.4908905029297, :y2 726.849853515625, :width 722, :height 1005.3286062486153}), :page 38}, :content {:text "单作业模式在生产环境运行更加稳定，所以是实际应用的首选模式"}, :properties {:color "yellow"}} {:id #uuid "62450d13-0ed7-4469-962b-e908d22704a6", :page 39, :position {:bounding {:x1 -0.011749267578125, :y1 132.44610595703125, :x2 721.9923095703125, :y2 196.729248046875, :width 722, :height 1005.3286062486153}, :rects ({:x1 142.9627227783203, :y1 132.44610595703125, :x2 721.9923095703125, :y2 151.44610595703125, :width 722, :height 1005.3286062486153} {:x1 -0.011749267578125, :y1 153.85235595703125, :x2 721.9876708984375, :y2 176.39923095703125, :width 722, :height 1005.3286062486153} {:x1 86.87938690185547, :y1 177.729248046875, :x2 170.93898010253906, :y2 196.729248046875, :width 722, :height 1005.3286062486153}), :page 39}, :content {:text "我们需要为每一个提交的应用单独启动一个JobManager，也就是创建一个集群。这个JobManager只为执行这一个应用而存在，执行结束之后JobManager也就关闭了，这就是所谓的应用模式"}, :properties {:color "yellow"}} {:id #uuid "62450d33-59e4-48c0-ad47-02c1bc2cd5f3", :page 39, :position {:bounding {:x1 -0.011748969554901123, :y1 460.77423095703125, :x2 721.9739110171795, :y2 550.1023559570312, :width 722, :height 1005.3286062486153}, :rects ({:x1 184.0330810546875, :y1 460.77423095703125, :x2 654.266357421875, :y2 479.77423095703125, :width 722, :height 1005.3286062486153} {:x1 -0.011748969554901123, :y1 482.18048095703125, :x2 721.9712832570076, :y2 504.74298095703125, :width 722, :height 1005.3286062486153} {:x1 -0.011745721101760864, :y1 504.82525634765625, :x2 721.9739110171795, :y2 527.3877563476562, :width 722, :height 1005.3286062486153} {:x1 -0.011742755770683289, :y1 527.4773559570312, :x2 470.11065673828125, :y2 550.1023559570312, :width 722, :height 1005.3286062486153}), :page 39}, :content {:text "在会话模式下，集群的生命周期独立于集群上运行的任何作业的生命周期，并且提交的所有作业共享资源。而单作业模式为每个提交的作业创建一个集群，带来了更好的资源隔离，这时集群的生命周期与作业的生命周期绑定。最后，应用模式为每个应用程序创建一个会话集群，在JobManager上直接调用应用程序的main()方法"}, :properties {:color "yellow"}} {:id #uuid "62450dec-7154-4f5d-819e-fc4150cff13e", :page 42, :position {:bounding {:x1 -0.008094295859336853, :y1 439.49298095703125, :x2 721.9898681640625, :y2 540.2765502929688, :width 722, :height 1005.3286062486153}, :rects ({:x1 164.640625, :y1 439.49298095703125, :x2 721.9898681640625, :y2 458.49298095703125, :width 722, :height 1005.3286062486153} {:x1 -0.008091747760772705, :y1 460.8229675292969, :x2 721.9821166992188, :y2 483.3698425292969, :width 722, :height 1005.3286062486153} {:x1 -0.008094295859336853, :y1 483.46173095703125, :x2 721.9684448242188, :y2 506.10235595703125, :width 722, :height 1005.3286062486153} {:x1 -0.00808832049369812, :y1 506.1983947753906, :x2 318.8908996582031, :y2 540.2765502929688, :width 722, :height 1005.3286062486153} {:x1 320.6511535644531, :y1 507.5265197753906, :x2 362.7403564453125, :y2 526.5265502929688, :width 722, :height 1005.3286062486153}), :page 42}, :content {:text "YARN上部署的过程是：客户端把Flink应用提交给Yarn的ResourceManager, Yarn的ResourceManager会向Yarn的NodeManager申请容器。在这些容器上，Flink会部署JobManager和TaskManager的实例，从而启动集群。Flink会根据运行在JobManger上的作业所需要的Slot数量动态分配TaskManager资源。"}, :properties {:color "yellow"}} {:id #uuid "62451f28-540a-4c62-abfe-46958ef9aef6", :page 49, :position {:bounding {:x1 90, :y1 59, :x2 653, :y2 461, :width 721.9999999999999, :height 1005.3286062486152}, :rects (), :page 49}, :content {:text "[:span]", :image 1648697128409}, :properties {:color "yellow"}} {:id #uuid "62451f57-78fd-4be4-ad93-a47a58f42523", :page 48, :position {:bounding {:x1 -0.008094727993011475, :y1 725.503173828125, :x2 721.9892578125, :y2 884.5603637695312, :width 721.9999999999999, :height 1005.3286062486152}, :rects ({:x1 127.37031555175781, :y1 725.503173828125, :x2 721.9892578125, :y2 754.846923828125, :width 721.9999999999999, :height 1005.3286062486152} {:x1 96.00971984863281, :y1 734.409423828125, :x2 635.235107421875, :y2 753.409423828125, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.0001220703125, :y1 754.9353637695312, :x2 721.9823608398438, :y2 775.7322387695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.008091211318969727, :y1 775.812255859375, :x2 721.974609375, :y2 796.609130859375, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.0001220703125, :y1 796.7009887695312, :x2 721.9725341796875, :y2 817.5759887695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.008094727993011475, :y1 817.6541137695312, :x2 205.21875, :y2 884.5603637695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 183.6564178466797, :y1 818.0916137695312, :x2 247.82403564453125, :y2 837.0916137695312, :width 721.9999999999999, :height 1005.3286062486152}), :page 48}, :content {:text "Flink的运行时架构中，最重要的就是两大组件：作业管理器（JobManger）和任务管理器（TaskManager）。对于一个提交执行的作业，JobManager是真正意义上的“管理者”（Master），负责管理调度，所以在不考虑高可用的情况下只能有一个；而TaskManager是“工作者”（Worker、Slave），负责执行任务处理数据，所以可以有一个或多个。Flink的作业提交和任务处理时的系统如图4-1所示。"}, :properties {:color "yellow"}} {:id #uuid "62453fc2-a342-43cb-8e2c-678f7917fb1d", :page 51, :position {:bounding {:x1 132, :y1 562, :x2 606, :y2 734, :width 722, :height 1005.3286062486153}, :rects (), :page 51}, :content {:text "[:span]", :image 1648705474055}, :properties {:color "yellow"}} {:id #uuid "62454063-0020-4aa4-b678-18e16e071e4f", :page 52, :position {:bounding {:x1 126, :y1 426, :x2 574, :y2 665, :width 722, :height 1005.3286062486153}, :rects (), :page 52}, :content {:text "[:span]", :image 1648705635790}, :properties {:color "yellow"}} {:id #uuid "62454115-6eba-4154-ab1d-e057d767c4a2", :page 53, :position {:bounding {:x1 119, :y1 370, :x2 654, :y2 616, :width 722, :height 1005.3286062486153}, :rects (), :page 53}, :content {:text "[:span]", :image 1648705813730}, :properties {:color "yellow"}} {:id #uuid "62454135-1954-4edb-99bf-2f6d9975f66e", :page 54, :position {:bounding {:x1 108, :y1 165, :x2 628, :y2 447, :width 722, :height 1005.3286062486153}, :rects (), :page 54}, :content {:text "[:span]", :image 1648705845181}, :properties {:color "yellow"}} {:id #uuid "624541f2-189f-4995-a375-3ef37f35add8", :page 55, :position {:bounding {:x1 107, :y1 363, :x2 601, :y2 443, :width 722, :height 1005.3286062486153}, :rects (), :page 55}, :content {:text "[:span]", :image 1648706034535}, :properties {:color "yellow"}} {:id #uuid "6245466b-87c3-47f2-b8e0-eb30d8b2cfa7", :page 55, :position {:bounding {:x1 79, :y1 457, :x2 642, :y2 683, :width 722, :height 1005.3286062486153}, :rects (), :page 55}, :content {:text "[:span]", :image 1648707179638}, :properties {:color "yellow"}} {:id #uuid "62454701-8930-4021-934b-388c85a330e5", :page 57, :position {:bounding {:x1 190, :y1 101, :x2 543, :y2 358, :width 722, :height 1005.3286062486153}, :rects (), :page 57}, :content {:text "[:span]", :image 1648707329143}, :properties {:color "yellow"}} {:id #uuid "6245471b-13ef-4cfb-975d-69af821a09d0", :page 57, :position {:bounding {:x1 -0.011749625205993652, :y1 361.59027099609375, :x2 721.9967651367188, :y2 514.2658081054688, :width 722, :height 1005.3286062486153}, :rects ({:x1 267.8672790527344, :y1 361.59027099609375, :x2 721.9942626953125, :y2 385.87152099609375, :width 722, :height 1005.3286062486153} {:x1 114.88359832763672, :y1 365.43402099609375, :x2 654.1092529296875, :y2 384.43402099609375, :width 722, :height 1005.3286062486153} {:x1 -0.011743202805519104, :y1 385.9510192871094, :x2 721.9967651367188, :y2 406.8260192871094, :width 722, :height 1005.3286062486153} {:x1 -0.01174706220626831, :y1 406.9041442871094, :x2 721.982210457325, :y2 427.7791748046875, :width 722, :height 1005.3286062486153} {:x1 -0.011749625205993652, :y1 427.8729248046875, :x2 721.9796444177628, :y2 448.7479248046875, :width 722, :height 1005.3286062486153} {:x1 -0.008644431829452515, :y1 448.8260498046875, :x2 721.9788208007812, :y2 469.6229248046875, :width 722, :height 1005.3286062486153} {:x1 -0.011743947863578796, :y1 469.702880859375, :x2 721.9738159179688, :y2 490.499755859375, :width 722, :height 1005.3286062486153} {:x1 -0.011744558811187744, :y1 490.59393310546875, :x2 335.703125, :y2 514.2658081054688, :width 722, :height 1005.3286062486153}), :page 57}, :content {:text "一个特定算子的子任务（subtask）的个数被称之为其并行度（parallelism）。这样，包含并行子任务的数据流，就是并行数据流，它需要多个分区（stream  partition）来分配并行任务。一般情况下，一个流程序的并行度，可以认为就是其所有算子中最大的并行度。一个程序中，不同的算子可能具有不同的并行度。如图4-8所示，当前数据流中有source、map、window、sink四个算子，除最后sink，其他算子的并行度都为2。整个程序包含了7个子任务，至少需要2个分区来并行执行。我们可以说，这段流处理程序的并行度就是2。"}, :properties {:color "yellow"}} {:id #uuid "62454a8d-db87-42a7-838d-611c206f0a5e", :page 61, :position {:bounding {:x1 131, :y1 277, :x2 608, :y2 916, :width 722, :height 1005.3286062486153}, :rects (), :page 61}, :content {:text "[:span]", :image 1648708237078}, :properties {:color "yellow"}} {:id #uuid "62454e39-97d3-4303-a24a-a1467fc124fa", :page 63, :position {:bounding {:x1 86, :y1 623, :x2 655, :y2 914, :width 722, :height 1005.3286062486153}, :rects (), :page 63}, :content {:text "[:span]", :image 1648709177499}, :properties {:color "yellow"}} {:id #uuid "62454e59-5ef5-47ad-85b9-66b9677fa165", :page 64, :position {:bounding {:x1 -0.012770503759384155, :y1 178.26185607910156, :x2 721.997314453125, :y2 440.984130859375, :width 722, :height 1005.3286062486153}, :rects ({:x1 321.94390869140625, :y1 178.26185607910156, :x2 721.9793701171875, :y2 205.24623107910156, :width 722, :height 1005.3286062486153} {:x1 96.00971984863281, :y1 180.77748107910156, :x2 320.1858215332031, :y2 199.77748107910156, :width 722, :height 1005.3286062486153} {:x1 -0.012770503759384155, :y1 205.32569885253906, :x2 721.9720317423344, :y2 228.59132385253906, :width 722, :height 1005.3286062486153} {:x1 -0.005736827850341797, :y1 228.5986785888672, :x2 721.9789428710938, :y2 249.8330535888672, :width 722, :height 1005.3286062486153} {:x1 -0.0057320743799209595, :y1 249.9197540283203, :x2 721.9963989257812, :y2 270.7947692871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809459388256073, :y1 270.8885192871094, :x2 721.9739990234375, :y2 291.7010192871094, :width 722, :height 1005.3286062486153} {:x1 -0.008093178272247314, :y1 291.776611328125, :x2 721.9934692382812, :y2 312.589111328125, :width 722, :height 1005.3286062486153} {:x1 -0.00808800756931305, :y1 312.6853942871094, :x2 721.997314453125, :y2 333.5603942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809478759765625, :y1 333.6385192871094, :x2 721.9752655029297, :y2 354.5135192871094, :width 722, :height 1005.3286062486153} {:x1 -0.008094727993011475, :y1 354.5916442871094, :x2 721.967735350132, :y2 375.4666442871094, :width 722, :height 1005.3286062486153} {:x1 -0.005731731653213501, :y1 375.5603942871094, :x2 721.9813232421875, :y2 396.4353942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809277594089508, :y1 396.5135192871094, :x2 721.995849609375, :y2 417.3103942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00808839499950409, :y1 417.390380859375, :x2 340.34051513671875, :y2 440.984130859375, :width 722, :height 1005.3286062486153}), :page 64}, :content {:text "我们可以通过集群的配置文件来设定TaskManager的slot数量：taskmanager.numberOfTaskSlots: 8通过调整slot的数量，我们就可以控制子任务之间的隔离级别。具体来说，如果一个TaskManager只有一个slot，那将意味着每个任务都会运行在独立的JVM中（当然，该JVM可能是通过一个特定的容器启动的）；而一个TaskManager设置多个slot则意味着多个子任务可以共享同一个JVM。它们的区别在于：前者任务之间完全独立运行，隔离级别更高、彼此间的影响可以降到最小；而后者在同一个JVM进程中运行的任务，将共享TCP连接和心跳消息，也可能共享数据集和数据结构，这就减少了每个任务的运行开销，在降低隔离级别的同时提升了性能。需要注意的是，slot目前仅仅用来隔离内存，不会涉及CPU的隔离。在具体应用时，可以将slot数量配置为机器的CPU核心数，尽量避免不同任务之间对CPU的竞争。这也是开发环境默认并行度设为机器CPU数量的原因。"}, :properties {:color "yellow"}} {:id #uuid "62454e82-ff8f-4b89-b726-614cb95daff5", :page 64, :position {:bounding {:x1 57, :y1 662, :x2 613, :y2 926, :width 722, :height 1005.3286062486153}, :rects (), :page 64}, :content {:text "[:span]", :image 1648709252945}, :properties {:color "yellow"}} {:id #uuid "62454e91-b72e-43b4-86a2-5c5565148a9e", :page 65, :position {:bounding {:x1 269.03875732421875, :y1 127.34027099609375, :x2 539.35205078125, :y2 151.54339599609375, :width 722, :height 1005.3286062486153}, :rects ({:x1 353.140625, :y1 127.34027099609375, :x2 523.5791625976562, :y2 151.54339599609375, :width 722, :height 1005.3286062486153} {:x1 269.03875732421875, :y1 131.18402099609375, :x2 382.7509460449219, :y2 150.18402099609375, :width 722, :height 1005.3286062486153} {:x1 525.30419921875, :y1 131.18402099609375, :x2 539.35205078125, :y2 150.18402099609375, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "默认情况下，Flink是允许子任务共享slot的"}, :properties {:color "yellow"}}]}