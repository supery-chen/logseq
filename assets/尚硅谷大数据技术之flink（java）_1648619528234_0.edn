{:highlights [{:id #uuid "62440a36-c97d-4cb0-939a-621b0e56e98b", :page 28, :position {:bounding {:x1 -0.008093699812889099, :y1 705.771728515625, :x2 721.9751586914062, :y2 749.8054809570312, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.01123809814453, :y1 705.771728515625, :x2 721.9751586914062, :y2 724.771728515625, :width 722, :height 1005.3286062486153} {:x1 -0.008093699812889099, :y1 727.1804809570312, :x2 246.83384704589844, :y2 749.8054809570312, :width 722, :height 1005.3286062486153}), :page 28}, :content {:text "这里需要提到Flink中的几个关键组件：客户端（Client）、作业管理器（JobManager）和任务管理器（TaskManager）"}, :properties {:color "yellow"}} {:id #uuid "62440a74-bd5d-41e4-b278-4d1f25aaba68", :page 29, :position {:bounding {:x1 119, :y1 56, :x2 615, :y2 385, :width 722, :height 1005.3286062486153}, :rects (), :page 29}, :content {:text "[:span]", :image 1648626292381}, :properties {:color "yellow"}} {:id #uuid "62450ce5-4bd3-430d-ad09-3c77d87ceace", :page 38, :position {:bounding {:x1 96.00945281982422, :y1 269.5573425292969, :x2 446.33260345458984, :y2 288.557373046875, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.00945281982422, :y1 269.5573425292969, :x2 446.33260345458984, :y2 288.557373046875, :width 722, :height 1005.3286062486153}), :page 38}, :content {:text "会话模式比较适合于单个规模小、执行时间短的大量作业"}, :properties {:color "yellow"}} {:id #uuid "62450cfa-2832-4b40-b6f9-7b46e358410e", :page 38, :position {:bounding {:x1 180.0704803466797, :y1 707.849853515625, :x2 586.4908905029297, :y2 726.849853515625, :width 722, :height 1005.3286062486153}, :rects ({:x1 180.0704803466797, :y1 707.849853515625, :x2 586.4908905029297, :y2 726.849853515625, :width 722, :height 1005.3286062486153}), :page 38}, :content {:text "单作业模式在生产环境运行更加稳定，所以是实际应用的首选模式"}, :properties {:color "yellow"}} {:id #uuid "62450d13-0ed7-4469-962b-e908d22704a6", :page 39, :position {:bounding {:x1 -0.011749267578125, :y1 132.44610595703125, :x2 721.9923095703125, :y2 196.729248046875, :width 722, :height 1005.3286062486153}, :rects ({:x1 142.9627227783203, :y1 132.44610595703125, :x2 721.9923095703125, :y2 151.44610595703125, :width 722, :height 1005.3286062486153} {:x1 -0.011749267578125, :y1 153.85235595703125, :x2 721.9876708984375, :y2 176.39923095703125, :width 722, :height 1005.3286062486153} {:x1 86.87938690185547, :y1 177.729248046875, :x2 170.93898010253906, :y2 196.729248046875, :width 722, :height 1005.3286062486153}), :page 39}, :content {:text "我们需要为每一个提交的应用单独启动一个JobManager，也就是创建一个集群。这个JobManager只为执行这一个应用而存在，执行结束之后JobManager也就关闭了，这就是所谓的应用模式"}, :properties {:color "yellow"}} {:id #uuid "62450d33-59e4-48c0-ad47-02c1bc2cd5f3", :page 39, :position {:bounding {:x1 -0.011748969554901123, :y1 460.77423095703125, :x2 721.9739110171795, :y2 550.1023559570312, :width 722, :height 1005.3286062486153}, :rects ({:x1 184.0330810546875, :y1 460.77423095703125, :x2 654.266357421875, :y2 479.77423095703125, :width 722, :height 1005.3286062486153} {:x1 -0.011748969554901123, :y1 482.18048095703125, :x2 721.9712832570076, :y2 504.74298095703125, :width 722, :height 1005.3286062486153} {:x1 -0.011745721101760864, :y1 504.82525634765625, :x2 721.9739110171795, :y2 527.3877563476562, :width 722, :height 1005.3286062486153} {:x1 -0.011742755770683289, :y1 527.4773559570312, :x2 470.11065673828125, :y2 550.1023559570312, :width 722, :height 1005.3286062486153}), :page 39}, :content {:text "在会话模式下，集群的生命周期独立于集群上运行的任何作业的生命周期，并且提交的所有作业共享资源。而单作业模式为每个提交的作业创建一个集群，带来了更好的资源隔离，这时集群的生命周期与作业的生命周期绑定。最后，应用模式为每个应用程序创建一个会话集群，在JobManager上直接调用应用程序的main()方法"}, :properties {:color "yellow"}} {:id #uuid "62450dec-7154-4f5d-819e-fc4150cff13e", :page 42, :position {:bounding {:x1 -0.008094295859336853, :y1 439.49298095703125, :x2 721.9898681640625, :y2 540.2765502929688, :width 722, :height 1005.3286062486153}, :rects ({:x1 164.640625, :y1 439.49298095703125, :x2 721.9898681640625, :y2 458.49298095703125, :width 722, :height 1005.3286062486153} {:x1 -0.008091747760772705, :y1 460.8229675292969, :x2 721.9821166992188, :y2 483.3698425292969, :width 722, :height 1005.3286062486153} {:x1 -0.008094295859336853, :y1 483.46173095703125, :x2 721.9684448242188, :y2 506.10235595703125, :width 722, :height 1005.3286062486153} {:x1 -0.00808832049369812, :y1 506.1983947753906, :x2 318.8908996582031, :y2 540.2765502929688, :width 722, :height 1005.3286062486153} {:x1 320.6511535644531, :y1 507.5265197753906, :x2 362.7403564453125, :y2 526.5265502929688, :width 722, :height 1005.3286062486153}), :page 42}, :content {:text "YARN上部署的过程是：客户端把Flink应用提交给Yarn的ResourceManager, Yarn的ResourceManager会向Yarn的NodeManager申请容器。在这些容器上，Flink会部署JobManager和TaskManager的实例，从而启动集群。Flink会根据运行在JobManger上的作业所需要的Slot数量动态分配TaskManager资源。"}, :properties {:color "yellow"}} {:id #uuid "62451f28-540a-4c62-abfe-46958ef9aef6", :page 49, :position {:bounding {:x1 90, :y1 59, :x2 653, :y2 461, :width 721.9999999999999, :height 1005.3286062486152}, :rects (), :page 49}, :content {:text "[:span]", :image 1648697128409}, :properties {:color "yellow"}} {:id #uuid "62451f57-78fd-4be4-ad93-a47a58f42523", :page 48, :position {:bounding {:x1 -0.008094727993011475, :y1 725.503173828125, :x2 721.9892578125, :y2 884.5603637695312, :width 721.9999999999999, :height 1005.3286062486152}, :rects ({:x1 127.37031555175781, :y1 725.503173828125, :x2 721.9892578125, :y2 754.846923828125, :width 721.9999999999999, :height 1005.3286062486152} {:x1 96.00971984863281, :y1 734.409423828125, :x2 635.235107421875, :y2 753.409423828125, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.0001220703125, :y1 754.9353637695312, :x2 721.9823608398438, :y2 775.7322387695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.008091211318969727, :y1 775.812255859375, :x2 721.974609375, :y2 796.609130859375, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.0001220703125, :y1 796.7009887695312, :x2 721.9725341796875, :y2 817.5759887695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.008094727993011475, :y1 817.6541137695312, :x2 205.21875, :y2 884.5603637695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 183.6564178466797, :y1 818.0916137695312, :x2 247.82403564453125, :y2 837.0916137695312, :width 721.9999999999999, :height 1005.3286062486152}), :page 48}, :content {:text "Flink的运行时架构中，最重要的就是两大组件：作业管理器（JobManger）和任务管理器（TaskManager）。对于一个提交执行的作业，JobManager是真正意义上的“管理者”（Master），负责管理调度，所以在不考虑高可用的情况下只能有一个；而TaskManager是“工作者”（Worker、Slave），负责执行任务处理数据，所以可以有一个或多个。Flink的作业提交和任务处理时的系统如图4-1所示。"}, :properties {:color "yellow"}} {:id #uuid "62453fc2-a342-43cb-8e2c-678f7917fb1d", :page 51, :position {:bounding {:x1 132, :y1 562, :x2 606, :y2 734, :width 722, :height 1005.3286062486153}, :rects (), :page 51}, :content {:text "[:span]", :image 1648705474055}, :properties {:color "yellow"}} {:id #uuid "62454063-0020-4aa4-b678-18e16e071e4f", :page 52, :position {:bounding {:x1 126, :y1 426, :x2 574, :y2 665, :width 722, :height 1005.3286062486153}, :rects (), :page 52}, :content {:text "[:span]", :image 1648705635790}, :properties {:color "yellow"}} {:id #uuid "62454115-6eba-4154-ab1d-e057d767c4a2", :page 53, :position {:bounding {:x1 119, :y1 370, :x2 654, :y2 616, :width 722, :height 1005.3286062486153}, :rects (), :page 53}, :content {:text "[:span]", :image 1648705813730}, :properties {:color "yellow"}} {:id #uuid "62454135-1954-4edb-99bf-2f6d9975f66e", :page 54, :position {:bounding {:x1 108, :y1 165, :x2 628, :y2 447, :width 722, :height 1005.3286062486153}, :rects (), :page 54}, :content {:text "[:span]", :image 1648705845181}, :properties {:color "yellow"}} {:id #uuid "624541f2-189f-4995-a375-3ef37f35add8", :page 55, :position {:bounding {:x1 107, :y1 363, :x2 601, :y2 443, :width 722, :height 1005.3286062486153}, :rects (), :page 55}, :content {:text "[:span]", :image 1648706034535}, :properties {:color "yellow"}} {:id #uuid "6245466b-87c3-47f2-b8e0-eb30d8b2cfa7", :page 55, :position {:bounding {:x1 79, :y1 457, :x2 642, :y2 683, :width 722, :height 1005.3286062486153}, :rects (), :page 55}, :content {:text "[:span]", :image 1648707179638}, :properties {:color "yellow"}} {:id #uuid "62454701-8930-4021-934b-388c85a330e5", :page 57, :position {:bounding {:x1 190, :y1 101, :x2 543, :y2 358, :width 722, :height 1005.3286062486153}, :rects (), :page 57}, :content {:text "[:span]", :image 1648707329143}, :properties {:color "yellow"}} {:id #uuid "6245471b-13ef-4cfb-975d-69af821a09d0", :page 57, :position {:bounding {:x1 -0.011749625205993652, :y1 361.59027099609375, :x2 721.9967651367188, :y2 514.2658081054688, :width 722, :height 1005.3286062486153}, :rects ({:x1 267.8672790527344, :y1 361.59027099609375, :x2 721.9942626953125, :y2 385.87152099609375, :width 722, :height 1005.3286062486153} {:x1 114.88359832763672, :y1 365.43402099609375, :x2 654.1092529296875, :y2 384.43402099609375, :width 722, :height 1005.3286062486153} {:x1 -0.011743202805519104, :y1 385.9510192871094, :x2 721.9967651367188, :y2 406.8260192871094, :width 722, :height 1005.3286062486153} {:x1 -0.01174706220626831, :y1 406.9041442871094, :x2 721.982210457325, :y2 427.7791748046875, :width 722, :height 1005.3286062486153} {:x1 -0.011749625205993652, :y1 427.8729248046875, :x2 721.9796444177628, :y2 448.7479248046875, :width 722, :height 1005.3286062486153} {:x1 -0.008644431829452515, :y1 448.8260498046875, :x2 721.9788208007812, :y2 469.6229248046875, :width 722, :height 1005.3286062486153} {:x1 -0.011743947863578796, :y1 469.702880859375, :x2 721.9738159179688, :y2 490.499755859375, :width 722, :height 1005.3286062486153} {:x1 -0.011744558811187744, :y1 490.59393310546875, :x2 335.703125, :y2 514.2658081054688, :width 722, :height 1005.3286062486153}), :page 57}, :content {:text "一个特定算子的子任务（subtask）的个数被称之为其并行度（parallelism）。这样，包含并行子任务的数据流，就是并行数据流，它需要多个分区（stream  partition）来分配并行任务。一般情况下，一个流程序的并行度，可以认为就是其所有算子中最大的并行度。一个程序中，不同的算子可能具有不同的并行度。如图4-8所示，当前数据流中有source、map、window、sink四个算子，除最后sink，其他算子的并行度都为2。整个程序包含了7个子任务，至少需要2个分区来并行执行。我们可以说，这段流处理程序的并行度就是2。"}, :properties {:color "yellow"}} {:id #uuid "62454a8d-db87-42a7-838d-611c206f0a5e", :page 61, :position {:bounding {:x1 131, :y1 277, :x2 608, :y2 916, :width 722, :height 1005.3286062486153}, :rects (), :page 61}, :content {:text "[:span]", :image 1648708237078}, :properties {:color "yellow"}} {:id #uuid "62454e39-97d3-4303-a24a-a1467fc124fa", :page 63, :position {:bounding {:x1 86, :y1 623, :x2 655, :y2 914, :width 722, :height 1005.3286062486153}, :rects (), :page 63}, :content {:text "[:span]", :image 1648709177499}, :properties {:color "yellow"}} {:id #uuid "62454e59-5ef5-47ad-85b9-66b9677fa165", :page 64, :position {:bounding {:x1 -0.012770503759384155, :y1 178.26185607910156, :x2 721.997314453125, :y2 440.984130859375, :width 722, :height 1005.3286062486153}, :rects ({:x1 321.94390869140625, :y1 178.26185607910156, :x2 721.9793701171875, :y2 205.24623107910156, :width 722, :height 1005.3286062486153} {:x1 96.00971984863281, :y1 180.77748107910156, :x2 320.1858215332031, :y2 199.77748107910156, :width 722, :height 1005.3286062486153} {:x1 -0.012770503759384155, :y1 205.32569885253906, :x2 721.9720317423344, :y2 228.59132385253906, :width 722, :height 1005.3286062486153} {:x1 -0.005736827850341797, :y1 228.5986785888672, :x2 721.9789428710938, :y2 249.8330535888672, :width 722, :height 1005.3286062486153} {:x1 -0.0057320743799209595, :y1 249.9197540283203, :x2 721.9963989257812, :y2 270.7947692871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809459388256073, :y1 270.8885192871094, :x2 721.9739990234375, :y2 291.7010192871094, :width 722, :height 1005.3286062486153} {:x1 -0.008093178272247314, :y1 291.776611328125, :x2 721.9934692382812, :y2 312.589111328125, :width 722, :height 1005.3286062486153} {:x1 -0.00808800756931305, :y1 312.6853942871094, :x2 721.997314453125, :y2 333.5603942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809478759765625, :y1 333.6385192871094, :x2 721.9752655029297, :y2 354.5135192871094, :width 722, :height 1005.3286062486153} {:x1 -0.008094727993011475, :y1 354.5916442871094, :x2 721.967735350132, :y2 375.4666442871094, :width 722, :height 1005.3286062486153} {:x1 -0.005731731653213501, :y1 375.5603942871094, :x2 721.9813232421875, :y2 396.4353942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809277594089508, :y1 396.5135192871094, :x2 721.995849609375, :y2 417.3103942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00808839499950409, :y1 417.390380859375, :x2 340.34051513671875, :y2 440.984130859375, :width 722, :height 1005.3286062486153}), :page 64}, :content {:text "我们可以通过集群的配置文件来设定TaskManager的slot数量：taskmanager.numberOfTaskSlots: 8通过调整slot的数量，我们就可以控制子任务之间的隔离级别。具体来说，如果一个TaskManager只有一个slot，那将意味着每个任务都会运行在独立的JVM中（当然，该JVM可能是通过一个特定的容器启动的）；而一个TaskManager设置多个slot则意味着多个子任务可以共享同一个JVM。它们的区别在于：前者任务之间完全独立运行，隔离级别更高、彼此间的影响可以降到最小；而后者在同一个JVM进程中运行的任务，将共享TCP连接和心跳消息，也可能共享数据集和数据结构，这就减少了每个任务的运行开销，在降低隔离级别的同时提升了性能。需要注意的是，slot目前仅仅用来隔离内存，不会涉及CPU的隔离。在具体应用时，可以将slot数量配置为机器的CPU核心数，尽量避免不同任务之间对CPU的竞争。这也是开发环境默认并行度设为机器CPU数量的原因。"}, :properties {:color "yellow"}} {:id #uuid "62454e82-ff8f-4b89-b726-614cb95daff5", :page 64, :position {:bounding {:x1 57, :y1 662, :x2 613, :y2 926, :width 722, :height 1005.3286062486153}, :rects (), :page 64}, :content {:text "[:span]", :image 1648709252945}, :properties {:color "yellow"}} {:id #uuid "62454e91-b72e-43b4-86a2-5c5565148a9e", :page 65, :position {:bounding {:x1 269.03875732421875, :y1 127.34027099609375, :x2 539.35205078125, :y2 151.54339599609375, :width 722, :height 1005.3286062486153}, :rects ({:x1 353.140625, :y1 127.34027099609375, :x2 523.5791625976562, :y2 151.54339599609375, :width 722, :height 1005.3286062486153} {:x1 269.03875732421875, :y1 131.18402099609375, :x2 382.7509460449219, :y2 150.18402099609375, :width 722, :height 1005.3286062486153} {:x1 525.30419921875, :y1 131.18402099609375, :x2 539.35205078125, :y2 150.18402099609375, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "默认情况下，Flink是允许子任务共享slot的"}, :properties {:color "yellow"}} {:id #uuid "62454ee2-c050-42d0-a67a-8d1e48e7e94f", :page 65, :position {:bounding {:x1 -0.01174953579902649, :y1 151.984130859375, :x2 721.9873657226562, :y2 298.015380859375, :width 722, :height 1005.3286062486153}, :rects ({:x1 86.87904357910156, :y1 151.984130859375, :x2 721.9708251953125, :y2 170.984130859375, :width 722, :height 1005.3286062486153} {:x1 -0.011747121810913086, :y1 172.49786376953125, :x2 721.9742431640625, :y2 193.37286376953125, :width 722, :height 1005.3286062486153} {:x1 -0.01174953579902649, :y1 193.45098876953125, :x2 721.9864501953125, :y2 214.32598876953125, :width 722, :height 1005.3286062486153} {:x1 -0.011743947863578796, :y1 214.40411376953125, :x2 721.96875, :y2 235.27911376953125, :width 722, :height 1005.3286062486153} {:x1 -0.008644431829452515, :y1 235.37286376953125, :x2 721.978515625, :y2 256.2479248046875, :width 722, :height 1005.3286062486153} {:x1 -0.011748388409614563, :y1 256.3260498046875, :x2 721.9873657226562, :y2 277.1229248046875, :width 722, :height 1005.3286062486153} {:x1 -0.011742889881134033, :y1 277.202880859375, :x2 412.1725158691406, :y2 298.015380859375, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "只要属于同一个作业，那么对于不同任务节点的并行子任务，就可以放到同一个slot上执行。所以对于第一个任务节点source→map，它的6个并行子任务必须分到不同的slot上（如果在同一slot就没法数据并行了），而第二个任务节点keyBy/window/apply的并行子任务却可以和第一个任务节点共享slot。于是最终结果就变成了：每个任务节点的并行子任务一字排开，占据不同的slot；而不同的任务节点的子任务可以共享slot。一个slot中，可以将程序处理的所有任务都放在这里执行，我们把它叫作保存了整个作业的运行管道（pipeline）。"}, :properties {:color "yellow"}} {:id #uuid "62454f17-cf32-4f0c-b7c4-06f09a36058b", :page 65, :position {:bounding {:x1 -0.01174953579902649, :y1 549.7634887695312, :x2 721.9903564453125, :y2 612.1072387695312, :width 722, :height 1005.3286062486153}, :rects ({:x1 365.5645751953125, :y1 549.7634887695312, :x2 654.2659301757812, :y2 568.7634887695312, :width 722, :height 1005.3286062486153} {:x1 -0.01174953579902649, :y1 570.2791137695312, :x2 721.9903564453125, :y2 591.1541137695312, :width 722, :height 1005.3286062486153} {:x1 -0.011745616793632507, :y1 591.2322387695312, :x2 176.953125, :y2 612.1072387695312, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "当我们将资源密集型和非密集型的任务同时放到一个slot中，它们就可以自行分配对资源占用的比例，从而保证最重的活平均分配给所有的TaskManager。"}, :properties {:color "yellow"}} {:id #uuid "62454f2b-de44-4b9a-bef3-00b9580a1ecb", :page 65, :position {:bounding {:x1 -0.011747926473617554, :y1 612.6384887695312, :x2 721.9775390625, :y2 653.9509887695312, :width 722, :height 1005.3286062486153}, :rects ({:x1 114.8781967163086, :y1 612.6384887695312, :x2 721.9775390625, :y2 631.6384887695312, :width 722, :height 1005.3286062486153} {:x1 -0.011747926473617554, :y1 633.1541137695312, :x2 535.29541015625, :y2 653.9509887695312, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "slot共享另一个好处就是允许我们保存完整的作业管道。这样一来，即使某个TaskManager出现故障宕机，其他节点也可以完全不受影响，作业的任务可以继续执行"}, :properties {:color "yellow"}} {:id #uuid "62454f43-7104-418b-a2e3-2e593ce87043", :page 65, :position {:bounding {:x1 -0.011747121810913086, :y1 654.390380859375, :x2 722.00537109375, :y2 736.2947387695312, :width 722, :height 1005.3286062486153}, :rects ({:x1 114.88580322265625, :y1 654.390380859375, :x2 722.00537109375, :y2 673.390380859375, :width 722, :height 1005.3286062486153} {:x1 -0.011747121810913086, :y1 674.9041137695312, :x2 721.9780883789062, :y2 695.7947387695312, :width 722, :height 1005.3286062486153} {:x1 -0.011746898293495178, :y1 695.8841552734375, :x2 721.9851684570312, :y2 716.7747802734375, :width 722, :height 1005.3286062486153} {:x1 86.87538146972656, :y1 717.2947387695312, :x2 213.03448486328125, :y2 736.2947387695312, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "另外，同一个任务节点的并行子任务是不能共享slot的，所以允许slot共享之后，运行作业所需的slot数量正好就是作业中所有算子并行度的最大值。这样一来，我们考虑当前集群需要配置多少slot资源时，就不需要再去详细计算一个作业总共包含多少个并行子任务了，只看最大的并行度就够了"}, :properties {:color "yellow"}} {:id #uuid "62454f5f-ecb2-4910-8248-aed5113b5b47", :page 65, :position {:bounding {:x1 -0.01174953579902649, :y1 738.2634887695312, :x2 721.9948120117188, :y2 879.1411743164062, :width 722, :height 1005.3286062486153}, :rects ({:x1 114.888427734375, :y1 738.2634887695312, :x2 721.984375, :y2 759.1384887695312, :width 722, :height 1005.3286062486153} {:x1 -0.011747851967811584, :y1 758.7791137695312, :x2 721.979736328125, :y2 779.5759887695312, :width 722, :height 1005.3286062486153} {:x1 -0.01174953579902649, :y1 779.656005859375, :x2 721.9840390384197, :y2 799.359130859375, :width 722, :height 1005.3286062486153} {:x1 -0.00080108642578125, :y1 799.4451293945312, :x2 721.9948120117188, :y2 817.5857543945312, :width 722, :height 1005.3286062486153} {:x1 89.78044891357422, :y1 801.7888793945312, :x2 456.9737854003906, :y2 813.7888793945312, :width 722, :height 1005.3286062486153} {:x1 478.59375, :y1 801.7888793945312, :x2 493.0041809082031, :y2 813.7888793945312, :width 722, :height 1005.3286062486153} {:x1 -0.008642926812171936, :y1 817.5986938476562, :x2 721.983642578125, :y2 838.7549438476562, :width 722, :height 1005.3286062486153} {:x1 -0.011748388409614563, :y1 838.843505859375, :x2 721.9830932617188, :y2 859.624755859375, :width 722, :height 1005.3286062486153} {:x1 86.8905029296875, :y1 860.1411743164062, :x2 255.06129455566406, :y2 879.1411743164062, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "当然，Flink默认是允许slot共享的，如果希望某个算子对应的任务完全独占一个slot，或者只有某一部分算子共享slot，我们也可以通过设置“slot共享组”（SlotSharingGroup）手动指定：.map(word -> Tuple2.of(word, 1L)).slotSharingGroup(“1”);这样，只有属于同一个slot共享组的子任务，才会开启slot共享；不同组之间的任务是完全隔离的，必须分配到不同的slot上。在这种场景下，总共需要的slot数量，就是各个slot共享组最大并行度的总和。"}, :properties {:color "yellow"}} {:id #uuid "624551f0-6d44-4f88-b3d9-9d73db8febc9", :page 69, :position {:bounding {:x1 88, :y1 319, :x2 584, :y2 413, :width 722, :height 1005.3286062486153}, :rects (), :page 69}, :content {:text "[:span]", :image 1648710128297}, :properties {:color "yellow"}} {:id #uuid "6245531d-7ab5-43c2-8e46-cace6d0eb13c", :page 69, :position {:bounding {:x1 89.7641372680664, :y1 861.6134033203125, :x2 658.2296600341797, :y2 890.8915405273438, :width 722, :height 1005.3286062486153}, :rects ({:x1 89.77494812011719, :y1 861.6134033203125, :x2 658.2296600341797, :y2 873.6134033203125, :width 722, :height 1005.3286062486153} {:x1 89.7641372680664, :y1 878.8915405273438, :x2 471.3401870727539, :y2 890.8915405273438, :width 722, :height 1005.3286062486153}), :page 69}, :content {:text "StreamExecutionEnvironment                        env                        = StreamExecutionEnvironment.getExecutionEnvironment();"}, :properties {:color "yellow"}} {:id #uuid "62455327-4900-47c2-a95b-64c588a3069e", :page 70, :position {:bounding {:x1 70.84210205078125, :y1 207.3450927734375, :x2 721.9764404296875, :y2 236.62591552734375, :width 722, :height 1005.3286062486153}, :rects ({:x1 70.84210205078125, :y1 207.3450927734375, :x2 721.9764404296875, :y2 219.3450927734375, :width 722, :height 1005.3286062486153} {:x1 70.85724639892578, :y1 224.62591552734375, :x2 445.2280960083008, :y2 236.62591552734375, :width 722, :height 1005.3286062486153}), :page 70}, :content {:text "StreamExecutionEnvironment                     localEnv                     = StreamExecutionEnvironment.createLocalEnvironment();"}, :properties {:color "yellow"}} {:id #uuid "62455333-4059-4d0a-a266-e4d36f31f389", :page 70, :position {:bounding {:x1 -0.009825989603996277, :y1 318.5638427734375, :x2 721.9963989257812, :y2 417.13525390625, :width 722, :height 1005.3286062486153}, :rects ({:x1 70.85724639892578, :y1 318.5638427734375, :x2 538.8208084106445, :y2 330.5638427734375, :width 722, :height 1005.3286062486153} {:x1 -0.00263214111328125, :y1 333.21966552734375, :x2 721.9930419921875, :y2 350.46966552734375, :width 722, :height 1005.3286062486153} {:x1 124.01299285888672, :y1 335.84466552734375, :x2 303.99688720703125, :y2 347.84466552734375, :width 722, :height 1005.3286062486153} {:x1 -0.009825989603996277, :y1 350.50091552734375, :x2 721.9963989257812, :y2 368.65716552734375, :width 722, :height 1005.3286062486153} {:x1 -0.009825989603996277, :y1 367.8583984375, :x2 721.9755859375, :y2 385.6083984375, :width 722, :height 1005.3286062486153} {:x1 -0.009825989603996277, :y1 385.61962890625, :x2 721.9801635742188, :y2 402.88525390625, :width 722, :height 1005.3286062486153} {:x1 124.00582885742188, :y1 405.13525390625, :x2 145.62147521972656, :y2 417.13525390625, :width 722, :height 1005.3286062486153}), :page 70}, :content {:text "StreamExecutionEnvironment remoteEnv = StreamExecutionEnvironment.createRemoteEnvironment(\"host\", // JobManager主机名1234, // JobManager进程端口号\"path/to/jarFile.jar\"// 提交给JobManager的JAR包); "}, :properties {:color "yellow"}} {:id #uuid "6245533d-b444-4af3-855e-91035b9a28e8", :page 70, :position {:bounding {:x1 -0.008092910051345825, :y1 424.1331787109375, :x2 721.9904422461987, :y2 488.57110595703125, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.00318145751953, :y1 424.1331787109375, :x2 635.3948440551758, :y2 443.1331787109375, :width 722, :height 1005.3286062486153} {:x1 -0.008092910051345825, :y1 445.53985595703125, :x2 721.9904422461987, :y2 468.16485595703125, :width 722, :height 1005.3286062486153} {:x1 67.98240661621094, :y1 469.57110595703125, :x2 278.2424011230469, :y2 488.57110595703125, :width 722, :height 1005.3286062486153}), :page 70}, :content {:text "在获取到程序执行环境后，我们还可以对执行环境进行灵活的设置。比如可以全局设置程序的并行度、禁用算子链，还可以定义程序的时间语义、配置容错机制。关于时间语义和容错机制，我们会在后续的章节介绍。"}, :properties {:color "yellow"}} {:id #uuid "624553b8-d0e6-46c6-908f-3c6be96c2c9f", :page 71, :position {:bounding {:x1 89.7641372680664, :y1 362.7044677734375, :x2 406.573974609375, :y2 381.6419677734375, :width 722, :height 1005.3286062486153}, :rects ({:x1 190.5625, :y1 362.7044677734375, :x2 333.3706359863281, :y2 381.6419677734375, :width 722, :height 1005.3286062486153} {:x1 89.7641372680664, :y1 364.6419677734375, :x2 406.573974609375, :y2 376.6419677734375, :width 722, :height 1005.3286062486153}), :page 71}, :content {:text "bin/flink run -Dexecution.runtime-mode=BATCH"}, :properties {:color "yellow"}} {:id #uuid "6245550b-ea82-43bc-ab73-c4b9d079dd19", :page 72, :position {:bounding {:x1 109, :y1 515, :x2 590, :y2 601, :width 722, :height 1005.3286062486153}, :rects (), :page 72}, :content {:text "[:span]", :image 1648710923832}, :properties {:color "yellow"}} {:id #uuid "62466b57-e09a-407f-bdf8-4e7212545c6e", :page 82, :position {:bounding {:x1 85, :y1 357, :x2 687, :y2 464, :width 800, :height 1113.937513848881}, :rects (), :page 82}, :content {:text "[:span]", :image 1648782167373}, :properties {:color "yellow"}} {:id #uuid "6246c794-102a-411c-8d96-1a780b226178", :page 96, :position {:bounding {:x1 -0.00979013741016388, :y1 781.4329833984375, :x2 799.9881591796875, :y2 932.1044311523438, :width 800, :height 1113.937513848881}, :rects ({:x1 224.894775390625, :y1 781.4329833984375, :x2 799.9881591796875, :y2 809.2923583984375, :width 800, :height 1113.937513848881} {:x1 98.58726501464844, :y1 786.6048583984375, :x2 222.8818817138672, :y2 806.6048583984375, :width 800, :height 1113.937513848881} {:x1 -0.00979013741016388, :y1 809.911865234375, :x2 799.9842529296875, :y2 834.380615234375, :width 800, :height 1113.937513848881} {:x1 -0.009788081049919128, :y1 834.9950561523438, :x2 799.9869537353516, :y2 859.5575561523438, :width 800, :height 1113.937513848881} {:x1 -0.004230603575706482, :y1 860.1669311523438, :x2 799.9848441034555, :y2 884.6356811523438, :width 800, :height 1113.937513848881} {:x1 -0.009789690375328064, :y1 885.239990234375, :x2 799.9852664619684, :y2 909.708740234375, :width 800, :height 1113.937513848881} {:x1 75.31381225585938, :y1 912.1044311523438, :x2 184.17691040039062, :y2 932.1044311523438, :width 800, :height 1113.937513848881}), :page 96}, :content {:text "“富函数类”也是DataStream  API提供的一个函数类的接口，所有的Flink函数类都有其Rich版本。富函数类一般是以抽象类的形式出现的。例如：RichMapFunction、RichFilterFunction、RichReduceFunction等。既然“富”，那么它一定会比常规的函数类提供更多、更丰富的功能。与常规函数类的不同主要在于，富函数类可以获取运行环境的上下文，并拥有一些生命周期方法，所以可以实现更复杂的功能。"}, :properties {:color "yellow"}} {:id #uuid "624d0a28-e019-4df0-b32c-11d000f59cf8", :page 106, :position {:bounding {:x1 116, :y1 190, :x2 651, :y2 297, :width 800, :height 1113.937513848881}, :rects (), :page 106}, :content {:text "[:span]", :image 1649216040884}, :properties {:color "yellow"}} {:id #uuid "624d0aa0-3e59-4af2-87e7-97cfae105126", :page 107, :position {:bounding {:x1 91, :y1 285, :x2 731, :y2 927, :width 800, :height 1113.937513848881}, :rects (), :page 107}, :content {:text "[:span]", :image 1649216160184}, :properties {:color "yellow"}} {:id #uuid "624d5897-727a-4259-ba83-8dfcd325e250", :page 108, :position {:bounding {:x1 -0.009789541363716125, :y1 302.7243347167969, :x2 799.9926147460938, :y2 375.8075866699219, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38900756835938, :y1 302.7243347167969, :x2 799.9926147460938, :y2 322.7243347167969, :width 800, :height 1113.937513848881} {:x1 -0.009789541363716125, :y1 326.1448059082031, :x2 799.98681640625, :y2 350.7229309082031, :width 800, :height 1113.937513848881} {:x1 -0.009785771369934082, :y1 351.3388366699219, :x2 213.39759826660156, :y2 375.8075866699219, :width 800, :height 1113.937513848881}), :page 108}, :content {:text "Flink为此专门提供了一个流式文件系统的连接器：StreamingFileSink，它继承自抽象类RichSinkFunction，而且集成了Flink的检查点（checkpoint）机制，用来保证精确一次（exactly once）的一致性语义"}, :properties {:color "yellow"}} {:id #uuid "624d58b3-f284-494c-b4db-60cdbbf1b3bf", :page 108, :position {:bounding {:x1 -0.009788185358047485, :y1 528.786865234375, :x2 799.9979858398438, :y2 601.8544311523438, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38325500488281, :y1 528.786865234375, :x2 799.984375, :y2 553.271240234375, :width 800, :height 1113.937513848881} {:x1 -0.009788185358047485, :y1 552.1990356445312, :x2 799.9979858398438, :y2 576.7771606445312, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 577.3856811523438, :x2 273.3728942871094, :y2 601.8544311523438, :width 800, :height 1113.937513848881}), :page 108}, :content {:text "StreamingFileSink支持行编码（Row-encoded）和批量编码（Bulk-encoded，比如Parquet）格式。这两种不同的方式都有各自的构建器（builder），调用方法也非常简单，可以直接调用StreamingFileSink的静态方法"}, :properties {:color "yellow"}} {:id #uuid "624d5a84-e517-4adc-82bd-457353787338", :page 110, :position {:bounding {:x1 -0.00978851318359375, :y1 -0.009063720703125, :x2 799.9957885742188, :y2 242.43255615234375, :width 800, :height 1113.937513848881}, :rects ({:x1 520.1137084960938, :y1 -0.009063720703125, :x2 799.9957885742188, :y2 144.69406127929688, :width 800, :height 1113.937513848881} {:x1 485.984375, :y1 121.91281127929688, :x2 518.8026123046875, :y2 141.91281127929688, :width 800, :height 1113.937513848881} {:x1 -0.00978851318359375, :y1 145.30755615234375, :x2 799.9874877929688, :y2 169.87005615234375, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 170.47943115234375, :x2 799.991943359375, :y2 194.94818115234375, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 195.56808471679688, :x2 799.9818725585938, :y2 220.036865234375, :width 800, :height 1113.937513848881} {:x1 75.3202133178711, :y1 222.43255615234375, :x2 401.4337387084961, :y2 242.43255615234375, :width 800, :height 1113.937513848881}), :page 110}, :content {:text "Flink官方为Kafka提供了Source和Sink的连接器，我们可以用它方便地从Kafka读写数据。如果仅仅是支持读写，那还说明不了Kafka和Flink关系的亲密；真正让它们密不可分的是，Flink与Kafka的连接器提供了端到端的精确一次（exactlyonce）语义保证，这在实际项目中是最高级别的一致性保证。关于这部分内容，我们会在后续章节做更详细的讲解"}, :properties {:color "yellow"}} {:id #uuid "624d5dd4-ef84-4514-a23e-b3ffdff8cac0", :page 111, :position {:bounding {:x1 -0.009467989206314087, :y1 616.7450561523438, :x2 800.0007934570312, :y2 712.0731811523438, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29585266113281, :y1 616.7450561523438, :x2 799.9992065429688, :y2 636.7450561523438, :width 800, :height 1113.937513848881} {:x1 -0.009467989206314087, :y1 640.036865234375, :x2 800.0007934570312, :y2 664.505615234375, :width 800, :height 1113.937513848881} {:x1 -0.009462624788284302, :y1 665.1200561523438, :x2 799.9901733398438, :y2 689.6825561523438, :width 800, :height 1113.937513848881} {:x1 96.26974487304688, :y1 692.0731811523438, :x2 422.3832702636719, :y2 712.0731811523438, :width 800, :height 1113.937513848881}), :page 111}, :content {:text "Flink没有直接提供官方的Redis连接器，不过Bahir项目还是担任了合格的辅助角色，为我们提供了Flink-Redis的连接工具。但版本升级略显滞后，目前连接器版本为1.0，支持的Scala版本最新到2.11。由于我们的测试不涉及到Scala的相关版本变化，所以并不影响使用。在实际项目应用中，应该以匹配的组件版本运行"}, :properties {:color "yellow"}} {:id #uuid "624d64b8-ea6f-4870-a0b3-edacc8bbdc83", :page 113, :position {:bounding {:x1 -0.015334829688072205, :y1 399.7298278808594, :x2 800.006591796875, :y2 534.5575561523438, :width 800, :height 1113.937513848881}, :rects ({:x1 213.81507873535156, :y1 399.7298278808594, :x2 800.006591796875, :y2 434.0423278808594, :width 800, :height 1113.937513848881} {:x1 127.29486083984375, :y1 411.2610778808594, :x2 211.8882293701172, :y2 431.2610778808594, :width 800, :height 1113.937513848881} {:x1 640.25, :y1 411.2610778808594, :x2 724.6717529296875, :y2 431.2610778808594, :width 800, :height 1113.937513848881} {:x1 -0.009463220834732056, :y1 434.6513366699219, :x2 800.0010375976562, :y2 459.2138366699219, :width 800, :height 1113.937513848881} {:x1 -0.00946451723575592, :y1 459.8232116699219, :x2 799.9822957366705, :y2 484.2919616699219, :width 800, :height 1113.937513848881} {:x1 -0.015334829688072205, :y1 484.9118347167969, :x2 799.9931030273438, :y2 509.3805847167969, :width 800, :height 1113.937513848881} {:x1 -0.009464949369430542, :y1 509.9950866699219, :x2 180.87240600585938, :y2 534.5575561523438, :width 800, :height 1113.937513848881}), :page 113}, :content {:text "ElasticSearch是一个分布式的开源搜索和分析引擎，适用于所有类型的数据。ElasticSearch有着简洁的REST风格的API，以良好的分布式特性、速度和可扩展性而闻名，在大数据领域应用非常广泛。Flink为ElasticSearch专门提供了官方的Sink 连接器，Flink1.13支持当前最新版本的ElasticSearch"}, :properties {:color "yellow"}} {:id #uuid "624d64f5-9a95-43e3-80a3-e8dec01baee7", :page 116, :position {:bounding {:x1 -0.009789779782295227, :y1 165.69859313964844, :x2 799.9995513558388, :y2 275.3388366699219, :width 800, :height 1113.937513848881}, :rects ({:x1 465.8512878417969, :y1 165.69859313964844, :x2 799.9835815429688, :y2 200.01109313964844, :width 800, :height 1113.937513848881} {:x1 106.37696838378906, :y1 177.22984313964844, :x2 463.4549102783203, :y2 197.22984313964844, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 200.6200714111328, :x2 799.9840087890625, :y2 225.0888214111328, :width 800, :height 1113.937513848881} {:x1 -0.009787023067474365, :y1 225.69308471679688, :x2 799.9995513558388, :y2 250.16183471679688, :width 800, :height 1113.937513848881} {:x1 -0.009789779782295227, :y1 250.7763214111328, :x2 638.8895874023438, :y2 275.3388366699219, :width 800, :height 1113.937513848881}), :page 116}, :content {:text "关系型数据库有着非常好的结构化数据设计、方便的SQL查询，是很多企业中业务数据存储的主要形式。MySQL就是其中的典型代表。尽管在大数据处理中直接与MySQL交互的场景不多，但最终处理的计算结果是要给外部应用消费使用的，而外部应用读取的数据存储往往就是MySQL。所以我们也需要知道如何将数据输出到MySQL这样的传统数据库"}, :properties {:color "yellow"}} {:id #uuid "624d6516-35c7-44f1-90f2-f292732b462b", :page 118, :position {:bounding {:x1 -0.00978650152683258, :y1 147.0888214111328, :x2 799.9957275390625, :y2 217.25558471679688, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38639068603516, :y1 147.0888214111328, :x2 799.9839477539062, :y2 167.0888214111328, :width 800, :height 1113.937513848881} {:x1 -0.00978650152683258, :y1 170.4794464111328, :x2 799.9957275390625, :y2 194.94818115234375, :width 800, :height 1113.937513848881} {:x1 75.31902313232422, :y1 197.25558471679688, :x2 121.75395202636719, :y2 217.25558471679688, :width 800, :height 1113.937513848881}), :page 118}, :content {:text "与Source类似，Flink为我们提供了通用的SinkFunction接口和对应的RichSinkDunction抽象类，只要实现它，通过简单地调用DataStream的.addSink()方法就可以自定义写入任何外部存储"}, :properties {:color "yellow"}} {:id #uuid "624d6528-9cff-4418-bfb0-3644bff5f1a3", :page 118, :position {:bounding {:x1 75.31798553466797, :y1 272.5837097167969, :x2 799.995849609375, :y2 317.7607116699219, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38720703125, :y1 272.5837097167969, :x2 799.995849609375, :y2 292.5837097167969, :width 800, :height 1113.937513848881} {:x1 75.31798553466797, :y1 297.7607116699219, :x2 323.7907028198242, :y2 317.7607116699219, :width 800, :height 1113.937513848881}), :page 118}, :content {:text "在实现SinkFunction的时候，需要重写的一个关键方法invoke()，在这个方法中我们就可以实现将流里的数据发送出去的逻辑"}, :properties {:color "yellow"}} {:id #uuid "624d73cd-f0f4-4503-8c5b-a249320e88a2", :page 120, :position {:bounding {:x1 -0.009787902235984802, :y1 627.1887817382812, :x2 799.9993676245213, :y2 716.6731567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 106.3875732421875, :y1 627.1887817382812, :x2 704.0524291992188, :y2 647.1887817382812, :width 800, :height 1113.937513848881} {:x1 -0.009787648916244507, :y1 649.5274047851562, :x2 799.9993676245213, :y2 672.0430297851562, :width 800, :height 1113.937513848881} {:x1 -0.009787902235984802, :y1 672.6575317382812, :x2 799.9842529296875, :y2 695.2512817382812, :width 800, :height 1113.937513848881} {:x1 75.31381225585938, :y1 696.6731567382812, :x2 168.622802734375, :y2 716.6731567382812, :width 800, :height 1113.937513848881}), :page 120}, :content {:text "在流数据处理应用中，一个很重要、也很常见的操作就是窗口计算。所谓的“窗口”，一般就是划定的一段时间范围，也就是“时间窗”；对在这范围内的数据进行处理，就是所谓的窗口计算。所以窗口和时间往往是分不开的。接下来我们就深入了解一下Flink中的时间语义和窗口的应用"}, :properties {:color "yellow"}} {:id #uuid "624d73e6-ad9f-4d11-bcb7-dec87e9b12b7", :page 121, :position {:bounding {:x1 129, :y1 641, :x2 674, :y2 917, :width 800, :height 1113.937513848881}, :rects (), :page 121}, :content {:text "[:span]", :image 1649243110616}, :properties {:color "yellow"}} {:id #uuid "624d7450-47f1-4794-b90b-7a420f938162", :page 121, :position {:bounding {:x1 -0.009463533759117126, :y1 922.7723999023438, :x2 799.9932861328125, :y2 993.6241455078125, :width 800, :height 1113.937513848881}, :rects ({:x1 437.9987487792969, :y1 922.7723999023438, :x2 799.9922485351562, :y2 949.1473999023438, :width 800, :height 1113.937513848881} {:x1 405.23675537109375, :y1 927.3505249023438, :x2 461.984375, :y2 947.3505249023438, :width 800, :height 1113.937513848881} {:x1 -0.009463533759117126, :y1 949.7669067382812, :x2 799.9932861328125, :y2 972.2825317382812, :width 800, :height 1113.937513848881} {:x1 96.28030395507812, :y1 973.6241455078125, :x2 531.0861206054688, :y2 993.6241455078125, :width 800, :height 1113.937513848881}), :page 121}, :content {:text "如图6-1所示，在事件发生之后，生成的数据被收集起来，首先进入分布式消息队列，然后被Flink系统中的Source算子读取消费，进而向下游的转换算子（窗口算子）传递，最终由窗口算子进行计算处理"}, :properties {:color "yellow"}} {:id #uuid "624d747f-09b4-467a-9960-0f4471a71d76", :page 122, :position {:bounding {:x1 106.37866973876953, :y1 246.87921142578125, :x2 556.6193923950195, :y2 266.87921142578125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.37866973876953, :y1 246.87921142578125, :x2 556.6193923950195, :y2 266.87921142578125, :width 800, :height 1113.937513848881}), :page 122}, :content {:text "处理时间的概念非常简单，就是指执行处理操作的机器的系统时间"}, :properties {:color "yellow"}} {:id #uuid "624d7486-7d16-4c11-8bf5-36eec0a20ca0", :page 122, :position {:bounding {:x1 106.38426971435547, :y1 490.67608642578125, :x2 634.2654342651367, :y2 510.67608642578125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38426971435547, :y1 490.67608642578125, :x2 634.2654342651367, :y2 510.67608642578125, :width 800, :height 1113.937513848881}), :page 122}, :content {:text "事件时间，是指每个事件在对应的设备上发生的时间，也就是数据生成的时间"}, :properties {:color "yellow"}} {:id #uuid "624d752b-f7b6-40ec-956c-57fe3a40198c", :page 123, :position {:bounding {:x1 -0.009466663002967834, :y1 946.6731567382812, :x2 724.7639617919922, :y2 994.8167724609375, :width 800, :height 1113.937513848881}, :rects ({:x1 157.9178924560547, :y1 946.6731567382812, :x2 724.7639617919922, :y2 966.6731567382812, :width 800, :height 1113.937513848881} {:x1 -0.009466663002967834, :y1 969.0823974609375, :x2 285.10357666015625, :y2 994.8167724609375, :width 800, :height 1113.937513848881} {:x1 96.27487182617188, :y1 969.8792724609375, :x2 541.7899169921875, :y2 989.8792724609375, :width 800, :height 1113.937513848881}), :page 123}, :content {:text "在实际应用中，事件时间语义会更为常见。一般情况下，业务日志数据中都会记录数据生成的时间戳（timestamp），它就可以作为事件时间的判断基础"}, :properties {:color "yellow"}} {:id #uuid "624d758e-ebea-4e88-9757-486fc6217c9f", :page 124, :position {:bounding {:x1 75.31956481933594, :y1 467.09503173828125, :x2 800.0042724609375, :y2 510.31378173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 136.70692443847656, :y1 467.09503173828125, :x2 800.0042724609375, :y2 487.09503173828125, :width 800, :height 1113.937513848881} {:x1 75.31956481933594, :y1 490.31378173828125, :x2 603.2007293701172, :y2 510.31378173828125, :width 800, :height 1113.937513848881}), :page 124}, :content {:text "事件时间语义是以一定延迟为代价，换来了处理结果的正确性。由于网络延迟一般只有毫秒级，所以即使是事件时间语义，同样可以完成低延迟实时流处理的任务"}, :properties {:color "yellow"}} {:id #uuid "624d75b1-badc-4aaf-8841-2cf3c0567484", :page 124, :position {:bounding {:x1 -0.009790614247322083, :y1 513.5325317382812, :x2 799.998779296875, :y2 718.9961547851562, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38673400878906, :y1 513.5325317382812, :x2 799.985107421875, :y2 536.1262817382812, :width 800, :height 1113.937513848881} {:x1 -0.009790614247322083, :y1 535.9544067382812, :x2 799.9912719726562, :y2 558.4856567382812, :width 800, :height 1113.937513848881} {:x1 -0.009784668684005737, :y1 559.1063842773438, :x2 799.983642578125, :y2 581.6376342773438, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 582.2512817382812, :x2 799.9833984375, :y2 604.8450317382812, :width 800, :height 1113.937513848881} {:x1 -0.009786859154701233, :y1 605.4700317382812, :x2 799.998779296875, :y2 628.0637817382812, :width 800, :height 1113.937513848881} {:x1 -0.009785711765289307, :y1 628.7044067382812, :x2 799.9823407530785, :y2 651.2981567382812, :width 800, :height 1113.937513848881} {:x1 -0.00423431396484375, :y1 651.9231567382812, :x2 799.9972381591797, :y2 674.5169067382812, :width 800, :height 1113.937513848881} {:x1 -0.009788021445274353, :y1 675.1419067382812, :x2 799.9768676757812, :y2 697.6575317382812, :width 800, :height 1113.937513848881} {:x1 75.3167724609375, :y1 698.9961547851562, :x2 106.52304077148438, :y2 718.9961547851562, :width 800, :height 1113.937513848881}), :page 124}, :content {:text "另外，除了事件时间和处理时间，Flink还有一个“摄入时间”（Ingestion Time）的概念，它是指数据进入Flink数据流的时间，也就是Source算子读入数据的时间。摄入时间相当于是事件时间和处理时间的一个中和，它是把Source任务的处理时间，当作了数据的产生时间添加到数据里。这样一来，水位线（watermark）也就基于这个时间直接生成，不需要单独指定了。这种时间语义可以保证比较好的正确性，同时又不会引入太大的延迟。它的具体行为跟事件时间非常像，可以当作特殊的事件时间来处理。在Flink中，由于处理时间比较简单，早期版本默认的时间语义是处理时间；而考虑到事件时间在实际应用中更为广泛，从1.12版本开始，Flink已经将事件时间作为了默认的时间语义。"}, :properties {:color "yellow"}} {:id #uuid "624d75ec-cd06-4784-a920-40e3e39611d1", :page 126, :position {:bounding {:x1 71, :y1 304, :x2 704, :y2 592, :width 800, :height 1113.937513848881}, :rects (), :page 126}, :content {:text "[:span]", :image 1649243628159}, :properties {:color "yellow"}} {:id #uuid "624d7695-7a05-4437-9d37-e5daced9ea8d", :page 127, :position {:bounding {:x1 -0.015336096286773682, :y1 211.95440673828125, :x2 799.9890747070312, :y2 394.37628173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29544830322266, :y1 211.95440673828125, :x2 724.9603652954102, :y2 231.95440673828125, :width 800, :height 1113.937513848881} {:x1 -0.009462714195251465, :y1 234.39190673828125, :x2 799.984494805336, :y2 256.98565673828125, :width 800, :height 1113.937513848881} {:x1 -0.00946684181690216, :y1 257.61065673828125, :x2 799.9843686074018, :y2 280.12628173828125, :width 800, :height 1113.937513848881} {:x1 -0.009467273950576782, :y1 280.7461853027344, :x2 799.9817504882812, :y2 303.2618103027344, :width 800, :height 1113.937513848881} {:x1 -0.00946912169456482, :y1 303.87628173828125, :x2 799.9832153320312, :y2 326.50128173828125, :width 800, :height 1113.937513848881} {:x1 -0.015336096286773682, :y1 327.1197509765625, :x2 799.9890747070312, :y2 349.7447509765625, :width 800, :height 1113.937513848881} {:x1 -0.00946684181690216, :y1 350.36065673828125, :x2 799.9843686074018, :y2 372.95440673828125, :width 800, :height 1113.937513848881} {:x1 96.27604675292969, :y1 374.37628173828125, :x2 670.7214813232422, :y2 394.37628173828125, :width 800, :height 1113.937513848881}), :page 127}, :content {:text "所以我们应该把时钟也以数据的形式传递出去，告诉下游任务当前时间的进展；而且这个时钟的传递不会因为窗口聚合之类的运算而停滞。一种简单的想法是，在数据流中加入一个时钟标记，记录当前的事件时间；这个标记可以直接广播到下游，当下游任务收到这个标记，就可以更新自己的时钟了。由于类似于水流中用来做标志的记号，在Flink中，这种用来衡量事件时间（Event Time）进展的标记，就被称作“水位线”（Watermark）。具体实现上，水位线可以看作一条特殊的数据记录，它是插入到数据流中的一个标记点，主要内容就是一个时间戳，用来指示当前的事件时间。而它插入流中的位置，就应该是在某个数据到来之后；这样就可以从这个数据中提取时间戳，作为当前水位线的时间戳了。"}, :properties {:color "yellow"}} {:id #uuid "624d76a2-30ff-4449-ad1a-d17f74994e5f", :page 127, :position {:bounding {:x1 128, :y1 427, :x2 634, :y2 591, :width 800, :height 1113.937513848881}, :rects (), :page 127}, :content {:text "[:span]", :image 1649243810153}, :properties {:color "yellow"}} {:id #uuid "624d771d-b069-49ce-a5b8-daefa46b3118", :page 127, :position {:bounding {:x1 -0.009464815258979797, :y1 819.7593383789062, :x2 800.0010942667723, :y2 909.2356567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29541778564453, :y1 819.7593383789062, :x2 724.9602127075195, :y2 839.7593383789062, :width 800, :height 1113.937513848881} {:x1 -0.009462714195251465, :y1 842.0742797851562, :x2 799.984494805336, :y2 864.5899047851562, :width 800, :height 1113.937513848881} {:x1 -0.009464815258979797, :y1 865.2200317382812, :x2 800.0010942667723, :y2 887.8137817382812, :width 800, :height 1113.937513848881} {:x1 96.26719665527344, :y1 889.2356567382812, :x2 111.87033081054688, :y2 909.2356567382812, :width 800, :height 1113.937513848881}), :page 127}, :content {:text "在理想状态下，数据应该按照它们生成的先后顺序、排好队进入流中；也就是说，它们处理的过程会保持原先的顺序不变，遵守先来后到的原则。这样的话我们从每个数据中提取时间戳，就可以保证总是从小到大增长的，从而插入的水位线也会不断增长、事件时钟不断向前推进"}, :properties {:color "yellow"}} {:id #uuid "624d7723-e7a3-4d42-a428-0e0506554434", :page 127, :position {:bounding {:x1 -0.00946807861328125, :y1 912.4544067382812, :x2 799.9964556694031, :y2 1028.811767578125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29290008544922, :y1 912.4544067382812, :x2 724.8016891479492, :y2 932.4544067382812, :width 800, :height 1113.937513848881} {:x1 -0.009464740753173828, :y1 934.8762817382812, :x2 799.9964556694031, :y2 957.4700317382812, :width 800, :height 1113.937513848881} {:x1 -0.00946684181690216, :y1 958.0980224609375, :x2 799.9843686074018, :y2 980.6136474609375, :width 800, :height 1113.937513848881} {:x1 -0.009463459253311157, :y1 981.2305297851562, :x2 799.9831237792969, :y2 1003.7774047851562, :width 800, :height 1113.937513848881} {:x1 -0.00946807861328125, :y1 1004.3742065429688, :x2 633.2125473022461, :y2 1028.811767578125, :width 800, :height 1113.937513848881}), :page 127}, :content {:text "实际应用中，如果当前数据量非常大，可能会有很多数据的时间戳是相同的，这时每来一条数据就提取时间戳、插入水位线就做了大量的无用功。而且即使时间戳不同，同时涌来的数据时间差会非常小（比如几毫秒），往往对处理计算也没什么影响。所以为了提高效率，一般会每隔一段时间生成一个水位线，这个水位线的时间戳，就是当前最新数据的时间戳，如图6-6所示。所以这时的水位线，其实就是有序流中的一个周期性出现的时间标记"}, :properties {:color "yellow"}} {:id #uuid "624d7738-58d0-4497-8523-1da0b5853af2", :page 128, :position {:bounding {:x1 77, :y1 118, :x2 661, :y2 256, :width 800, :height 1113.937513848881}, :rects (), :page 128}, :content {:text "[:span]", :image 1649243960966}, :properties {:color "yellow"}} {:id #uuid "624d7741-e155-4d0c-90e5-af1da5cdbef8", :page 128, :position {:bounding {:x1 -0.009790405631065369, :y1 263.19427490234375, :x2 799.9978637695312, :y2 381.37628173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38758850097656, :y1 263.19427490234375, :x2 704.0525054931641, :y2 283.19427490234375, :width 800, :height 1113.937513848881} {:x1 -0.009786337614059448, :y1 285.5274353027344, :x2 799.9978637695312, :y2 308.0430603027344, :width 800, :height 1113.937513848881} {:x1 -0.009790405631065369, :y1 308.65753173828125, :x2 799.97607421875, :y2 331.28253173828125, :width 800, :height 1113.937513848881} {:x1 -0.00978882610797882, :y1 331.9010009765625, :x2 799.9913330078125, :y2 354.5260009765625, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 355.14190673828125, :x2 106.53868289291859, :y2 381.37628173828125, :width 800, :height 1113.937513848881} {:x1 106.5599365234375, :y1 355.93878173828125, :x2 394.07989501953125, :y2 375.93878173828125, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "这里需要注意的是，水位线插入的“周期”，本身也是一个时间概念。在当前事件时间语义下，假如我们设定了每隔100ms生成一次水位线，那就是要等事件时钟推进100ms才能插入；但是事件时钟本身的进展，本身就是靠水位线来表示的——现在要插入一个水位线，可前提又是水位线要向前推进100ms，这就陷入了死循环。所以对于水位线的周期性生成，周期时间是指处理时间（系统时间），而不是事件时间"}, :properties {:color "yellow"}} {:id #uuid "624d7763-2dbe-4064-9d3f-61293225b7ea", :page 128, :position {:bounding {:x1 -0.00978812575340271, :y1 414.08233642578125, :x2 799.9980854094028, :y2 480.53253173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38758850097656, :y1 414.08233642578125, :x2 704.0525054931641, :y2 434.08233642578125, :width 800, :height 1113.937513848881} {:x1 -0.00978812575340271, :y1 436.51690673828125, :x2 799.9980854094028, :y2 459.11065673828125, :width 800, :height 1113.937513848881} {:x1 75.31901550292969, :y1 460.53253173828125, :x2 393.9873504638672, :y2 480.53253173828125, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "有序流的处理非常简单，看起来水位线也并没有起到太大的作用。但这种情况只存在于理想状态下。我们知道在分布式系统中，数据在节点间传输，会因为网络传输延迟的不确定性，导致顺序发生改变，这就是所谓的“乱序数据”"}, :properties {:color "yellow"}} {:id #uuid "624d776b-b031-46fa-b4ec-7b3718ac549e", :page 128, :position {:bounding {:x1 -0.009786754846572876, :y1 483.75128173828125, :x2 799.9911499023438, :y2 573.2677612304688, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38162994384766, :y1 483.75128173828125, :x2 799.9868774414062, :y2 506.34503173828125, :width 800, :height 1113.937513848881} {:x1 -0.009786754846572876, :y1 506.17315673828125, :x2 799.9911499023438, :y2 528.6887817382812, :width 800, :height 1113.937513848881} {:x1 -0.009784668684005737, :y1 529.3086547851562, :x2 799.98193359375, :y2 551.8399047851562, :width 800, :height 1113.937513848881} {:x1 75.32462310791016, :y1 553.2677612304688, :x2 587.6203384399414, :y2 573.2677612304688, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "这里所说的“乱序”（out-of-order），是指数据的先后顺序不一致，主要就是基于数据的产生时间而言的。如图6-7所示，一个7秒时产生的数据，生成时间自然要比9秒的数据早；但是经过数据缓存和传输之后，处理任务可能先收到了9秒的数据，之后7秒的数据才姗姗来迟。这时如果我们希望插入水位线，来指示当前的事件时间进展，又该怎么做呢"}, :properties {:color "yellow"}} {:id #uuid "624d777a-befd-4f11-b81c-1c6020008671", :page 128, :position {:bounding {:x1 84, :y1 596, :x2 592, :y2 699, :width 800, :height 1113.937513848881}, :rects (), :page 128}, :content {:text "[:span]", :image 1649244026504}, :properties {:color "yellow"}} {:id #uuid "624d77a5-9d73-4204-800c-2ef0cbb3b99f", :page 128, :position {:bounding {:x1 -0.009789824485778809, :y1 708.9130249023438, :x2 799.9993676245213, :y2 798.4427490234375, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38758850097656, :y1 708.9130249023438, :x2 704.0525054931641, :y2 728.9130249023438, :width 800, :height 1113.937513848881} {:x1 -0.009787648916244507, :y1 731.3294067382812, :x2 799.9993676245213, :y2 753.9231567382812, :width 800, :height 1113.937513848881} {:x1 -0.009789824485778809, :y1 754.5637817382812, :x2 799.9841918945312, :y2 777.0950317382812, :width 800, :height 1113.937513848881} {:x1 75.32777404785156, :y1 778.4427490234375, :x2 370.42066955566406, :y2 798.4427490234375, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "最直观的想法自然是跟之前一样，我们还是靠数据来驱动，每来一个数据就提取它的时间戳、插入一个水位线。不过现在的情况是数据乱序，所以有可能新的时间戳比之前的还小，如果直接将这个时间的水位线再插入，我们的“时钟”就回退了——水位线就代表了时钟，时光不能倒流，所以水位线的时间戳也不能减小"}, :properties {:color "yellow"}} {:id #uuid "624d77ac-653e-4ebd-9da0-657b6aac48dc", :page 128, :position {:bounding {:x1 -0.009790048003196716, :y1 801.6575317382812, :x2 799.9869995117188, :y2 868.1106567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38494873046875, :y1 801.6575317382812, :x2 703.862548828125, :y2 821.6575317382812, :width 800, :height 1113.937513848881} {:x1 -0.009790048003196716, :y1 824.0950317382812, :x2 799.9869995117188, :y2 846.6887817382812, :width 800, :height 1113.937513848881} {:x1 75.32777404785156, :y1 848.1106567382812, :x2 292.7638244628906, :y2 868.1106567382812, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "解决思路也很简单：我们插入新的水位线时，要先判断一下时间戳是否比之前的大，否则就不再生成新的水位线，如图6-8所示。也就是说，只有数据的时间戳比当前时钟大，才能推动时钟前进，这时才插入水位线"}, :properties {:color "yellow"}} {:id #uuid "624d77bc-da3e-4c0b-86ca-86db87ff8a47", :page 128, :position {:bounding {:x1 82, :y1 886, :x2 676, :y2 1012, :width 800, :height 1113.937513848881}, :rects (), :page 128}, :content {:text "[:span]", :image 1649244092583}, :properties {:color "yellow"}} {:id #uuid "624d77cc-d526-4354-b5e1-0f4692ad5161", :page 129, :position {:bounding {:x1 -0.009462714195251465, :y1 145.66302490234375, :x2 799.984494805336, :y2 211.92315673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29541778564453, :y1 145.66302490234375, :x2 724.9602127075195, :y2 165.66302490234375, :width 800, :height 1113.937513848881} {:x1 -0.009462714195251465, :y1 167.99615478515625, :x2 799.984494805336, :y2 190.51177978515625, :width 800, :height 1113.937513848881} {:x1 96.26748657226562, :y1 191.92315673828125, :x2 158.50839233398438, :y2 211.92315673828125, :width 800, :height 1113.937513848881}), :page 129}, :content {:text "如果考虑到大量数据同时到来的处理效率，我们同样可以周期性地生成水位线。这时只需要保存一下之前所有数据中的最大时间戳，需要插入水位线时，就直接以它作为时间戳生成新的水位线"}, :properties {:color "yellow"}} {:id #uuid "624d77d7-9e4b-4fa3-a20c-7f54cfa2dab3", :page 129, :position {:bounding {:x1 106, :y1 229, :x2 652, :y2 336, :width 800, :height 1113.937513848881}, :rects (), :page 129}, :content {:text "[:span]", :image 1649244119120}, :properties {:color "yellow"}} {:id #uuid "624d782d-730c-4fed-98dc-de769f768588", :page 129, :position {:bounding {:x1 88.45015716552734, :y1 347.609619140625, :x2 724.9603652954102, :y2 390.82940673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29544830322266, :y1 347.609619140625, :x2 724.9603652954102, :y2 367.609619140625, :width 800, :height 1113.937513848881} {:x1 88.45015716552734, :y1 370.82940673828125, :x2 197.09117126464844, :y2 390.82940673828125, :width 800, :height 1113.937513848881}), :page 129}, :content {:text "这样做尽管可以定义出一个事件时钟，却也会带来一个非常大的问题：我们无法正确处理“迟到”的数据"}, :properties {:color "yellow"}} {:id #uuid "624d787c-4f01-4921-b832-fa8862411c02", :page 129, :position {:bounding {:x1 -0.00946912169456482, :y1 834.6524047851562, :x2 799.9905395507812, :y2 947.5169067382812, :width 800, :height 1113.937513848881}, :rects ({:x1 127.2840576171875, :y1 834.6524047851562, :x2 799.9784545898438, :y2 854.6524047851562, :width 800, :height 1113.937513848881} {:x1 -0.009463220834732056, :y1 857.0637817382812, :x2 799.9887084960938, :y2 879.6575317382812, :width 800, :height 1113.937513848881} {:x1 -0.00946912169456482, :y1 880.2825317382812, :x2 799.9901123046875, :y2 902.8762817382812, :width 800, :height 1113.937513848881} {:x1 -0.009467840194702148, :y1 903.5012817382812, :x2 799.9905395507812, :y2 926.0950317382812, :width 800, :height 1113.937513848881} {:x1 96.2772445678711, :y1 927.5169067382812, :x2 267.09395599365234, :y2 947.5169067382812, :width 800, :height 1113.937513848881}), :page 129}, :content {:text "回到上面的例子，为了让窗口能够正确收集到迟到的数据，我们也可以等上2秒；也就是用当前已有数据的最大时间戳减去2秒，就是要插入的水位线的时间戳，如图6-10所示。这样的话，9秒的数据到来之后，事件时钟不会直接推进到9秒，而是进展到了7秒；必须等到11秒的数据到来之后，事件时钟才会进展到9秒，这时迟到数据也都已收集齐，0~9秒的窗口就可以正确计算结果了"}, :properties {:color "yellow"}} {:id #uuid "624d78a9-8735-4d43-bf6d-346f4ee6a988", :page 130, :position {:bounding {:x1 80, :y1 138, :x2 593, :y2 253, :width 800, :height 1113.937513848881}, :rects (), :page 130}, :content {:text "[:span]", :image 1649244329103}, :properties {:color "yellow"}} {:id #uuid "624d79e6-9e65-4aa9-9803-f604b7d61f5f", :page 131, :position {:bounding {:x1 96.2743911743164, :y1 269.75128173828125, :x2 799.9932556152344, :y2 312.97003173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.28852081298828, :y1 269.75128173828125, :x2 799.9932556152344, :y2 289.75128173828125, :width 800, :height 1113.937513848881} {:x1 96.2743911743164, :y1 292.97003173828125, :x2 236.02368927001953, :y2 312.97003173828125, :width 800, :height 1113.937513848881}), :page 131}, :content {:text "水位线是Flink流处理中保证结果正确性的核心机制，它往往会跟窗口一起配合，完成对乱序数据的正确处理"}, :properties {:color "yellow"}} {:id #uuid "624d7ad7-aa62-4e31-8123-cdaa8f544abf", :page 132, :position {:bounding {:x1 -0.009786650538444519, :y1 223.83746337890625, :x2 800.0018920898438, :y2 290.11065673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38639068603516, :y1 223.83746337890625, :x2 799.9832153320312, :y2 243.83746337890625, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 246.16802978515625, :x2 800.0018920898438, :y2 268.6836853027344, :width 800, :height 1113.937513848881} {:x1 75.31745147705078, :y1 270.11065673828125, :x2 184.0732879638672, :y2 290.11065673828125, :width 800, :height 1113.937513848881}), :page 132}, :content {:text "在Flink的DataStream  API中 ， 有 一 个 单 独 用 于 生 成 水 位 线 的 方法：.assignTimestampsAndWatermarks()，它主要用来为流中的数据分配时间戳，并生成水位线来指示事件时间"}, :properties {:color "yellow"}} {:id #uuid "624d86d4-800d-4c72-a550-e218a8fbf472", :page 139, :position {:bounding {:x1 96.27236938476562, :y1 327.9478759765625, :x2 724.9746704101562, :y2 371.15753173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 664.1770629882812, :y1 327.9478759765625, :x2 724.9746704101562, :y2 347.9478759765625, :width 800, :height 1113.937513848881} {:x1 96.27236938476562, :y1 351.15753173828125, :x2 686.2086486816406, :y2 371.15753173828125, :width 800, :height 1113.937513848881}), :page 139}, :content {:text "所有的上游并行任务就像围成木桶的一块块木板，它们中最短的那一块，决定了我们桶中的水位"}, :properties {:color "yellow"}} {:id #uuid "624d86e2-4ec4-4138-8b0e-76f997bd0677", :page 139, :position {:bounding {:x1 120, :y1 383, :x2 687, :y2 681, :width 800, :height 1113.937513848881}, :rects (), :page 139}, :content {:text "[:span]", :image 1649247970080}, :properties {:color "yellow"}} {:id #uuid "624d8926-4f07-4842-bef4-85a8e3e77edb", :page 141, :position {:bounding {:x1 -0.009467989206314087, :y1 572.7581787109375, :x2 800.0011596679688, :y2 651.1106567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 163.1201171875, :y1 572.7581787109375, :x2 800.0011596679688, :y2 604.6800537109375, :width 800, :height 1113.937513848881} {:x1 127.29585266113281, :y1 582.8831787109375, :x2 160.11410522460938, :y2 602.8831787109375, :width 800, :height 1113.937513848881} {:x1 -0.009467124938964844, :y1 605.2981567382812, :x2 799.9962768554688, :y2 627.8919067382812, :width 800, :height 1113.937513848881} {:x1 -0.009467989206314087, :y1 628.5169067382812, :x2 294.6840515136719, :y2 651.1106567382812, :width 800, :height 1113.937513848881}), :page 141}, :content {:text "Flink是一种流式计算引擎，主要是来处理无界数据流的，数据源源不断、无穷无尽。想要更加方便高效地处理无界流，一种方式就是将无限数据切割成有限的“数据块”进行处理，这就是所谓的“窗口”（Window）"}, :properties {:color "yellow"}} {:id #uuid "624d893e-c501-4b9b-9519-f8305ac76d58", :page 142, :position {:bounding {:x1 -0.009786650538444519, :y1 622.2305297851562, :x2 800.0013885498047, :y2 711.8919067382812, :width 800, :height 1113.937513848881}, :rects ({:x1 137.46348571777344, :y1 622.2305297851562, :x2 800.0013885498047, :y2 642.2305297851562, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 644.6575317382812, :x2 799.9866333007812, :y2 667.2512817382812, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 667.8762817382812, :x2 799.9896240234375, :y2 690.4700317382812, :width 800, :height 1113.937513848881} {:x1 75.31390380859375, :y1 691.8919067382812, :x2 432.46337890625, :y2 711.8919067382812, :width 800, :height 1113.937513848881}), :page 142}, :content {:text "在Flink中，窗口其实并不是一个“框”，流进来的数据被框住了就只能进这一个窗口。相比之下，我们应该把窗口理解成一个“桶”，如图6-15所示。在Flink中，窗口可以把流切割成有限大小的多个“存储桶”（bucket)；每个数据都会分发到对应的桶中，当到达窗口结束时间时，就对每个桶中收集的数据进行计算处理"}, :properties {:color "yellow"}} {:id #uuid "624d894c-f5c6-4dff-abe0-11347e5de48f", :page 142, :position {:bounding {:x1 80, :y1 737, :x2 682, :y2 1025, :width 800, :height 1113.937513848881}, :rects (), :page 142}, :content {:text "[:span]", :image 1649248588599}, :properties {:color "yellow"}} {:id #uuid "624d8963-e525-484a-b9ce-8b2ca2d13bfc", :page 143, :position {:bounding {:x1 91, :y1 115, :x2 727, :y2 512, :width 800, :height 1113.937513848881}, :rects (), :page 143}, :content {:text "[:span]", :image 1649248611224}, :properties {:color "yellow"}} {:id #uuid "624d89c3-e8b3-42bf-9d43-f3303f46201d", :page 144, :position {:bounding {:x1 137.74374389648438, :y1 -0.0063323974609375, :x2 324.8125, :y2 140.97802734375, :width 800, :height 1113.937513848881}, :rects ({:x1 215.75, :y1 -0.0063323974609375, :x2 309.2570495605469, :y2 140.97802734375, :width 800, :height 1113.937513848881} {:x1 137.74374389648438, :y1 119.25927734375, :x2 324.8125, :y2 139.25927734375, :width 800, :height 1113.937513848881}), :page 144}, :content {:text "时间窗口（Time Window）"}, :properties {:color "yellow"}} {:id #uuid "624d89cc-a708-4f42-bf79-ba086afc0fd4", :page 144, :position {:bounding {:x1 137.74374389648438, :y1 771.8853759765625, :x2 331.90625, :y2 794.5103759765625, :width 800, :height 1113.937513848881}, :rects ({:x1 137.74374389648438, :y1 771.8853759765625, :x2 331.90625, :y2 794.5103759765625, :width 800, :height 1113.937513848881}), :page 144}, :content {:text "计数窗口（Count Window）"}, :properties {:color "yellow"}} {:id #uuid "624d89d5-8af4-47f9-b226-54dfaaef6ba3", :page 145, :position {:bounding {:x1 158.66561889648438, :y1 211.95440673828125, :x2 381.71875, :y2 234.54815673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 211.95440673828125, :x2 381.71875, :y2 234.54815673828125, :width 800, :height 1113.937513848881}), :page 145}, :content {:text "滚动窗口（Tumbling Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d89dd-a838-46bd-992e-cf0c2c902035", :page 145, :position {:bounding {:x1 158.66561889648438, :y1 866.8919067382812, :x2 363.984375, :y2 889.4075317382812, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 866.8919067382812, :x2 363.984375, :y2 889.4075317382812, :width 800, :height 1113.937513848881}), :page 145}, :content {:text "滑动窗口（Sliding Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d89e8-74c3-4733-a361-05b2faf363de", :page 146, :position {:bounding {:x1 137.74374389648438, :y1 855.2044067382812, :x2 344.84375, :y2 877.7981567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 137.74374389648438, :y1 855.2044067382812, :x2 344.84375, :y2 877.7981567382812, :width 800, :height 1113.937513848881}), :page 146}, :content {:text "会话窗口（Session Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d89f8-c4ae-4c95-ab8d-d33a24116fda", :page 147, :position {:bounding {:x1 158.66561889648438, :y1 969.8792724609375, :x2 362.21875, :y2 992.5042724609375, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 969.8792724609375, :x2 362.21875, :y2 992.5042724609375, :width 800, :height 1113.937513848881}), :page 147}, :content {:text "全局窗口（Global Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d8cf7-33fa-489f-ba95-0201b2d026ee", :page 148, :position {:bounding {:x1 76, :y1 939, :x2 709, :y2 1025, :width 800, :height 1113.937513848881}, :rects (), :page 148}, :content {:text "[:span]", :image 1649249527680}, :properties {:color "yellow"}} {:id #uuid "624d8d63-06b8-48a1-b56a-f76bc202904f", :page 149, :position {:bounding {:x1 92, :y1 304, :x2 728, :y2 576, :width 800, :height 1113.937513848881}, :rects (), :page 149}, :content {:text "[:span]", :image 1649249635320}, :properties {:color "yellow"}} {:id #uuid "624d8f14-011b-4ccf-8b9d-44563aeca4db", :page 149, :position {:bounding {:x1 148.3755340576172, :y1 592.26806640625, :x2 439.6828918457031, :y2 642.26806640625, :width 800, :height 1113.937513848881}, :rects ({:x1 263.68414306640625, :y1 592.26806640625, :x2 420.5423889160156, :y2 642.26806640625, :width 800, :height 1113.937513848881} {:x1 148.3755340576172, :y1 607.15869140625, :x2 263.55377197265625, :y2 632.15869140625, :width 800, :height 1113.937513848881} {:x1 368.24517822265625, :y1 607.15869140625, :x2 439.6828918457031, :y2 632.15869140625, :width 800, :height 1113.937513848881}), :page 149}, :content {:text "窗口分配器（Window Assigners）"}, :properties {:color "yellow"}} {:id #uuid "624d8f27-39b2-4e3b-8e81-3a82de5de67f", :page 152, :position {:bounding {:x1 127.4810791015625, :y1 427.1102600097656, :x2 399.61676025390625, :y2 488.8133850097656, :width 800, :height 1113.937513848881}, :rects ({:x1 223.52572631835938, :y1 427.1102600097656, :x2 380.39910888671875, :y2 488.8133850097656, :width 800, :height 1113.937513848881} {:x1 127.4810791015625, :y1 453.6102600097656, :x2 223.5139923095703, :y2 478.6102600097656, :width 800, :height 1113.937513848881} {:x1 380.47613525390625, :y1 453.6102600097656, :x2 399.61676025390625, :y2 478.6102600097656, :width 800, :height 1113.937513848881}), :page 152}, :content {:text "窗口函数（Window Functions）"}, :properties {:color "yellow"}} {:id #uuid "624d8f90-7c29-4740-ab8c-e6d989e54422", :page 152, :position {:bounding {:x1 196, :y1 673, :x2 592, :y2 1005, :width 800, :height 1113.937513848881}, :rects (), :page 152}, :content {:text "[:span]", :image 1649250192559}, :properties {:color "yellow"}} {:id #uuid "624d8f9f-0e0d-437d-9d91-2965fb9e9fe1", :page 153, :position {:bounding {:x1 147.84786987304688, :y1 172.796875, :x2 505.5298767089844, :y2 193.90625, :width 800, :height 1113.937513848881}, :rects ({:x1 256.703125, :y1 172.796875, :x2 489.4577941894531, :y2 193.90625, :width 800, :height 1113.937513848881} {:x1 147.84786987304688, :y1 174.76231384277344, :x2 256.7003479003906, :y2 189.76231384277344, :width 800, :height 1113.937513848881} {:x1 489.5298767089844, :y1 174.76231384277344, :x2 505.5298767089844, :y2 189.76231384277344, :width 800, :height 1113.937513848881}), :page 153}, :content {:text "增量聚合函数（incremental aggregation functions）"}, :properties {:color "yellow"}} {:id #uuid "624d8fa9-5743-4779-952d-3c607b7219a9", :page 153, :position {:bounding {:x1 158.66561889648438, :y1 432.51690673828125, :x2 360.625, :y2 455.11065673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 432.51690673828125, :x2 360.625, :y2 455.11065673828125, :width 800, :height 1113.937513848881}), :page 153}, :content {:text "归约函数（ReduceFunction）"}, :properties {:color "yellow"}} {:id #uuid "624d8fb1-7a06-4197-9240-7f339c3d4783", :page 155, :position {:bounding {:x1 158.66561889648438, :y1 559.4708862304688, :x2 379.234375, :y2 582.0802612304688, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 559.4708862304688, :x2 379.234375, :y2 582.0802612304688, :width 800, :height 1113.937513848881}), :page 155}, :content {:text "聚合函数（AggregateFunction）"}, :properties {:color "yellow"}} {:id #uuid "624d8fc0-a0ff-40cb-bc20-b3d9ef6193e6", :page 159, :position {:bounding {:x1 147.85000610351562, :y1 172.796875, :x2 799.989501953125, :y2 193.90625, :width 800, :height 1113.937513848881}, :rects ({:x1 241.28125, :y1 172.796875, :x2 799.989501953125, :y2 193.90625, :width 800, :height 1113.937513848881} {:x1 147.85000610351562, :y1 174.7623291015625, :x2 241.27468872070312, :y2 189.7623291015625, :width 800, :height 1113.937513848881} {:x1 383.484375, :y1 174.7623291015625, :x2 399.484375, :y2 189.7623291015625, :width 800, :height 1113.937513848881}), :page 159}, :content {:text "全窗口函数（full window functions）"}, :properties {:color "yellow"}} {:id #uuid "624d8fc8-f423-41d1-aa61-12dc4b2ec46e", :page 159, :position {:bounding {:x1 158.66561889648438, :y1 455.75128173828125, :x2 367.359375, :y2 478.34503173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 455.75128173828125, :x2 367.359375, :y2 478.34503173828125, :width 800, :height 1113.937513848881}), :page 159}, :content {:text "窗口函数（WindowFunction）"}, :properties {:color "yellow"}} {:id #uuid "624d8fcf-a24f-4d44-9e35-053e43ae793e", :page 159, :position {:bounding {:x1 158.64419555664062, :y1 945.7825317382812, :x2 448.1875, :y2 968.3762817382812, :width 800, :height 1113.937513848881}, :rects ({:x1 158.64419555664062, :y1 945.7825317382812, :x2 448.1875, :y2 968.3762817382812, :width 800, :height 1113.937513848881}), :page 159}, :content {:text "处理窗口函数（ProcessWindowFunction）"}, :properties {:color "yellow"}} {:id #uuid "624e8adc-14d1-453b-856c-0f6f16d726c4", :page 162, :position {:bounding {:x1 126.95298767089844, :y1 422.2623291015625, :x2 360.0857238769531, :y2 437.2623291015625, :width 800, :height 1113.937513848881}, :rects ({:x1 126.95298767089844, :y1 422.2623291015625, :x2 360.0857238769531, :y2 437.2623291015625, :width 800, :height 1113.937513848881}), :page 162}, :content {:text "增量聚合和全窗口函数的结合使用"}, :properties {:color "yellow"}} {:id #uuid "624e8b33-a97d-4167-a62f-4895d7ab1e8f", :page 169, :position {:bounding {:x1 147.85299682617188, :y1 717.7736206054688, :x2 799.9989013671875, :y2 746.3204956054688, :width 800, :height 1113.937513848881}, :rects ({:x1 210.265625, :y1 717.7736206054688, :x2 799.9989013671875, :y2 746.3204956054688, :width 800, :height 1113.937513848881} {:x1 210.265625, :y1 722.2111206054688, :x2 258.8658752441406, :y2 742.2111206054688, :width 800, :height 1113.937513848881} {:x1 147.85299682617188, :y1 724.1685791015625, :x2 210.25050354003906, :y2 739.1685791015625, :width 800, :height 1113.937513848881}), :page 169}, :content {:text "触发器（Trigger）"}, :properties {:color "yellow"}} {:id #uuid "624e8fcb-e66d-4992-97e7-a504d42d9b43", :page 173, :position {:bounding {:x1 147.85299682617188, :y1 241.75, :x2 799.9892578125, :y2 262.765625, :width 800, :height 1113.937513848881}, :rects ({:x1 210.078125, :y1 241.75, :x2 799.9892578125, :y2 262.765625, :width 800, :height 1113.937513848881} {:x1 147.85299682617188, :y1 243.7139892578125, :x2 210.25050354003906, :y2 258.7139892578125, :width 800, :height 1113.937513848881} {:x1 257.59375, :y1 243.7139892578125, :x2 273.59375, :y2 258.7139892578125, :width 800, :height 1113.937513848881}), :page 173}, :content {:text "移除器（Evictor）"}, :properties {:color "yellow"}} {:id #uuid "624e8fda-742e-4ee0-a039-7b17e245f166", :page 173, :position {:bounding {:x1 147.8494110107422, :y1 519.75, :x2 800.004150390625, :y2 540.78125, :width 800, :height 1113.937513848881}, :rects ({:x1 225.6875, :y1 519.75, :x2 800.004150390625, :y2 540.78125, :width 800, :height 1113.937513848881} {:x1 147.8494110107422, :y1 521.7154541015625, :x2 225.67471313476562, :y2 536.7154541015625, :width 800, :height 1113.937513848881} {:x1 347.328125, :y1 521.7154541015625, :x2 363.328125, :y2 536.7154541015625, :width 800, :height 1113.937513848881}), :page 173}, :content {:text "允许延迟（Allowed Lateness）"}, :properties {:color "yellow"}} {:id #uuid "624e9024-9c7e-49b4-a7dd-3a8c98f336e0", :page 174, :position {:bounding {:x1 126.95298767089844, :y1 221.1998291015625, :x2 313.45916748046875, :y2 236.1998291015625, :width 800, :height 1113.937513848881}, :rects ({:x1 126.95298767089844, :y1 221.1998291015625, :x2 313.45916748046875, :y2 236.1998291015625, :width 800, :height 1113.937513848881}), :page 174}, :content {:text "将迟到的数据放入侧输出流"}, :properties {:color "yellow"}} {:id #uuid "624f9fec-b367-4274-817e-1efe5ba2337f", :page 183, :position {:bounding {:x1 138, :y1 234, :x2 528, :y2 499, :width 800, :height 1113.937513848881}, :rects (), :page 183}, :content {:text "[:span]", :image 1649385452726}, :properties {:color "yellow"}} {:id #uuid "624fa609-e298-4607-9209-e15ad163052f", :page 184, :position {:bounding {:x1 -0.009788364171981812, :y1 312.1243896484375, :x2 800.0025024414062, :y2 451.76690673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 484.7102966308594, :y1 312.1243896484375, :x2 711.6514282226562, :y2 332.1243896484375, :width 800, :height 1113.937513848881} {:x1 -0.0069732666015625, :y1 334.5572509765625, :x2 799.962158203125, :y2 357.1822509765625, :width 800, :height 1113.937513848881} {:x1 -0.0069732666015625, :y1 357.79815673828125, :x2 800.0025024414062, :y2 380.31378173828125, :width 800, :height 1113.937513848881} {:x1 -0.009788364171981812, :y1 380.9337158203125, :x2 799.998779296875, :y2 403.4493408203125, :width 800, :height 1113.937513848881} {:x1 -0.00978650152683258, :y1 404.07940673828125, :x2 799.9951171875, :y2 426.67315673828125, :width 800, :height 1113.937513848881} {:x1 -0.009785205125808716, :y1 427.29815673828125, :x2 619.1115112304688, :y2 451.76690673828125, :width 800, :height 1113.937513848881}), :page 184}, :content {:text "处理函数提供了一个“定时服务”（TimerService），我们可以通过它访问流中的事件（event）、时间戳（timestamp）、水位线（watermark），甚至可以注册“定时事件”。而且处理函数继承了AbstractRichFunction抽象类，所以拥有富函数类的所有特性，同样可以访问状态（state）和其他运行时信息。此外，处理函数还可以直接将数据输出到侧输出流（sideoutput）中。所以，处理函数是最为灵活的处理方法，可以实现各种自定义的业务逻辑；同时也是整个DataStreamAPI的底层基础"}, :properties {:color "yellow"}} {:id #uuid "624fa641-8b3e-416d-87a4-f854f536d145", :page 184, :position {:bounding {:x1 75.32501220703125, :y1 455.0462341308594, :x2 799.9827270507812, :y2 498.25128173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38638305664062, :y1 455.0462341308594, :x2 799.9827270507812, :y2 475.0462341308594, :width 800, :height 1113.937513848881} {:x1 75.32501220703125, :y1 478.25128173828125, :x2 137.4735107421875, :y2 498.25128173828125, :width 800, :height 1113.937513848881}), :page 184}, :content {:text "处理函数的使用与基本的转换操作类似，只需要直接基于DataStream调用.process()方法就可以了"}, :properties {:color "yellow"}} {:id #uuid "624fcaec-0a62-45dc-8ec7-6fcb18040cff", :page 185, :position {:bounding {:x1 143.30242919921875, :y1 768.8765258789062, :x2 330.4830627441406, :y2 793.8765258789062, :width 800, :height 1113.937513848881}, :rects ({:x1 143.30242919921875, :y1 768.8765258789062, :x2 330.4830627441406, :y2 793.8765258789062, :width 800, :height 1113.937513848881}), :page 185}, :content {:text "ProcessFunction解析"}, :properties {:color "yellow"}} {:id #uuid "624fcaf9-0fe7-4dbd-8d73-4d9d731f414a", :page 187, :position {:bounding {:x1 148.37713623046875, :y1 460.0024108886719, :x2 282.8538513183594, :y2 485.0024108886719, :width 800, :height 1113.937513848881}, :rects ({:x1 148.37713623046875, :y1 460.0024108886719, :x2 282.8538513183594, :y2 485.0024108886719, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "处理函数的分类"}, :properties {:color "yellow"}} {:id #uuid "624fcb07-91b9-4613-b348-4f3549e1dee4", :page 187, :position {:bounding {:x1 127.29585266113281, :y1 649.3431396484375, :x2 350.22064208984375, :y2 680.9993896484375, :width 800, :height 1113.937513848881}, :rects ({:x1 162.05870056152344, :y1 649.3431396484375, :x2 225.52166748046875, :y2 680.9993896484375, :width 800, :height 1113.937513848881} {:x1 127.29585266113281, :y1 652.0150146484375, :x2 160.11410522460938, :y2 672.0150146484375, :width 800, :height 1113.937513848881} {:x1 226.0213623046875, :y1 652.0150146484375, :x2 350.22064208984375, :y2 672.0150146484375, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "Flink提供了8个不同的处理函数"}, :properties {:color "yellow"}} {:id #uuid "624fcb0f-820a-4cd0-b4ae-0ca7fdbb25ba", :page 187, :position {:bounding {:x1 166.125, :y1 689.603271484375, :x2 268.7948303222656, :y2 709.603271484375, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 689.603271484375, :x2 268.7948303222656, :y2 709.603271484375, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "ProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb15-d9f7-4612-9fc3-34e3cb8874dd", :page 187, :position {:bounding {:x1 166.125, :y1 753.05126953125, :x2 309.19195556640625, :y2 773.05126953125, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 753.05126953125, :x2 309.19195556640625, :y2 773.05126953125, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "KeyedProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb1b-7a75-42d0-93a0-8dbf483345d9", :page 187, :position {:bounding {:x1 166.125, :y1 839.78564453125, :x2 321.59930419921875, :y2 859.78564453125, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 839.78564453125, :x2 321.59930419921875, :y2 859.78564453125, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "ProcessWindowFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb20-1768-44ca-8e12-b90ab03f6b1b", :page 187, :position {:bounding {:x1 166.125, :y1 926.45751953125, :x2 341.28497314453125, :y2 946.45751953125, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 926.45751953125, :x2 341.28497314453125, :y2 946.45751953125, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "ProcessAllWindowFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb29-5775-4665-97c8-2a3d59005df8", :page 187, :position {:bounding {:x1 166.125, :y1 990.103271484375, :x2 286.83319091796875, :y2 1010.103271484375, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 990.103271484375, :x2 286.83319091796875, :y2 1010.103271484375, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "CoProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb2f-e54f-4ee5-a617-9b3de45dcdad", :page 188, :position {:bounding {:x1 145.203125, :y1 179.884521484375, :x2 273.7420959472656, :y2 199.884521484375, :width 800, :height 1113.937513848881}, :rects ({:x1 145.203125, :y1 179.884521484375, :x2 273.7420959472656, :y2 199.884521484375, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "ProcessJoinFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb37-9ea0-4844-bc5b-892ba23266cc", :page 188, :position {:bounding {:x1 145.203125, :y1 266.56689453125, :x2 309.7374267578125, :y2 286.56689453125, :width 800, :height 1113.937513848881}, :rects ({:x1 145.203125, :y1 266.56689453125, :x2 309.7374267578125, :y2 286.56689453125, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "BroadcastProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb3d-9372-443e-86f1-19c207a2240e", :page 188, :position {:bounding {:x1 145.203125, :y1 399.743896484375, :x2 350.30609130859375, :y2 419.743896484375, :width 800, :height 1113.937513848881}, :rects ({:x1 145.203125, :y1 399.743896484375, :x2 350.30609130859375, :y2 419.743896484375, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "KeyedBroadcastProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcdb1-350a-489a-9aec-9625f4472497", :page 188, :position {:bounding {:x1 120.02024841308594, :y1 559.2941284179688, :x2 599.4364624023438, :y2 618.8878784179688, :width 800, :height 1113.937513848881}, :rects ({:x1 332.57794189453125, :y1 559.2941284179688, :x2 575.7553100585938, :y2 618.8878784179688, :width 800, :height 1113.937513848881} {:x1 120.02024841308594, :y1 577.7409057617188, :x2 332.54803466796875, :y2 600.7409057617188, :width 800, :height 1113.937513848881} {:x1 575.8583374023438, :y1 577.7409057617188, :x2 599.4364624023438, :y2 600.7409057617188, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "按键分区处理函数（KeyedProcessFunction）"}, :properties {:color "yellow"}} {:id #uuid "624ffdf8-0638-43ce-ae26-a770e8e19bed", :page 210, :position {:bounding {:x1 202, :y1 107, :x2 581, :y2 442, :width 800, :height 1113.937513848881}, :rects (), :page 210}, :content {:text "[:span]", :image 1649409528679}, :properties {:color "yellow"}} {:id #uuid "62500020-8592-4d21-bbec-c9acf4eaa582", :page 214, :position {:bounding {:x1 238, :y1 179, :x2 539, :y2 444, :width 800, :height 1113.937513848881}, :rects (), :page 214}, :content {:text "[:span]", :image 1649410080889}, :properties {:color "yellow"}} {:id #uuid "62500036-ceec-4550-9036-20eef640437d", :page 214, :position {:bounding {:x1 76, :y1 438, :x2 705, :y2 550, :width 800, :height 1113.937513848881}, :rects (), :page 214}, :content {:text "[:span]", :image 1649410102782}, :properties {:color "yellow"}} {:id #uuid "625002d5-6cc3-4cd5-8821-f2d1adeed9cd", :page 214, :position {:bounding {:x1 -0.009787231683731079, :y1 553.9865112304688, :x2 799.9995513558388, :y2 713.1262817382812, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38497161865234, :y1 553.9865112304688, :x2 703.8626937866211, :y2 573.9865112304688, :width 800, :height 1113.937513848881} {:x1 -0.009787231683731079, :y1 576.4075317382812, :x2 799.98136267066, :y2 599.0012817382812, :width 800, :height 1113.937513848881} {:x1 -0.004237741231918335, :y1 599.6262817382812, :x2 799.9819946289062, :y2 622.2200317382812, :width 800, :height 1113.937513848881} {:x1 -0.009785979986190796, :y1 622.8450317382812, :x2 799.9916178286076, :y2 645.3606567382812, :width 800, :height 1113.937513848881} {:x1 -0.00978676974773407, :y1 645.9805297851562, :x2 799.9949129372835, :y2 668.4961547851562, :width 800, :height 1113.937513848881} {:x1 -0.009787023067474365, :y1 669.1106567382812, :x2 799.9995513558388, :y2 691.7044067382812, :width 800, :height 1113.937513848881} {:x1 75.31745147705078, :y1 693.1262817382812, :x2 323.89112091064453, :y2 713.1262817382812, :width 800, :height 1113.937513848881}), :page 214}, :content {:text "这里需要考虑一个问题。在事件时间语义下，水位线是时间的进度标志；不同的流中可能水位线的进展快慢完全不同，如果它们合并在一起，水位线又该以哪个为准呢？还以要考虑水位线的本质含义，是“之前的所有数据已经到齐了”；所以对于合流之后的水位线，也是要以最小的那个为准，这样才可以保证所有流都不会再传来之前的数据。换句话说，多流合并时处理的时效性是以最慢的那个流为准的。我们自然可以想到，这与之前介绍的并行任务水位线传递的规则是完全一致的；多条流的合并，某种意义上也可以看作是多个并行任务向同一个下游任务汇合的过程。"}, :properties {:color "yellow"}} {:id #uuid "6250ffc4-19c0-4baf-b90d-406b2ca215b7", :page 218, :position {:bounding {:x1 247, :y1 115, :x2 559, :y2 504, :width 800, :height 1113.937513848881}, :rects (), :page 218}, :content {:text "[:span]", :image 1649475524609}, :properties {:color "yellow"}} {:id #uuid "62511a66-6806-4ea1-9025-f80463bf4b46", :page 225, :position {:bounding {:x1 -0.015340790152549744, :y1 303.0904541015625, :x2 800.390625, :y2 519.9075317382812, :width 800, :height 1113.937513848881}, :rects ({:x1 146.2229766845703, :y1 303.0904541015625, :x2 435.93983459472656, :y2 332.0904541015625, :width 800, :height 1113.937513848881} {:x1 127.28681182861328, :y1 308.03485107421875, :x2 144.57818603515625, :y2 328.03485107421875, :width 800, :height 1113.937513848881} {:x1 241.109375, :y1 308.046875, :x2 800.390625, :y2 329.96875, :width 800, :height 1113.937513848881} {:x1 435.96875, :y1 310.0123291015625, :x2 451.96875, :y2 325.0123291015625, :width 800, :height 1113.937513848881} {:x1 -0.015340790152549744, :y1 332.7008056640625, :x2 799.995849609375, :y2 357.5445556640625, :width 800, :height 1113.937513848881} {:x1 -0.009468957781791687, :y1 358.15753173828125, :x2 799.999755859375, :y2 380.75128173828125, :width 800, :height 1113.937513848881} {:x1 -0.009465277194976807, :y1 381.37628173828125, :x2 799.9952392578125, :y2 403.97003173828125, :width 800, :height 1113.937513848881} {:x1 -0.015335619449615479, :y1 404.61065673828125, :x2 799.9889368414879, :y2 427.20440673828125, :width 800, :height 1113.937513848881} {:x1 -0.00946684181690216, :y1 427.82940673828125, :x2 799.9843686074018, :y2 450.34503173828125, :width 800, :height 1113.937513848881} {:x1 -0.009462147951126099, :y1 450.9649353027344, :x2 799.9922485351562, :y2 473.4805908203125, :width 800, :height 1113.937513848881} {:x1 -0.009462714195251465, :y1 474.09503173828125, :x2 799.984494805336, :y2 496.68878173828125, :width 800, :height 1113.937513848881} {:x1 -0.009465470910072327, :y1 497.31378173828125, :x2 250.14532470703125, :y2 519.9075317382812, :width 800, :height 1113.937513848881}), :page 225}, :content {:text "3. 广播连接流（BroadcastConnectedStream）关于两条流的连接，还有一种比较特殊的用法：DataStream调用.connect()方法时，传入的参数也可以不是一个DataStream，而是一个“广播流”（BroadcastStream），这时合并两条流得到的就变成了一个“广播连接流”（BroadcastConnectedStream）。这种连接方式往往用在需要动态定义某些规则或配置的场景。因为规则是实时变动的，所以我们可以用一个单独的流来获取规则数据；而这些规则或配置是对整个应用全局有效的，所以不能只把这数据传递给一个下游并行子任务处理，而是要“广播”（broadcast）给所有的并行子任务。而下游子任务收到广播出来的规则，会把它保存成一个状态，这就是所谓的“广播状态”（broadcast state）"}, :properties {:color "yellow"}} {:id #uuid "62511b22-c12d-4e2a-9375-e017ba80c9f0", :page 226, :position {:bounding {:x1 -0.00978851318359375, :y1 576.3242797851562, :x2 799.997802734375, :y2 665.9856567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 604.7379760742188, :y1 576.3242797851562, :x2 799.997802734375, :y2 598.8399047851562, :width 800, :height 1113.937513848881} {:x1 -0.00978851318359375, :y1 598.7356567382812, :x2 799.96044921875, :y2 621.3294067382812, :width 800, :height 1113.937513848881} {:x1 -0.009784296154975891, :y1 621.9544067382812, :x2 799.994140625, :y2 644.5481567382812, :width 800, :height 1113.937513848881} {:x1 75.32145690917969, :y1 645.9856567382812, :x2 339.37779235839844, :y2 665.9856567382812, :width 800, :height 1113.937513848881}), :page 226}, :content {:text "Flink中两条流的connect操作，就可以通过keyBy指定键进行分组后合并，实现了类似于SQL中的join操作；另外connect支持处理函数，可以使用自定义状态和TimerService灵活实现各种需求，其实已经能够处理双流合并的大多数场景"}, :properties {:color "yellow"}} {:id #uuid "62511b80-211a-469d-85a3-e080386f4a35", :page 226, :position {:bounding {:x1 -0.009788155555725098, :y1 974.6836547851562, :x2 799.981689453125, :y2 1025.1866455078125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38900756835938, :y1 974.6836547851562, :x2 799.981689453125, :y2 994.6836547851562, :width 800, :height 1113.937513848881} {:x1 -0.009788155555725098, :y1 997.1085815429688, :x2 299.64190673828125, :y2 1025.1866455078125, :width 800, :height 1113.937513848881} {:x1 277.3035888671875, :y1 997.9367065429688, :x2 532.353759765625, :y2 1017.9367065429688, :width 800, :height 1113.937513848881}), :page 226}, :content {:text "Flink为这种场景专门提供了一个窗口联结（window join）算子，可以定义时间窗口，并将两条流中共享一个公共键（key）的数据放在窗口中进行配对处理"}, :properties {:color "yellow"}} {:id #uuid "62511bc7-3e07-4103-ae4c-8b9f6fb32aa9", :page 227, :position {:bounding {:x1 -0.00946807861328125, :y1 146.72296142578125, :x2 799.99365234375, :y2 219.43878173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.28337860107422, :y1 146.72296142578125, :x2 799.99365234375, :y2 166.72296142578125, :width 800, :height 1113.937513848881} {:x1 -0.00946807861328125, :y1 169.15753173828125, :x2 799.987060546875, :y2 191.75128173828125, :width 800, :height 1113.937513848881} {:x1 -0.00946807861328125, :y1 192.37628173828125, :x2 333.55706787109375, :y2 219.43878173828125, :width 800, :height 1113.937513848881} {:x1 96.27178192138672, :y1 193.17315673828125, :x2 690.4850463867188, :y2 213.17315673828125, :width 800, :height 1113.937513848881}), :page 227}, :content {:text "窗口联结在代码中的实现，首先需要调用DataStream的.join()方法来合并两条流，得到一个JoinedStreams；接着通过.where()和.equalTo()方法指定两条流中联结的key；然后通过.window()开窗口，并调用.apply()传入联结窗口函数进行处理计算。通用调用形式如下"}, :properties {:color "yellow"}} {:id #uuid "62511bd4-6347-447f-8ec6-f9d3ead56c99", :page 227, :position {:bounding {:x1 97, :y1 228, :x2 327, :y2 368, :width 800, :height 1113.937513848881}, :rects (), :page 227}, :content {:text "[:span]", :image 1649482708757}, :properties {:color "yellow"}} {:id #uuid "62512031-5555-40e9-a7bd-750bfbd254f8", :page 231, :position {:bounding {:x1 96.2725830078125, :y1 142.30865478515625, :x2 732.7683868408203, :y2 185.51690673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 158.36463928222656, :y1 142.30865478515625, :x2 732.7683868408203, :y2 162.30865478515625, :width 800, :height 1113.937513848881} {:x1 96.2725830078125, :y1 165.51690673828125, :x2 375.7659606933594, :y2 185.51690673828125, :width 800, :height 1113.937513848881}), :page 231}, :content {:text "间隔联结的思路就是针对一条流的每个数据，开辟出其时间戳前后的一段时间间隔，看这期间是否有来自另一条流的数据匹配"}, :properties {:color "yellow"}} {:id #uuid "6251204b-d57c-435b-bdd3-9ddbb34ce711", :page 231, :position {:bounding {:x1 -0.009467214345932007, :y1 223.83746337890625, :x2 800.0035400390625, :y2 383.03253173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.2897720336914, :y1 223.83746337890625, :x2 799.9652099609375, :y2 243.83746337890625, :width 800, :height 1113.937513848881} {:x1 -0.00946548581123352, :y1 246.16802978515625, :x2 800.0018920898438, :y2 268.6836853027344, :width 800, :height 1113.937513848881} {:x1 -0.00946258008480072, :y1 269.31378173828125, :x2 799.9660034179688, :y2 291.90753173828125, :width 800, :height 1113.937513848881} {:x1 -0.009467214345932007, :y1 292.53253173828125, :x2 799.9800347387791, :y2 315.12628173828125, :width 800, :height 1113.937513848881} {:x1 -0.00946567952632904, :y1 315.75128173828125, :x2 800.0035400390625, :y2 338.37628173828125, :width 800, :height 1113.937513848881} {:x1 -0.00946451723575592, :y1 338.9947509765625, :x2 799.9890441894531, :y2 361.6197509765625, :width 800, :height 1113.937513848881} {:x1 127.29560089111328, :y1 363.03253173828125, :x2 591.398323059082, :y2 383.03253173828125, :width 800, :height 1113.937513848881}), :page 231}, :content {:text "间隔联结具体的定义方式是，我们给定两个时间点，分别叫作间隔的“上界”（upperBound）和“下界”（lowerBound）；于是对于一条流（不妨叫作A）中的任意一个数据元素a，就可以开辟一段时间间隔：[a.timestamp + lowerBound, a.timestamp + upperBound],即以a的时间戳为中心，下至下界点、上至上界点的一个闭区间：我们就把这段时间作为可以匹配另一条流数据的“窗口”范围。所以对于另一条流（不妨叫B）中的数据元素b，如果它的时间戳落在了这个区间范围内，a和b就可以成功配对，进而进行计算输出结果。所以匹配的条件为：a.timestamp + lowerBound <= b.timestamp <= a.timestamp + upperBound"}, :properties {:color "yellow"}} {:id #uuid "6251205f-afb7-4109-9190-c82395fe9fa9", :page 231, :position {:bounding {:x1 -0.009466663002967834, :y1 386.0899353027344, :x2 799.9866333007812, :y2 431.09503173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 236.0245361328125, :y1 386.0899353027344, :x2 799.9866333007812, :y2 406.0899353027344, :width 800, :height 1113.937513848881} {:x1 -0.009466663002967834, :y1 408.50128173828125, :x2 673.4677124023438, :y2 431.09503173828125, :width 800, :height 1113.937513848881}), :page 231}, :content {:text "做间隔联结的两条流A和B，也必须基于相同的key；下界lowerBound应该小于等于上界upperBound，两者都可正可负；间隔联结目前只支持事件时间语义"}, :properties {:color "yellow"}} {:id #uuid "6251206d-2f4d-4108-935e-602233361f19", :page 231, :position {:bounding {:x1 96, :y1 475.00000000000006, :x2 698, :y2 618, :width 800, :height 1113.937513848881}, :rects (), :page 231}, :content {:text "[:span]", :image 1649483888550}, :properties {:color "yellow"}} {:id #uuid "625120aa-0fd3-43a1-889f-4899bf9ae1cd", :page 231, :position {:bounding {:x1 -0.009466618299484253, :y1 790.6822509765625, :x2 800.0009155273438, :y2 857.1106567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 260.86505126953125, :y1 790.6822509765625, :x2 799.9930419921875, :y2 810.6822509765625, :width 800, :height 1113.937513848881} {:x1 -0.009466618299484253, :y1 813.0950317382812, :x2 800.0009155273438, :y2 835.6887817382812, :width 800, :height 1113.937513848881} {:x1 96.2724609375, :y1 837.1106567382812, :x2 173.9864959716797, :y2 857.1106567382812, :width 800, :height 1113.937513848881}), :page 231}, :content {:text "间隔联结同样是一种内连接（inner join）。与窗口联结不同的是，interval join做匹配的时间段是基于流中数据的，所以并不确定；而且流B中的数据可以不只在一个区间内被匹配"}, :properties {:color "yellow"}} {:id #uuid "625120e1-ec2e-41cf-916c-504575b62209", :page 231, :position {:bounding {:x1 -0.009467780590057373, :y1 895.2698364257812, :x2 799.9954833984375, :y2 1007.9805297851562, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29133605957031, :y1 895.2698364257812, :x2 799.9954833984375, :y2 915.2698364257812, :width 800, :height 1113.937513848881} {:x1 -0.009467780590057373, :y1 917.6887817382812, :x2 799.984375, :y2 940.2825317382812, :width 800, :height 1113.937513848881} {:x1 -0.009465843439102173, :y1 940.9075317382812, :x2 799.9869995117188, :y2 963.5012817382812, :width 800, :height 1113.937513848881} {:x1 -0.009466350078582764, :y1 964.1292724609375, :x2 799.9819946289062, :y2 986.6448974609375, :width 800, :height 1113.937513848881} {:x1 96.26719665527344, :y1 987.9805297851562, :x2 111.87033081054688, :y2 1007.9805297851562, :width 800, :height 1113.937513848881}), :page 231}, :content {:text "间隔联结在代码中，是基于KeyedStream的联结（join）操作。DataStream在keyBy得到KeyedStream之后，可以调用.intervalJoin()来合并两条流，传入的参数同样是一个KeyedStream，两者的key类型应该一致；得到的是一个IntervalJoin类型。后续的操作同样是完全固定的：先通过.between()方法指定间隔的上下界，再调用.process()方法，定义对匹配数据对的处理操作"}, :properties {:color "yellow"}} {:id #uuid "62512bbc-2c6d-47cd-8f39-79a8fc571d52", :page 235, :position {:bounding {:x1 -0.00946912169456482, :y1 268.33544921875, :x2 799.9907836914062, :y2 349.8697509765625, :width 800, :height 1113.937513848881}, :rects ({:x1 327.828125, :y1 268.33544921875, :x2 799.9855346679688, :y2 300.24169921875, :width 800, :height 1113.937513848881} {:x1 127.28631591796875, :y1 278.44482421875, :x2 695.1248779296875, :y2 298.44482421875, :width 800, :height 1113.937513848881} {:x1 -0.009466275572776794, :y1 300.86065673828125, :x2 799.9907836914062, :y2 323.48565673828125, :width 800, :height 1113.937513848881} {:x1 -0.00946912169456482, :y1 324.1041259765625, :x2 296.2929992675781, :y2 349.8697509765625, :width 800, :height 1113.937513848881} {:x1 158.5, :y1 324.9322509765625, :x2 358.419189453125, :y2 344.9322509765625, :width 800, :height 1113.937513848881}), :page 235}, :content {:text "除窗口联结和间隔联结之外，Flink还提供了一个“窗口同组联结”（window coGroup）操作。它的用法跟window join非常类似，也是将两条流合并之后开窗处理匹配的元素，调用时只需要将.join()换为.coGroup()就可以了"}, :properties {:color "yellow"}} {:id #uuid "62512bcb-71b8-4d68-8c69-0b8a2e4db91c", :page 235, :position {:bounding {:x1 97, :y1 357, :x2 531, :y2 489, :width 800, :height 1113.937513848881}, :rects (), :page 235}, :content {:text "[:span]", :image 1649486795502}, :properties {:color "yellow"}} {:id #uuid "62512c61-64d3-4e0d-9ba5-caf8ccda6762", :page 235, :position {:bounding {:x1 -0.00946645438671112, :y1 643.6836547851562, :x2 799.9967651367188, :y2 756.5637817382812, :width 800, :height 1113.937513848881}, :rects ({:x1 528.4235229492188, :y1 643.6836547851562, :x2 724.8783569335938, :y2 663.6836547851562, :width 800, :height 1113.937513848881} {:x1 -0.00946645438671112, :y1 666.0950317382812, :x2 799.9829651862383, :y2 688.6887817382812, :width 800, :height 1113.937513848881} {:x1 -0.009463310241699219, :y1 689.3294067382812, :x2 799.9967651367188, :y2 711.9231567382812, :width 800, :height 1113.937513848881} {:x1 -0.009464487433433533, :y1 712.5481567382812, :x2 799.9888305664062, :y2 735.1419067382812, :width 800, :height 1113.937513848881} {:x1 96.2667236328125, :y1 736.5637817382812, :x2 608.5625, :y2 756.5637817382812, :width 800, :height 1113.937513848881}), :page 235}, :content {:text "不同的是，这里的前两个参数不再是单独的每一组“配对”数据了，而是传入了可遍历的数据集合。也就是说，现在不会再去计算窗口中两条流数据集的笛卡尔积，而是直接把收集到的所有数据一次性传入，至于要怎样配对完全是自定义的。这样.coGroup()方法只会被调用一次，而且即使一条流的数据没有任何另一条流的数据匹配，也可以出现在集合中、当然也可以定义输出结果了"}, :properties {:color "yellow"}} {:id #uuid "62512c77-992b-4009-9539-06878e5809f3", :page 235, :position {:bounding {:x1 -0.009468406438827515, :y1 759.7825317382812, :x2 799.9932250976562, :y2 827.8919067382812, :width 800, :height 1113.937513848881}, :rects ({:x1 235.96875, :y1 759.7825317382812, :x2 799.9854125976562, :y2 779.7825317382812, :width 800, :height 1113.937513848881} {:x1 -0.009468406438827515, :y1 782.1458740234375, :x2 799.9932250976562, :y2 804.6771240234375, :width 800, :height 1113.937513848881} {:x1 -0.009465843439102173, :y1 805.2981567382812, :x2 624.5018310546875, :y2 827.8919067382812, :width 800, :height 1113.937513848881}), :page 235}, :content {:text "coGroup操作比窗口的join更加通用，不仅可以实现类似SQL中的“内连接”（inner join），也可以实现左外连接（left outer join）、右外连接（right outer join）和全外连接（full outer join）。事实上，窗口join的底层，也是通过coGroup来实现的"}, :properties {:color "yellow"}} {:id #uuid "625140c4-b89e-4392-a42c-5089e0843a08", :page 238, :position {:bounding {:x1 106.38900756835938, :y1 499.01409912109375, :x2 446.2941589355469, :y2 519.0140991210938, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38900756835938, :y1 499.01409912109375, :x2 446.2941589355469, :y2 519.0140991210938, :width 800, :height 1113.937513848881}), :page 238}, :content {:text "Flink处理机制的核心，就是“有状态的流式计算”"}, :properties {:color "yellow"}} {:id #uuid "625140eb-17bc-4baf-884b-3cb9611c3e54", :page 238, :position {:bounding {:x1 -0.009787648916244507, :y1 758.4816284179688, :x2 799.9993676245213, :y2 838.5012817382812, :width 800, :height 1113.937513848881}, :rects ({:x1 274.46875, :y1 758.4816284179688, :x2 799.9945068359375, :y2 793.8722534179688, :width 800, :height 1113.937513848881} {:x1 106.38765716552734, :y1 772.0753784179688, :x2 703.884033203125, :y2 792.0753784179688, :width 800, :height 1113.937513848881} {:x1 -0.009787648916244507, :y1 794.4856567382812, :x2 799.9993676245213, :y2 817.0794067382812, :width 800, :height 1113.937513848881} {:x1 75.32777404785156, :y1 818.5012817382812, :x2 370.42066955566406, :y2 838.5012817382812, :width 800, :height 1113.937513848881}), :page 238}, :content {:text "在流处理中，数据是连续不断到来和处理的。每个任务进行计算处理时，可以基于当前数据直接转换得到输出结果；也可以依赖一些其他数据。这些由一个任务维护，并且用来计算输出结果的所有数据，就叫作这个任务的状态"}, :properties {:color "yellow"}} {:id #uuid "62514144-c79b-4407-82f8-ecf1dbdfd6eb", :page 239, :position {:bounding {:x1 265, :y1 126, :x2 541, :y2 221, :width 800, :height 1113.937513848881}, :rects (), :page 239}, :content {:text "[:span]", :image 1649492292943}, :properties {:color "yellow"}} {:id #uuid "6251418d-8e48-4f2b-b410-e8dc58aa16db", :page 239, :position {:bounding {:x1 220, :y1 403, :x2 594, :y2 621, :width 800, :height 1113.937513848881}, :rects (), :page 239}, :content {:text "[:span]", :image 1649492365037}, :properties {:color "yellow"}} {:id #uuid "6251421e-4bdd-4ad6-bc71-93981ab69b1f", :page 239, :position {:bounding {:x1 96.28115844726562, :y1 775.0896606445312, :x2 244.40957641601562, :y2 800.0896606445312, :width 800, :height 1113.937513848881}, :rects ({:x1 96.28115844726562, :y1 775.0896606445312, :x2 244.40957641601562, :y2 800.0896606445312, :width 800, :height 1113.937513848881}), :page 239}, :content {:text "9.1.2 状态的管理"}, :properties {:color "yellow"}} {:id #uuid "6251454a-62c0-4f11-a9dc-f14fb4746252", :page 241, :position {:bounding {:x1 260, :y1 360, :x2 560, :y2 602, :width 800, :height 1113.937513848881}, :rects (), :page 241}, :content {:text "[:span]", :image 1649493322787}, :properties {:color "yellow"}} {:id #uuid "62514617-813a-4964-820b-5a9c9c44a3af", :page 241, :position {:bounding {:x1 220, :y1 753, :x2 601, :y2 1022, :width 800, :height 1113.937513848881}, :rects (), :page 241}, :content {:text "[:span]", :image 1649493527285}, :properties {:color "yellow"}} {:id #uuid "62514878-7b0f-48c2-9b59-1f344800e8d3", :page 243, :position {:bounding {:x1 127.28153991699219, :y1 403.98797607421875, :x2 300.9224548339844, :y2 432.97235107421875, :width 800, :height 1113.937513848881}, :rects ({:x1 135.97799682617188, :y1 403.98797607421875, :x2 284.9180908203125, :y2 432.97235107421875, :width 800, :height 1113.937513848881} {:x1 127.28153991699219, :y1 408.94110107421875, :x2 144.49594116210938, :y2 428.94110107421875, :width 800, :height 1113.937513848881} {:x1 210.265625, :y1 408.94110107421875, :x2 284.88818359375, :y2 428.94110107421875, :width 800, :height 1113.937513848881} {:x1 147.8501434326172, :y1 410.9185791015625, :x2 210.2512664794922, :y2 425.9185791015625, :width 800, :height 1113.937513848881} {:x1 284.9224548339844, :y1 410.9185791015625, :x2 300.9224548339844, :y2 425.9185791015625, :width 800, :height 1113.937513848881}), :page 243}, :content {:text "1. 值状态（ValueState）"}, :properties {:color "yellow"}} {:id #uuid "625148a5-ba2e-48a0-986f-a47d9cd9a8f2", :page 243, :position {:bounding {:x1 127.28153991699219, :y1 910.3473510742188, :x2 800.0069580078125, :y2 939.4098510742188, :width 800, :height 1113.937513848881}, :rects ({:x1 135.97799682617188, :y1 910.3473510742188, :x2 285.9750061035156, :y2 939.4098510742188, :width 800, :height 1113.937513848881} {:x1 127.28153991699219, :y1 915.3004760742188, :x2 144.49594116210938, :y2 935.3004760742188, :width 800, :height 1113.937513848881} {:x1 225.6875, :y1 915.3125, :x2 800.0069580078125, :y2 936.421875, :width 800, :height 1113.937513848881} {:x1 286, :y1 917.2623291015625, :x2 302, :y2 932.2623291015625, :width 800, :height 1113.937513848881}), :page 243}, :content {:text "2. 列表状态（ListState）"}, :properties {:color "yellow"}} {:id #uuid "625148bf-d216-4769-81e0-15e72be48684", :page 244, :position {:bounding {:x1 106.38639068603516, :y1 260.72235107421875, :x2 799.9920654296875, :y2 289.69110107421875, :width 800, :height 1113.937513848881}, :rects ({:x1 115.07174682617188, :y1 260.72235107421875, :x2 271.0851135253906, :y2 289.69110107421875, :width 800, :height 1113.937513848881} {:x1 106.38639068603516, :y1 265.67547607421875, :x2 123.58968353271484, :y2 285.67547607421875, :width 800, :height 1113.937513848881} {:x1 204.765625, :y1 265.6875, :x2 799.9920654296875, :y2 286.703125, :width 800, :height 1113.937513848881} {:x1 271.109375, :y1 267.6373291015625, :x2 287.109375, :y2 282.6373291015625, :width 800, :height 1113.937513848881}), :page 244}, :content {:text "3. 映射状态（MapState）"}, :properties {:color "yellow"}} {:id #uuid "625148ca-0a82-4ab0-ae5f-2710de16595f", :page 244, :position {:bounding {:x1 106.38639068603516, :y1 643.6911010742188, :x2 322.5474853515625, :y2 672.671875, :width 800, :height 1113.937513848881}, :rects ({:x1 115.07174682617188, :y1 643.6911010742188, :x2 306.501708984375, :y2 672.6598510742188, :width 800, :height 1113.937513848881} {:x1 106.38639068603516, :y1 648.6442260742188, :x2 123.58968353271484, :y2 668.6442260742188, :width 800, :height 1113.937513848881} {:x1 306.5474853515625, :y1 650.6060791015625, :x2 322.5474853515625, :y2 665.6060791015625, :width 800, :height 1113.937513848881} {:x1 204.59375, :y1 651.65625, :x2 306.5289001464844, :y2 672.671875, :width 800, :height 1113.937513848881}), :page 244}, :content {:text "4. 归约状态（ReducingState）"}, :properties {:color "yellow"}} {:id #uuid "62514933-faab-4ff2-92f4-aa622db752f5", :page 244, :position {:bounding {:x1 106.38639068603516, :y1 934.6286010742188, :x2 799.9937744140625, :y2 963.6911010742188, :width 800, :height 1113.937513848881}, :rects ({:x1 115.07174682617188, :y1 934.6286010742188, :x2 324.62042236328125, :y2 963.6911010742188, :width 800, :height 1113.937513848881} {:x1 106.38639068603516, :y1 939.5817260742188, :x2 123.58968353271484, :y2 959.5817260742188, :width 800, :height 1113.937513848881} {:x1 204.765625, :y1 939.59375, :x2 799.9937744140625, :y2 960.703125, :width 800, :height 1113.937513848881} {:x1 324.640625, :y1 941.5435791015625, :x2 340.640625, :y2 956.5435791015625, :width 800, :height 1113.937513848881}), :page 244}, :content {:text "5. 聚合状态（AggregatingState）"}, :properties {:color "yellow"}} {:id #uuid "625393a1-c528-4403-bfe8-0dc4522c3a77", :page 261, :position {:bounding {:x1 112.33447265625, :y1 274.51763916015625, :x2 705.99755859375, :y2 299.95513916015625, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 120.00999450683594, :y1 274.51763916015625, :x2 252.3656768798828, :y2 299.95513916015625, :width 705.9999999999999, :height 983.0498559716375} {:x1 112.33447265625, :y1 278.53326416015625, :x2 127.52577209472656, :y2 297.53326416015625, :width 705.9999999999999, :height 983.0498559716375} {:x1 199.15625, :y1 278.546875, :x2 705.99755859375, :y2 297.546875, :width 705.9999999999999, :height 983.0498559716375} {:x1 252.390625, :y1 279.6228942871094, :x2 266.390625, :y2 293.6228942871094, :width 705.9999999999999, :height 983.0498559716375}), :page 261}, :content {:text "1. 列表状态（ListState）"}, :properties {:color "yellow"}} {:id #uuid "625393ac-4a9f-4ad3-9c48-9f4e5ef56554", :page 261, :position {:bounding {:x1 112.33447265625, :y1 551.1582641601562, :x2 705.993408203125, :y2 576.5020141601562, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 120.00999450683594, :y1 551.1582641601562, :x2 315.565673828125, :y2 576.5020141601562, :width 705.9999999999999, :height 983.0498559716375} {:x1 112.33447265625, :y1 555.1796264648438, :x2 127.52577209472656, :y2 574.1796264648438, :width 705.9999999999999, :height 983.0498559716375} {:x1 226.375, :y1 555.1875, :x2 705.993408203125, :y2 574.1875, :width 705.9999999999999, :height 983.0498559716375} {:x1 315.59375, :y1 556.2635498046875, :x2 329.59375, :y2 570.2635498046875, :width 705.9999999999999, :height 983.0498559716375}), :page 261}, :content {:text "2. 联合列表状态（UnionListState）"}, :properties {:color "yellow"}} {:id #uuid "625393b4-60bc-426b-9085-b27656a372f4", :page 261, :position {:bounding {:x1 112.33447265625, :y1 725.3145141601562, :x2 306.7360534667969, :y2 750.7363891601562, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 120.00999450683594, :y1 725.3145141601562, :x2 292.7003479003906, :y2 750.7363891601562, :width 705.9999999999999, :height 983.0498559716375} {:x1 112.33447265625, :y1 729.3301391601562, :x2 127.52577209472656, :y2 748.3301391601562, :width 705.9999999999999, :height 983.0498559716375} {:x1 199.15625, :y1 732.34375, :x2 306.7360534667969, :y2 750.734375, :width 705.9999999999999, :height 983.0498559716375}), :page 261}, :content {:text "3. 广播状态（BroadcastState）"}, :properties {:color "yellow"}} {:id #uuid "6253c22f-c10e-4f1f-a274-e0cf098cca9a", :page 276, :position {:bounding {:x1 121.36226654052734, :y1 166.2147216796875, :x2 478.1438293457031, :y2 185.2147216796875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 121.36226654052734, :y1 166.2147216796875, :x2 478.1438293457031, :y2 185.2147216796875, :width 705.9999999999999, :height 983.0498559716375}), :page 276}, :content {:text "内嵌RocksDB状态后端（EmbeddedRocksDBStateBackend）"}, :properties {:color "yellow"}} {:id #uuid "6253c23d-dd68-4176-aa84-f96198379b5c", :page 275, :position {:bounding {:x1 139.79856872558594, :y1 757.1834716796875, :x2 391.6118469238281, :y2 776.9022216796875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 139.79856872558594, :y1 757.1834716796875, :x2 391.6118469238281, :y2 776.9022216796875, :width 705.9999999999999, :height 983.0498559716375}), :page 275}, :content {:text "哈希表状态后端（HashMapStateBackend）"}, :properties {:color "yellow"}} {:id #uuid "6253c261-e451-47d6-be20-b784753c1859", :page 276, :position {:bounding {:x1 -0.0013352036476135254, :y1 483.6993713378906, :x2 705.9823760986328, :y2 543.6834716796875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.88194274902344, :y1 483.6993713378906, :x2 705.9823760986328, :y2 502.6993713378906, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013352036476135254, :y1 503.8240966796875, :x2 705.9754180908203, :y2 523.5428466796875, :width 705.9999999999999, :height 983.0498559716375} {:x1 66.47338104248047, :y1 524.6834716796875, :x2 272.1246871948242, :y2 543.6834716796875, :width 705.9999999999999, :height 983.0498559716375}), :page 276}, :content {:text "HashMap和RocksDB两种状态后端最大的区别，就在于本地状态存放在哪里：前者是内存，后者是RocksDB。在实际应用中，选择那种状态后端，主要是需要根据业务需求在处理性能和应用的扩展性上做一个选择"}, :properties {:color "yellow"}} {:id #uuid "6253c26b-d720-4399-86a3-7ecfaa67e62a", :page 276, :position {:bounding {:x1 66.47415161132812, :y1 545.1678466796875, :x2 705.9741821289062, :y2 584.6678466796875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.88778686523438, :y1 545.1678466796875, :x2 705.9741821289062, :y2 564.8865966796875, :width 705.9999999999999, :height 983.0498559716375} {:x1 66.47415161132812, :y1 565.6678466796875, :x2 491.1829528808594, :y2 584.6678466796875, :width 705.9999999999999, :height 983.0498559716375}), :page 276}, :content {:text "HashMapStateBackend是内存计算，读写速度非常快；但是，状态的大小会受到集群可用内存的限制，如果应用的状态随着时间不停地增长，就会耗尽内存资源"}, :properties {:color "yellow"}} {:id #uuid "6253c277-ef61-424c-a5c1-e462895868b2", :page 276, :position {:bounding {:x1 -0.0013352036476135254, :y1 585.99609375, :x2 705.9985451102257, :y2 666.8397216796875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.88778686523438, :y1 585.99609375, :x2 705.9899444580078, :y2 604.99609375, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013328194618225098, :y1 606.1365966796875, :x2 705.9985451102257, :y2 625.8553466796875, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013352036476135254, :y1 626.6365966796875, :x2 705.9959106445312, :y2 646.3553466796875, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013317465782165527, :y1 647.1209716796875, :x2 338.9370422363281, :y2 666.8397216796875, :width 705.9999999999999, :height 983.0498559716375}), :page 276}, :content {:text "而RocksDB是硬盘存储，所以可以根据可用的磁盘空间进行扩展，而且是唯一支持增量检查点的状态后端，所以它非常适合于超级海量状态的存储。不过由于每个状态的读写都需要做序列化/反序列化，而且可能需要直接从磁盘读取数据，这就会导致性能的降低，平均读写性能要比HashMapStateBackend慢一个数量级"}, :properties {:color "yellow"}} {:id #uuid "6253c2c7-527e-4d19-b814-883cfccc426a", :page 276, :position {:bounding {:x1 121.3521728515625, :y1 842.1235961914062, :x2 244.7244415283203, :y2 861.1235961914062, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 121.3521728515625, :y1 842.1235961914062, :x2 244.7244415283203, :y2 861.1235961914062, :width 705.9999999999999, :height 983.0498559716375}), :page 276}, :content {:text "配置默认的状态后端"}, :properties {:color "yellow"}} {:id #uuid "6253c2cf-37db-4dfb-a980-eae7b8a70754", :page 277, :position {:bounding {:x1 139.8009796142578, :y1 295.1483154296875, :x2 385.69757080078125, :y2 314.8826904296875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 139.8009796142578, :y1 295.1483154296875, :x2 385.69757080078125, :y2 314.8826904296875, :width 705.9999999999999, :height 983.0498559716375}), :page 277}, :content {:text "为每个作业（Per-job）单独配置状态后端"}, :properties {:color "yellow"}} {:id #uuid "6253c325-ebce-4c07-9892-59bad352f709", :page 278, :position {:bounding {:x1 -0.0013364553451538086, :y1 125.23046875, :x2 705.993896484375, :y2 226.1990966796875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.88579559326172, :y1 125.23046875, :x2 705.9657592773438, :y2 144.23046875, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013317465782165527, :y1 145.3709716796875, :x2 705.98828125, :y2 165.0897216796875, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013364553451538086, :y1 165.8553466796875, :x2 705.993896484375, :y2 185.5740966796875, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013336539268493652, :y1 186.3553466796875, :x2 705.9808349609375, :y2 206.0740966796875, :width 705.9999999999999, :height 983.0498559716375} {:x1 66.48297882080078, :y1 207.1990966796875, :x2 94.02715301513672, :y2 226.1990966796875, :width 705.9999999999999, :height 983.0498559716375}), :page 278}, :content {:text "本章从状态的概念和分类出发，详细介绍了Flink中的按键分区状态（Keyed State）和算子状态（Operator  State）的特点和用法，并对广播状态（Broadcast  State）做了进一步的展开说明。最后，我们还介绍了状态的持久化和状态后端，引出了检查点（checkpoint）的概念。检查点是一个非常重要的概念，是Flink容错机制的核心，我们将在下一章继续进行详细的讨论。"}, :properties {:color "yellow"}} {:id #uuid "6253c3a2-7b64-4859-8719-d84f591ab24e", :page 278, :position {:bounding {:x1 -0.006256103515625, :y1 716.452392578125, :x2 866.4937744140625, :y2 806.5751342773438, :width 866.4959999999999, :height 1206.528}, :rects ({:x1 115.2303466796875, :y1 716.452392578125, :x2 866.4937744140625, :y2 738.452392578125, :width 866.4959999999999, :height 1206.528} {:x1 -0.006256103515625, :y1 740.4813842773438, :x2 866.477294921875, :y2 764.7313842773438, :width 866.4959999999999, :height 1206.528} {:x1 -0.00624847412109375, :y1 765.6220092773438, :x2 392.5210266113281, :y2 806.5751342773438, :width 866.4959999999999, :height 1206.528} {:x1 394.61767578125, :y1 766.7470092773438, :x2 478.6361389160156, :y2 788.7470092773438, :width 866.4959999999999, :height 1206.528}), :page 278}, :content {:text "在Flink中，有一套完整的容错机制（fault tolerance）来保证故障后的恢复，其中最重要的就是检查点（checkpoint）。在第九章中，我们已经介绍过检查点的基本概念和用途，接下来我们就深入探讨一下检查点的原理和Flink的容错机制"}, :properties {:color "yellow"}} {:id #uuid "6253c3c4-13e8-4dce-8482-d4879add0889", :page 279, :position {:bounding {:x1 -0.0111236572265625, :y1 426.49700927734375, :x2 793.6175994873047, :y2 474.77825927734375, :width 866.4959999999999, :height 1206.528}, :rects ({:x1 235.56016540527344, :y1 426.49700927734375, :x2 793.6175994873047, :y2 448.49700927734375, :width 866.4959999999999, :height 1206.528} {:x1 -0.0111236572265625, :y1 450.52825927734375, :x2 194.9014434814453, :y2 474.77825927734375, :width 866.4959999999999, :height 1206.528}), :page 279}, :content {:text "将之前某个时间点所有的状态保存下来，这份“存档”就是所谓的“检查点”（checkpoint）"}, :properties {:color "yellow"}} {:id #uuid "6253c3d3-5644-4c9a-9d4c-5cd856d81862", :page 279, :position {:bounding {:x1 -0.01314544677734375, :y1 526.921142578125, :x2 866.4777679443359, :y2 615.6220092773438, :width 866.4959999999999, :height 1206.528}, :rects ({:x1 137.88385009765625, :y1 526.921142578125, :x2 866.4777679443359, :y2 548.921142578125, :width 866.4959999999999, :height 1206.528} {:x1 -0.01314544677734375, :y1 550.9345092773438, :x2 866.4769058227539, :y2 575.1845092773438, :width 866.4959999999999, :height 1206.528} {:x1 -0.01314544677734375, :y1 576.0907592773438, :x2 369.239501953125, :y2 615.6220092773438, :width 866.4959999999999, :height 1206.528} {:x1 293.44732666015625, :y1 577.2157592773438, :x2 531.63427734375, :y2 599.2157592773438, :width 866.4959999999999, :height 1206.528}), :page 279}, :content {:text "检查点是Flink容错机制的核心。这里所谓的“检查”，其实是针对故障恢复的结果而言的：故障恢复之后继续处理的结果，应该与发生故障前完全一致，我们需要“检查”结果的正确性。所以，有时又会把checkpoint叫作“一致性检查点”"}, :properties {:color "yellow"}} {:id #uuid "6253c401-5d88-4cc4-846b-8a045125dd27", :page 279, :position {:bounding {:x1 137.8767547607422, :y1 790.560302734375, :x2 294.9499206542969, :y2 812.560302734375, :width 866.4959999999999, :height 1206.528}, :rects ({:x1 137.8767547607422, :y1 790.560302734375, :x2 156.59803771972656, :y2 812.560302734375, :width 866.4959999999999, :height 1206.528} {:x1 160.15362548828125, :y1 791.4367065429688, :x2 294.9499206542969, :y2 808.4367065429688, :width 866.4959999999999, :height 1206.528}), :page 279}, :content {:text "1. 周期性的触发保存"}, :properties {:color "yellow"}} {:id #uuid "6253c422-52a2-46f4-8d2f-29b3268f30d4", :page 279, :position {:bounding {:x1 137.8767547607422, :y1 1054.5947265625, :x2 261.34539794921875, :y2 1076.5947265625, :width 866.4959999999999, :height 1206.528}, :rects ({:x1 137.8767547607422, :y1 1054.5947265625, :x2 156.59803771972656, :y2 1076.5947265625, :width 866.4959999999999, :height 1206.528} {:x1 160.15524291992188, :y1 1055.47119140625, :x2 261.34539794921875, :y2 1072.47119140625, :width 866.4959999999999, :height 1206.528}), :page 279}, :content {:text "2. 保存的时间点"}, :properties {:color "yellow"}} {:id #uuid "6253c480-d178-4a52-acc8-58602802e6b6", :page 280, :position {:bounding {:x1 -0.0031280517578125, :y1 532.9191284179688, :x2 794.2869262695312, :y2 692.7941284179688, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 272.9730224609375, :y1 532.9191284179688, :x2 699.0264892578125, :y2 552.9191284179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.0031280517578125, :y1 555.117431640625, :x2 794.2816009521484, :y2 577.601806640625, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 578.0910034179688, :x2 794.283374786377, :y2 600.6535034179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.00312042236328125, :y1 601.1535034179688, :x2 794.2734375, :y2 623.7160034179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 624.2160034179688, :x2 794.28125, :y2 646.7785034179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.0031280517578125, :y1 647.2628784179688, :x2 794.2869262695312, :y2 669.8253784179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 670.3253784179688, :x2 691.1937255859375, :y2 692.7941284179688, :width 794.288, :height 1105.9840000000002}), :page 280}, :content {:text "当所有任务都恰好处理完一个相同的输入数据的时候，将它们的状态保存下来。首先，这样避免了除状态之外其他额外信息的存储，提高了检查点保存的效率。其次，一个数据要么就是被所有任务完整地处理完，状态得到了保存；要么就是没处理完，状态全部没保存：这就相当于构建了一个“事务”（transaction）。如果出现故障，我们恢复到之前保存的状态，故障时正在处理的所有数据都需要重新处理；所以我们只需要让源（source）任务向数据源重新提交偏移量、请求重放数据就可以了。这需要源任务可以把偏移量作为算子状态保存下来，而且外部数据源能够重置偏移量；Kafka就是满足这些要求的一个最好的例子"}, :properties {:color "yellow"}} {:id #uuid "6253c497-aa8d-493c-bc92-d1c0de5f6f87", :page 280, :position {:bounding {:x1 105.61083221435547, :y1 724.2479858398438, :x2 234.11221313476562, :y2 744.2479858398438, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 105.61083221435547, :y1 724.2479858398438, :x2 122.77733612060547, :y2 744.2479858398438, :width 794.288, :height 1105.9840000000002} {:x1 126.03694915771484, :y1 726.218017578125, :x2 234.11221313476562, :y2 741.218017578125, :width 794.288, :height 1105.9840000000002}), :page 280}, :content {:text "3. 保存的具体流程"}, :properties {:color "yellow"}} {:id #uuid "6253c6f1-f9f6-4358-b721-1cf31c91debd", :page 282, :position {:bounding {:x1 97.89005279541016, :y1 482.23162841796875, :x2 198.2148895263672, :y2 502.23162841796875, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 97.89005279541016, :y1 482.23162841796875, :x2 198.2148895263672, :y2 502.23162841796875, :width 794.288, :height 1105.9840000000002}), :page 282}, :content {:text "（1）重启应用"}, :properties {:color "yellow"}} {:id #uuid "6253c6f8-249c-4710-867a-fbb1a0ad6cd0", :page 282, :position {:bounding {:x1 97.89005279541016, :y1 713.481201171875, :x2 290.6268310546875, :y2 739.434326171875, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 113.375, :y1 713.481201171875, :x2 122.453125, :y2 739.434326171875, :width 794.288, :height 1105.9840000000002} {:x1 97.89005279541016, :y1 717.746826171875, :x2 290.6268310546875, :y2 737.746826171875, :width 794.288, :height 1105.9840000000002}), :page 282}, :content {:text "（2）读取检查点，重置状态"}, :properties {:color "yellow"}} {:id #uuid "6253c6fe-1da7-4a89-8451-9a520516267a", :page 283, :position {:bounding {:x1 118.6532974243164, :y1 408.965576171875, :x2 218.9961395263672, :y2 434.918701171875, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 134.140625, :y1 408.965576171875, :x2 143.21875, :y2 434.918701171875, :width 794.288, :height 1105.9840000000002} {:x1 118.6532974243164, :y1 413.231201171875, :x2 218.9961395263672, :y2 433.231201171875, :width 794.288, :height 1105.9840000000002}), :page 283}, :content {:text "（3）重放数据"}, :properties {:color "yellow"}} {:id #uuid "6253c703-5b6d-4123-9851-7d8dff3bf72a", :page 283, :position {:bounding {:x1 118.6532974243164, :y1 786.4133911132812, :x2 249.81048583984375, :y2 806.4133911132812, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 118.6532974243164, :y1 786.4133911132812, :x2 249.81048583984375, :y2 806.4133911132812, :width 794.288, :height 1105.9840000000002}), :page 283}, :content {:text "（4）继续处理数据"}, :properties {:color "yellow"}} {:id #uuid "6253c800-8cff-46af-8feb-25456e037129", :page 284, :position {:bounding {:x1 -0.00312042236328125, :y1 901.1847534179688, :x2 794.2697143554688, :y2 949.0128784179688, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 645.0465087890625, :y1 901.1847534179688, :x2 794.2697143554688, :y2 921.1847534179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.00312042236328125, :y1 923.4503784179688, :x2 294.5452880859375, :y2 949.0128784179688, :width 794.288, :height 1105.9840000000002} {:x1 186.57696533203125, :y1 924.2316284179688, :x2 419.8025207519531, :y2 944.2316284179688, :width 794.288, :height 1105.9840000000002}), :page 284}, :content {:text "在Flink中，采用了基于Chandy-Lamport算法的分布式快照"}, :properties {:color "yellow"}} {:id #uuid "6253c82b-1bd1-4111-a5d8-ad5cad0161da", :page 284, :position {:bounding {:x1 105.61083221435547, :y1 949.5120849609375, :x2 794.2669067382812, :y2 978.3870849609375, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 124.41922760009766, :y1 949.5120849609375, :x2 280.2457046508789, :y2 978.3870849609375, :width 794.288, :height 1105.9840000000002} {:x1 105.61083221435547, :y1 954.3233032226562, :x2 122.77733612060547, :y2 974.3233032226562, :width 794.288, :height 1105.9840000000002} {:x1 234.09375, :y1 954.328125, :x2 794.2669067382812, :y2 975.390625, :width 794.288, :height 1105.9840000000002} {:x1 280.25, :y1 956.2933349609375, :x2 297.25, :y2 971.2933349609375, :width 794.288, :height 1105.9840000000002}), :page 284}, :content {:text "1. 检查点分界线（Barrier）"}, :properties {:color "yellow"}} {:id #uuid "6253ca07-1a2b-492e-b579-1c0fca818e3c", :page 286, :position {:bounding {:x1 -0.0031280517578125, :y1 -0.00830078125, :x2 794.2872924804688, :y2 276.54412841796875, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 309.1123962402344, :y1 -0.00830078125, :x2 794.2686157226562, :y2 140.06982421875, :width 794.288, :height 1105.9840000000002} {:x1 105.61148834228516, :y1 118.38232421875, :x2 599.5775756835938, :y2 138.38232421875, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 140.56964111328125, :x2 794.2810668945312, :y2 163.03839111328125, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 163.54412841796875, :x2 794.2611083984375, :y2 186.10662841796875, :width 794.288, :height 1105.9840000000002} {:x1 -0.0031280517578125, :y1 186.60662841796875, :x2 794.2872924804688, :y2 209.16912841796875, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 209.65350341796875, :x2 794.2589111328125, :y2 232.21600341796875, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 232.71600341796875, :x2 794.283374786377, :y2 255.27850341796875, :width 794.288, :height 1105.9840000000002} {:x1 74.79441833496094, :y1 256.54412841796875, :x2 568.1127777099609, :y2 276.54412841796875, :width 794.288, :height 1105.9840000000002}), :page 286}, :content {:text "每个算子任务只要处理到这个barrier，就把当前的状态进行快照；在收到barrier之前，还是正常地处理之前的数据，完全不受影响。比如上图中，Source任务收到1号检查点保存指令时，读取完了三个数据，所以将偏移量3保存到外部存储中；而后将ID为1的barrier注入数据流；与此同时，Map任务刚刚收到上一条数据“hello”，而Sum任务则还在处理之前的第二条数据(world,  1)。下游任务不会在这时就立刻保存状态，而是等收到barrier时才去做快照，这时可以保证前三个数据都已经处理完了。同样地，下游任务做状态快照时，也不会影响上游任务的处理，每个任务的快照保存并行不悖，不会有暂停等待的时间"}, :properties {:color "yellow"}} {:id #uuid "6253ca11-0281-4d46-8390-8be817ed9eb7", :page 286, :position {:bounding {:x1 105.61083221435547, :y1 355.8580017089844, :x2 234.11221313476562, :y2 375.8580017089844, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 105.61083221435547, :y1 355.8580017089844, :x2 122.77733612060547, :y2 375.8580017089844, :width 794.288, :height 1105.9840000000002} {:x1 126.03694915771484, :y1 357.827392578125, :x2 234.11221313476562, :y2 372.827392578125, :width 794.288, :height 1105.9840000000002}), :page 286}, :content {:text "2. 分布式快照算法"}, :properties {:color "yellow"}} {:id #uuid "6253ca50-fae3-44e3-89d6-d9b3a6b980d7", :page 286, :position {:bounding {:x1 -0.009124755859375, :y1 613.7316284179688, :x2 794.2784423828125, :y2 727.5597534179688, :width 794.288, :height 1105.9840000000002}, :rects ({:x1 198.203125, :y1 613.7316284179688, :x2 794.2784423828125, :y2 633.7316284179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.009124755859375, :y1 635.9972534179688, :x2 794.2636108398438, :y2 658.4660034179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 658.9758911132812, :x2 794.2764282226562, :y2 681.4446411132812, :width 794.288, :height 1105.9840000000002} {:x1 -0.003124237060546875, :y1 681.9347534179688, :x2 794.2781982421875, :y2 704.4972534179688, :width 794.288, :height 1105.9840000000002} {:x1 -0.0031280517578125, :y1 704.9972534179688, :x2 354.78253173828125, :y2 727.5597534179688, :width 794.288, :height 1105.9840000000002}), :page 286}, :content {:text "Flink使用了Chandy-Lamport算法的一种变体，被称为“异步分界线快照”（asynchronous barrier snapshotting）算法。算法的核心就是两个原则：当上游任务向多个并行下游任务发送barrier时，需要广播出去；而当多个上游任务向同一个下游任务传递barrier时，需要在下游任务执行“分界线对齐”（barrier alignment）操作，也就是需要等到所有并行分区的barrier都到齐，才可以开始状态的保存"}, :properties {:color "yellow"}} {:id #uuid "6253ca73-f5ca-495b-a05f-de3fc986638e", :page 286, :position {:bounding {:x1 67, :y1 714, :x2 639, :y2 926, :width 722.0799999999999, :height 1005.44}, :rects (), :page 286}, :content {:text "[:span]", :image 1649658491323}, :properties {:color "yellow"}} {:id #uuid "6253d0cd-4da5-4e96-a132-185c46e2d989", :page 289, :position {:bounding {:x1 -0.0057525634765625, :y1 647.4193725585938, :x2 722.0677490234375, :y2 750.1381225585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90267944335938, :y1 647.4193725585938, :x2 654.3551940917969, :y2 666.4193725585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.0057506561279296875, :y1 667.8587646484375, :x2 722.0677490234375, :y2 688.6556396484375, :width 722.0799999999999, :height 1005.44} {:x1 -0.0057525634765625, :y1 688.7474975585938, :x2 722.0604248046875, :y2 709.6381225585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.0057468414306640625, :y1 709.7274780273438, :x2 722.047607421875, :y2 730.6181030273438, :width 722.0799999999999, :height 1005.44} {:x1 86.89580535888672, :y1 731.1381225585938, :x2 311.1568832397461, :y2 750.1381225585938, :width 722.0799999999999, :height 1005.44}), :page 289}, :content {:text "由于分界线对齐要求先到达的分区做缓存等待，一定程度上会影响处理的速度；当出现背压（backpressure）时，下游任务会堆积大量的缓冲数据，检查点可能需要很久才可以保存完毕。为了应对这种场景，Flink 1.11之后提供了不对齐的检查点保存方式，可以将未处理的缓冲数据（in-flight data）也保存进检查点。这样，当我们遇到一个分区barrier时就不需等待对齐，而是可以直接启动状态的保存了"}, :properties {:color "yellow"}} {:id #uuid "6253d102-3da8-49b9-87e9-11d132a46ca5", :page 289, :position {:bounding {:x1 86.90373992919922, :y1 818.4880981445312, :x2 654.3551940917969, :y2 858.4662475585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90267944335938, :y1 818.4880981445312, :x2 654.3551940917969, :y2 837.4880981445312, :width 722.0799999999999, :height 1005.44} {:x1 86.90373992919922, :y1 839.4662475585938, :x2 619.3856735229492, :y2 858.4662475585938, :width 722.0799999999999, :height 1005.44}), :page 289}, :content {:text "检查点的作用是为了故障恢复，我们不能因为保存检查点占据了大量时间、导致数据处理性能明显降低。为了兼顾容错性和处理性能，我们可以在代码中对检查点进行各种配置"}, :properties {:color "yellow"}} {:id #uuid "6253d162-7dc3-410e-a931-449605c8a7c4", :page 290, :position {:bounding {:x1 96.0234375, :y1 304.6199951171875, :x2 722.078369140625, :y2 331.2606201171875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 113.09844207763672, :y1 304.6199951171875, :x2 321.79369354248047, :y2 331.2606201171875, :width 722.0799999999999, :height 1005.44} {:x1 96.0234375, :y1 308.8218994140625, :x2 111.62409210205078, :y2 327.8218994140625, :width 722.0799999999999, :height 1005.44} {:x1 198.734375, :y1 308.828125, :x2 722.078369140625, :y2 328.265625, :width 722.0799999999999, :height 1005.44} {:x1 321.8125, :y1 310.8856201171875, :x2 335.8125, :y2 324.8856201171875, :width 722.0799999999999, :height 1005.44}), :page 290}, :content {:text "2. 检查点存储（Checkpoint Storage）"}, :properties {:color "yellow"}} {:id #uuid "6253d16b-16f5-4efb-babd-7ba92cb7d28d", :page 289, :position {:bounding {:x1 114.90262603759766, :y1 866.9539794921875, :x2 203.69512939453125, :y2 885.9539794921875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90262603759766, :y1 866.9539794921875, :x2 130.50328063964844, :y2 885.9539794921875, :width 722.0799999999999, :height 1005.44} {:x1 133.45001220703125, :y1 869.0176391601562, :x2 203.69512939453125, :y2 883.0176391601562, :width 722.0799999999999, :height 1005.44}), :page 289}, :content {:text "1. 启用检查点"}, :properties {:color "yellow"}} {:id #uuid "6253d183-d524-44d0-b73f-a4735823b34a", :page 290, :position {:bounding {:x1 -0.00687408447265625, :y1 417.63812255859375, :x2 722.0740966796875, :y2 458.26312255859375, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 250.44790649414062, :y1 417.63812255859375, :x2 722.0740966796875, :y2 436.63812255859375, :width 722.0799999999999, :height 1005.44} {:x1 -0.00687408447265625, :y1 438.15374755859375, :x2 534.171875, :y2 458.26312255859375, :width 722.0799999999999, :height 1005.44}), :page 290}, :content {:text "Flink主要提供了两种CheckpointStorage：作业管理器的堆内存（JobManagerCheckpointStorage）和文件系统（FileSystemCheckpointStorage）"}, :properties {:color "yellow"}} {:id #uuid "6253d18c-4f3e-4244-aaf9-8b1f3867d2a2", :page 290, :position {:bounding {:x1 -0.00687408447265625, :y1 563.41259765625, :x2 722.080078125, :y2 608.0912475585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.02247619628906, :y1 563.41259765625, :x2 722.080078125, :y2 582.41259765625, :width 722.0799999999999, :height 1005.44} {:x1 -0.00687408447265625, :y1 583.9349975585938, :x2 141.3842010498047, :y2 608.0912475585938, :width 722.0799999999999, :height 1005.44} {:x1 60.946250915527344, :y1 584.3724975585938, :x2 166.58880615234375, :y2 603.3724975585938, :width 722.0799999999999, :height 1005.44}), :page 290}, :content {:text "对于实际生产应用，我们一般会将CheckpointStorage配置为高可用的分布式文件系统（HDFS，S3等）"}, :properties {:color "yellow"}} {:id #uuid "6253d1a7-a016-430a-916b-dad141b0fa76", :page 290, :position {:bounding {:x1 96.0234375, :y1 611.905029296875, :x2 198.8979949951172, :y2 630.905029296875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.0234375, :y1 611.905029296875, :x2 111.62409210205078, :y2 630.905029296875, :width 722.0799999999999, :height 1005.44} {:x1 114.5728759765625, :y1 613.9680786132812, :x2 198.8979949951172, :y2 627.9680786132812, :width 722.0799999999999, :height 1005.44}), :page 290}, :content {:text "3. 其他高级配置"}, :properties {:color "yellow"}} {:id #uuid "6253d1b6-4441-4036-a0a9-f6e6ccffaf17", :page 290, :position {:bounding {:x1 96.03050231933594, :y1 718.4981079101562, :x2 343.89776611328125, :y2 739.5293579101562, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.03050231933594, :y1 718.4981079101562, :x2 343.89776611328125, :y2 739.5293579101562, :width 722.0799999999999, :height 1005.44}), :page 290}, :content {:text "（1）检查点模式（CheckpointingMode）"}, :properties {:color "yellow"}} {:id #uuid "6253d1bb-f4dd-4d09-a30e-00dc89ea59fd", :page 290, :position {:bounding {:x1 96.03050231933594, :y1 802.6525268554688, :x2 325.359375, :y2 823.7619018554688, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.03050231933594, :y1 802.6525268554688, :x2 325.359375, :y2 823.7619018554688, :width 722.0799999999999, :height 1005.44}), :page 290}, :content {:text "（2）超时时间（checkpointTimeout）"}, :properties {:color "yellow"}} {:id #uuid "6253d1c2-672e-4010-93d2-a24a6130297f", :page 290, :position {:bounding {:x1 96.03050231933594, :y1 865.8582763671875, :x2 418.171875, :y2 886.9676513671875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.03050231933594, :y1 865.8582763671875, :x2 418.171875, :y2 886.9676513671875, :width 722.0799999999999, :height 1005.44}), :page 290}, :content {:text "（3）最小间隔时间（minPauseBetweenCheckpoints）"}, :properties {:color "yellow"}} {:id #uuid "6253d1dd-3797-40dd-b329-55e42f9a5799", :page 291, :position {:bounding {:x1 114.90049743652344, :y1 150.5587158203125, :x2 461.21875, :y2 171.6680908203125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90049743652344, :y1 150.5587158203125, :x2 461.21875, :y2 171.6680908203125, :width 722.0799999999999, :height 1005.44}), :page 291}, :content {:text "（4）最大并发检查点数量（maxConcurrentCheckpoints）"}, :properties {:color "yellow"}} {:id #uuid "6253d1e5-7438-4c5d-82e2-cef501baf7e8", :page 291, :position {:bounding {:x1 114.90049743652344, :y1 276.6368408203125, :x2 481.375, :y2 297.6837158203125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90049743652344, :y1 276.6368408203125, :x2 481.375, :y2 297.6837158203125, :width 722.0799999999999, :height 1005.44}), :page 291}, :content {:text "（5）开启外部持久化存储（enableExternalizedCheckpoints）"}, :properties {:color "yellow"}} {:id #uuid "6253d1f7-88ed-425a-a684-12488ea164e4", :page 291, :position {:bounding {:x1 114.90049743652344, :y1 423.5587158203125, :x2 536.90625, :y2 444.5899658203125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90049743652344, :y1 423.5587158203125, :x2 536.90625, :y2 444.5899658203125, :width 722.0799999999999, :height 1005.44}), :page 291}, :content {:text "（6）检查点异常时是否让整个任务失败（failOnCheckpointingErrors）"}, :properties {:color "yellow"}} {:id #uuid "6253d202-6631-4c11-b1a0-972bf644234f", :page 291, :position {:bounding {:x1 114.90049743652344, :y1 486.7462463378906, :x2 427.78125, :y2 507.7931213378906, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90049743652344, :y1 486.7462463378906, :x2 427.78125, :y2 507.7931213378906, :width 722.0799999999999, :height 1005.44}), :page 291}, :content {:text "（7）不对齐检查点（enableUnalignedCheckpoints）"}, :properties {:color "yellow"}} {:id #uuid "6253d349-11b7-4bc7-9ec9-398a2721477f", :page 292, :position {:bounding {:x1 67.99832153320312, :y1 153.911376953125, :x2 288.5431823730469, :y2 199.255126953125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 106.40203857421875, :y1 153.911376953125, :x2 271.142822265625, :y2 199.255126953125, :width 722.0799999999999, :height 1005.44} {:x1 67.99832153320312, :y1 167.348876953125, :x2 106.40521240234375, :y2 190.348876953125, :width 722.0799999999999, :height 1005.44} {:x1 124.81571197509766, :y1 167.348876953125, :x2 288.5431823730469, :y2 190.348876953125, :width 722.0799999999999, :height 1005.44}), :page 292}, :content {:text "10.1.5保存点（Savepoint）"}, :properties {:color "yellow"}} {:id #uuid "6253d361-6ab0-4dd1-8191-35fc63a2859f", :page 292, :position {:bounding {:x1 -0.000003814700903603807, :y1 250.2337646484375, :x2 722.0732387280475, :y2 312.6181335449219, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 372.56536865234375, :y1 250.2337646484375, :x2 635.2951049804688, :y2 269.2337646484375, :width 722.0799999999999, :height 1005.44} {:x1 -0.0000034594525004649768, :y1 270.74749755859375, :x2 722.0732387280475, :y2 291.63812255859375, :width 722.0799999999999, :height 1005.44} {:x1 -0.000003814700903603807, :y1 291.7275085449219, :x2 217.849853515625, :y2 312.6181335449219, :width 722.0799999999999, :height 1005.44}), :page 292}, :content {:text "它的原理和算法与检查点完全相同，只是多了一些额外的元数据。事实上，保存点就是通过检查点的机制来创建流式作业状态的一致性镜像（consistentimage）的"}, :properties {:color "yellow"}} {:id #uuid "6253d386-62d9-4951-aa82-7154ca232df0", :page 292, :position {:bounding {:x1 3.9111256455726107e-7, :y1 386.59124755859375, :x2 722.0805053710938, :y2 447.51312255859375, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 385.5261535644531, :y1 386.59124755859375, :x2 722.0805053710938, :y2 405.59124755859375, :width 722.0799999999999, :height 1005.44} {:x1 3.9111256455726107e-7, :y1 407.12249755859375, :x2 722.057739648925, :y2 427.99749755859375, :width 722.0799999999999, :height 1005.44} {:x1 67.99433898925781, :y1 428.51312255859375, :x2 275.6020812988281, :y2 447.51312255859375, :width 722.0799999999999, :height 1005.44}), :page 292}, :content {:text "检查点是由Flink自动管理的，定期创建，发生故障之后自动读取进行恢复，这是一个“自动存盘”的功能；而保存点不会自动创建，必须由用户明确地手动触发保存操作"}, :properties {:color "yellow"}} {:id #uuid "6253d39d-c199-495c-bf3f-8ac9f83c52b1", :page 292, :position {:bounding {:x1 67.99749755859375, :y1 449.46624755859375, :x2 635.4483032226562, :y2 489.2806396484375, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 164.86361694335938, :y1 449.46624755859375, :x2 635.4483032226562, :y2 468.46624755859375, :width 722.0799999999999, :height 1005.44} {:x1 67.99749755859375, :y1 470.2806396484375, :x2 250.325439453125, :y2 489.2806396484375, :width 722.0799999999999, :height 1005.44}), :page 292}, :content {:text "检查点主要用来做故障恢复，是容错机制的核心；保存点则更加灵活，可以用来做有计划的手动备份和恢复"}, :properties {:color "yellow"}} {:id #uuid "6253dbf4-c9ac-492c-855d-33517d808b9e", :page 295, :position {:bounding {:x1 -0.005752000026404858, :y1 551.0912475585938, :x2 722.0579833984375, :y2 634.2631225585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 142.5452880859375, :y1 551.0912475585938, :x2 654.1638793945312, :y2 570.0912475585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.00574709614738822, :y1 571.5462646484375, :x2 722.056396484375, :y2 592.3431396484375, :width 722.0799999999999, :height 1005.44} {:x1 -0.005752000026404858, :y1 592.4193725585938, :x2 722.0579833984375, :y2 613.2943725585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.005751525983214378, :y1 613.3881225585938, :x2 578.5380401611328, :y2 634.2631225585938, :width 722.0799999999999, :height 1005.44}), :page 295}, :content {:text "完整的流处理应用，应该包括了数据源、流处理器和外部存储系统三个部分。这个完整应用的一致性，就叫作“端到端（end-to-end）的状态一致性”，它取决于三个组件中最弱的那一环。一般来说，能否达到at-least-once一致性级别，主要看数据源能够重放数据；而能否达到exactly-once级别，流处理器内部、数据源、外部存储都要有相应的保证机制"}, :properties {:color "yellow"}} {:id #uuid "6253e4da-412f-4bc3-b483-4aba689f82fd", :page 296, :position {:bounding {:x1 -0.000002336292482141289, :y1 366.59124755859375, :x2 722.0741577148438, :y2 441.51312255859375, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.0232925415039, :y1 366.59124755859375, :x2 722.0490112304688, :y2 385.59124755859375, :width 722.0799999999999, :height 1005.44} {:x1 0.0000024986291009554407, :y1 387.0306396484375, :x2 722.0741577148438, :y2 407.8275146484375, :width 722.0799999999999, :height 1005.44} {:x1 -0.000002336292482141289, :y1 407.91937255859375, :x2 270.8818664550781, :y2 441.51312255859375, :width 722.0799999999999, :height 1005.44} {:x1 197.61253356933594, :y1 408.35687255859375, :x2 342.6766662597656, :y2 427.35687255859375, :width 722.0799999999999, :height 1005.44}), :page 296}, :content {:text "数据源可重放数据，或者说可重置读取数据偏移量，加上Flink的Source算子将偏移量作为状态保存进检查点，就可以保证数据不丢。这是达到at-least-once一致性语义的基本要求，当然也是实现端到端exactly-once的基本要求"}, :properties {:color "yellow"}} {:id #uuid "6253e518-fdc7-4c16-b4fa-eba861488a06", :page 296, :position {:bounding {:x1 96.0234375, :y1 792.0774536132812, :x2 722.0669555664062, :y2 818.7805786132812, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 113.09844207763672, :y1 792.0774536132812, :x2 226.0841522216797, :y2 818.7805786132812, :width 722.0799999999999, :height 1005.44} {:x1 96.0234375, :y1 796.2637939453125, :x2 111.62409210205078, :y2 815.2637939453125, :width 722.0799999999999, :height 1005.44} {:x1 156.8125, :y1 796.265625, :x2 722.0669555664062, :y2 815.78125, :width 722.0799999999999, :height 1005.44} {:x1 226.09375, :y1 798.3274536132812, :x2 267.853759765625, :y2 812.3274536132812, :width 722.0799999999999, :height 1005.44}), :page 296}, :content {:text "1. 幂等（idempotent）写入"}, :properties {:color "yellow"}} {:id #uuid "6253e52b-55a7-4546-a779-94d8cbc5094c", :page 297, :position {:bounding {:x1 114.90262603759766, :y1 277.09307861328125, :x2 297.17669677734375, :y2 303.81182861328125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 131.97610473632812, :y1 277.09307861328125, :x2 255.03370666503906, :y2 303.81182861328125, :width 722.0799999999999, :height 1005.44} {:x1 114.90262603759766, :y1 281.2794189453125, :x2 130.50328063964844, :y2 300.2794189453125, :width 722.0799999999999, :height 1005.44} {:x1 175.703125, :y1 281.2794189453125, :x2 254.9764862060547, :y2 300.2794189453125, :width 722.0799999999999, :height 1005.44} {:x1 133.4375457763672, :y1 283.34307861328125, :x2 175.6775360107422, :y2 297.34307861328125, :width 722.0799999999999, :height 1005.44} {:x1 255.09158325195312, :y1 283.34307861328125, :x2 297.17669677734375, :y2 297.34307861328125, :width 722.0799999999999, :height 1005.44}), :page 297}, :content {:text "2. 事务（transactional）写入"}, :properties {:color "yellow"}} {:id #uuid "6253e569-7989-4dc3-beeb-7d2bfc0bd1a6", :page 297, :position {:bounding {:x1 -0.005752657074481249, :y1 170.07562255859375, :x2 722.0698729888536, :y2 272.7493896484375, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90267944335938, :y1 170.07562255859375, :x2 654.3551940917969, :y2 189.07562255859375, :width 722.0799999999999, :height 1005.44} {:x1 -0.0057495697401463985, :y1 190.59124755859375, :x2 722.0698729888536, :y2 211.46624755859375, :width 722.0799999999999, :height 1005.44} {:x1 -0.005752657074481249, :y1 211.55999755859375, :x2 722.0521086710505, :y2 232.43499755859375, :width 722.0799999999999, :height 1005.44} {:x1 -0.005752657074481249, :y1 232.51312255859375, :x2 722.0521086710505, :y2 253.30999755859375, :width 722.0799999999999, :height 1005.44} {:x1 86.89076232910156, :y1 253.7493896484375, :x2 255.14480590820312, :y2 272.7493896484375, :width 722.0799999999999, :height 1005.44}), :page 297}, :content {:text "需要注意，对于幂等写入，遇到故障进行恢复时，有可能会出现短暂的不一致。因为保存点完成之后到发生故障之间的数据，其实已经写入了一遍，回滚的时候并不能消除它们。如果有一个外部应用读取写入的数据，可能会看到奇怪的现象：短时间内，结果会突然“跳回”到之前的某个值，然后“重播”一段之前的数据。不过当数据的重放逐渐超过发生故障的点的时候，最终的结果还是一致的"}, :properties {:color "yellow"}} {:id #uuid "6253e59c-516e-4368-9fcf-c585a7ccf4ae", :page 297, :position {:bounding {:x1 -0.005751525983214378, :y1 411.07562255859375, :x2 722.078125, :y2 452.46624755859375, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 402.6889953613281, :y1 411.07562255859375, :x2 722.078125, :y2 430.07562255859375, :width 722.0799999999999, :height 1005.44} {:x1 -0.005751525983214378, :y1 431.59124755859375, :x2 602.2577514648438, :y2 452.46624755859375, :width 722.0799999999999, :height 1005.44}), :page 297}, :content {:text "事务有四个基本特性：原子性(Atomicity)、一致性(Correspondence)、隔离性(Isolation)和持久性(Durability)，这就是著名的ACID"}, :properties {:color "yellow"}} {:id #uuid "6253e5c6-bb64-4b72-bfe9-cd78f359e346", :page 297, :position {:bounding {:x1 -0.005752657074481249, :y1 473.7962646484375, :x2 722.0648681051098, :y2 597.6224975585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 493.2418518066406, :y1 473.7962646484375, :x2 661.394775390625, :y2 492.7962646484375, :width 722.0799999999999, :height 1005.44} {:x1 -0.005748089402914047, :y1 494.327880859375, :x2 722.0567016601562, :y2 515.2185668945312, :width 722.0799999999999, :height 1005.44} {:x1 -0.005751525983214378, :y1 515.2943725585938, :x2 722.0577545166016, :y2 536.1693725585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.005752657074481249, :y1 536.2631225585938, :x2 722.0521086710505, :y2 557.1381225585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.005749570671468973, :y1 557.2162475585938, :x2 722.0648681051098, :y2 578.0912475585938, :width 722.0799999999999, :height 1005.44} {:x1 86.90454864501953, :y1 578.6224975585938, :x2 402.36914825439453, :y2 597.6224975585938, :width 722.0799999999999, :height 1005.44}), :page 297}, :content {:text "事务写入的基本思想就是：用一个事务来进行数据向外部系统的写入，这个事务是与检查点绑定在一起的。当Sink任务遇到barrier时，开始保存状态的同时就开启一个事务，接下来所有数据的写入都在这个事务中；待到当前检查点保存完毕时，将事务提交，所有写入的数据就真正可用了。如果中间过程出现故障，状态会回退到上一个检查点，而当前事务没有正常关闭（因为当前检查点没有保存完），所以也会回滚，写入到外部的数据就被撤销了"}, :properties {:color "yellow"}} {:id #uuid "6253e60f-c373-4f39-909c-d0c9a83f423f", :page 297, :position {:bounding {:x1 86.90049743652344, :y1 641.3412475585938, :x2 661.2355804443359, :y2 681.2943725585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.89982604980469, :y1 641.3412475585938, :x2 661.2355804443359, :y2 660.3412475585938, :width 722.0799999999999, :height 1005.44} {:x1 86.90049743652344, :y1 662.2943725585938, :x2 437.26268005371094, :y2 681.2943725585938, :width 722.0799999999999, :height 1005.44}), :page 297}, :content {:text "我们发现，事务提交是需要外部存储系统支持事务的，否则没有办法真正实现写入的回撤。那对于一般不支持事务的存储系统，能够实现事务写入呢"}, :properties {:color "yellow"}} {:id #uuid "6253e687-4ba8-422a-b07a-cdbd22aa3d97", :page 297, :position {:bounding {:x1 -0.005752953235059977, :y1 766.9818725585938, :x2 722.0699916756712, :y2 850.2162475585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90267944335938, :y1 766.9818725585938, :x2 654.3551940917969, :y2 785.9818725585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.005752953235059977, :y1 787.4974975585938, :x2 722.0699916756712, :y2 808.3724975585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.005751240532845259, :y1 808.4662475585938, :x2 722.0613403320312, :y2 829.3412475585938, :width 722.0799999999999, :height 1005.44} {:x1 -0.005750821437686682, :y1 829.4193725585938, :x2 435.0466613769531, :y2 850.2162475585938, :width 722.0799999999999, :height 1005.44}), :page 297}, :content {:text "我们会发现，这种方式类似于检查点完成时做一个批处理，一次性的写入会带来一些性能上的问题；而优点就是比较简单，由于数据提前在状态后端中做了缓存，所以无论什么外部存储系统，理论上都能用这种方式一批搞定。在Flink中DataStream  API提供了一个模板类GenericWriteAheadSink，用来实现这种事务型的写入方式"}, :properties {:color "yellow"}} {:id #uuid "6253e6d2-dc5d-423c-b00c-3b775b2cb914", :page 298, :position {:bounding {:x1 67.98606872558594, :y1 274.71624755859375, :x2 635.4799194335938, :y2 314.7119140625, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 234.34426879882812, :y1 274.71624755859375, :x2 635.4799194335938, :y2 293.71624755859375, :width 722.0799999999999, :height 1005.44} {:x1 67.98606872558594, :y1 295.7119140625, :x2 460.4419403076172, :y2 314.7119140625, :width 722.0799999999999, :height 1005.44}), :page 298}, :content {:text "分成两个阶段：先做“预提交”，等检查点完成之后再正式提交。这种提交方式是真正基于事务的，它需要外部系统提供事务支持"}, :properties {:color "yellow"}} {:id #uuid "6253e764-25db-4e5c-8b89-342e425cb1c0", :page 298, :position {:bounding {:x1 0.0000027160670015291544, :y1 525.9818725585938, :x2 722.078125, :y2 567.3724975585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 351.7262268066406, :y1 525.9818725585938, :x2 722.078125, :y2 544.9818725585938, :width 722.0799999999999, :height 1005.44} {:x1 0.0000027160670015291544, :y1 546.4974975585938, :x2 524.9318389892578, :y2 567.3724975585938, :width 722.0799999999999, :height 1005.44}), :page 298}, :content {:text "2PC协议不仅真正意义上实现了exactly-once，而且通过搭载Flink的检查点机制来实现事务，只给系统增加了很少的开销"}, :properties {:color "yellow"}} {:id #uuid "6253e76e-09aa-476d-92d0-165c2b0536ae", :page 298, :position {:bounding {:x1 6.006113153489423e-7, :y1 567.9037475585938, :x2 722.0643920898438, :y2 609.2943725585938, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 103.09297180175781, :y1 567.9037475585938, :x2 722.0643920898438, :y2 586.9037475585938, :width 722.0799999999999, :height 1005.44} {:x1 6.006113153489423e-7, :y1 588.4193725585938, :x2 435.8341369628906, :y2 609.2943725585938, :width 722.0799999999999, :height 1005.44}), :page 298}, :content {:text "link提供了TwoPhaseCommitSinkFunction接口，方便我们自定义实现两阶段提交的SinkFunction的实现，提供了真正端到端的exactly-once保证"}, :properties {:color "yellow"}} {:id #uuid "6253e819-82c3-4bd8-afd5-2f3df41540e6", :page 298, :position {:bounding {:x1 67.99642944335938, :y1 801.0556030273438, :x2 722.0766754150391, :y2 840.8587646484375, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.03059387207031, :y1 801.0556030273438, :x2 722.0766754150391, :y2 821.3681030273438, :width 722.0799999999999, :height 1005.44} {:x1 67.99642944335938, :y1 821.8587646484375, :x2 264.2542724609375, :y2 840.8587646484375, :width 722.0799999999999, :height 1005.44}), :page 298}, :content {:text "可见，2PC在实际应用同样会受到比较大的限制。具体在项目中的选型，最终还应该是一致性级别和处理性能的权衡考量"}, :properties {:color "yellow"}} {:id #uuid "6253eaef-770f-4ec0-8bfc-d0fde64b11d3", :page 298, :position {:bounding {:x1 67.98812866210938, :y1 855.0926513671875, :x2 405.3935241699219, :y2 900.1707763671875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 159.67616271972656, :y1 855.0926513671875, :x2 230.00022888183594, :y2 900.1707763671875, :width 722.0799999999999, :height 1005.44} {:x1 67.98812866210938, :y1 868.2489013671875, :x2 157.41912841796875, :y2 891.2489013671875, :width 722.0799999999999, :height 1005.44} {:x1 232.166259765625, :y1 868.2489013671875, :x2 405.3935241699219, :y2 891.2489013671875, :width 722.0799999999999, :height 1005.44}), :page 298}, :content {:text "10.3.3 Flink和Kafka连接时的精确一次保证"}, :properties {:color "yellow"}} {:id #uuid "6255138a-7c0d-41d5-97d5-7564d310dd77", :page 309, :position {:bounding {:x1 -0.005752657074481249, :y1 806.3831176757812, :x2 722.0743408203125, :y2 925.7890014648438, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 377.9823913574219, :y1 806.3831176757812, :x2 722.0743408203125, :y2 831.0081176757812, :width 722.0799999999999, :height 1005.44} {:x1 114.89481353759766, :y1 809.6956176757812, :x2 654.1887817382812, :y2 828.6956176757812, :width 722.0799999999999, :height 1005.44} {:x1 -0.00574751291424036, :y1 831.1018676757812, :x2 722.0650634765625, :y2 853.6487426757812, :width 722.0799999999999, :height 1005.44} {:x1 -0.005752657074481249, :y1 853.744384765625, :x2 722.0521086710505, :y2 876.291259765625, :width 722.0799999999999, :height 1005.44} {:x1 -0.005747852381318808, :y1 876.3858032226562, :x2 722.0625504874624, :y2 899.0264282226562, :width 722.0799999999999, :height 1005.44} {:x1 -0.0057524717412889, :y1 899.1171264648438, :x2 266.59942626953125, :y2 925.7890014648438, :width 722.0799999999999, :height 1005.44} {:x1 86.89533233642578, :y1 900.4452514648438, :x2 364.7752990722656, :y2 919.4452514648438, :width 722.0799999999999, :height 1005.44}), :page 309}, :content {:text "最直观的创建表的方式，就是通过连接器（connector）连接到一个外部系统，然后定义出对应的表结构。例如我们可以连接到Kafka或者文件系统，将存储在这些外部系统的数据以“表”的形式定义出来，这样对表的读写就可以通过连接器转换成对外部系统的读写了。当我们在表环境中读取这张表，连接器就会从外部系统读取数据并进行转换；而当我们向这张表写入数据，连接器就会将数据输出（Sink）到外部系统中"}, :properties {:color "yellow"}} {:id #uuid "6255158a-a6ef-4264-b231-3def7889e51d", :page 311, :position {:bounding {:x1 -0.005750903394073248, :y1 149.5518798828125, :x2 722.0709838867188, :y2 203.61749267578125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 549.203125, :y1 149.5518798828125, :x2 722.0709838867188, :y2 180.9737548828125, :width 722.0799999999999, :height 1005.44} {:x1 437.2340087890625, :y1 159.6612548828125, :x2 654.3764038085938, :y2 178.6612548828125, :width 722.0799999999999, :height 1005.44} {:x1 -0.005750903394073248, :y1 181.07061767578125, :x2 327.63385009765625, :y2 203.61749267578125, :width 722.0799999999999, :height 1005.44}), :page 311}, :content {:text "对一个表的查询（Query）操作，就对应着流数据的转换（Transform）处理"}, :properties {:color "yellow"}} {:id #uuid "625515ad-2cc6-4101-9ee6-c737a55a0cb3", :page 311, :position {:bounding {:x1 114.90262603759766, :y1 229.1662139892578, :x2 252.81976318359375, :y2 257.54119873046875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 131.97610473632812, :y1 229.1662139892578, :x2 194.95541381835938, :y2 257.54119873046875, :width 722.0799999999999, :height 1005.44} {:x1 114.90262603759766, :y1 234.2275390625, :x2 130.50328063964844, :y2 253.2275390625, :width 722.0799999999999, :height 1005.44} {:x1 196.65464782714844, :y1 236.2912139892578, :x2 252.81976318359375, :y2 250.2912139892578, :width 722.0799999999999, :height 1005.44}), :page 311}, :content {:text "1. 执行SQL进行查询"}, :properties {:color "yellow"}} {:id #uuid "625515b6-4cf6-4076-af5a-1e6d260ea333", :page 312, :position {:bounding {:x1 96.0234375, :y1 249.27508544921875, :x2 264.97955322265625, :y2 278.33758544921875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 113.09844207763672, :y1 249.27508544921875, :x2 207.23011779785156, :y2 278.33758544921875, :width 722.0799999999999, :height 1005.44} {:x1 96.0234375, :y1 255.02392578125, :x2 111.62409210205078, :y2 274.02392578125, :width 722.0799999999999, :height 1005.44} {:x1 208.9693145751953, :y1 257.08758544921875, :x2 264.97955322265625, :y2 271.08758544921875, :width 722.0799999999999, :height 1005.44}), :page 312}, :content {:text "2. 调用Table API进行查询"}, :properties {:color "yellow"}} {:id #uuid "625515cb-85f3-488b-b5cd-a8164f6f4fc8", :page 312, :position {:bounding {:x1 96.0234375, :y1 670.0255737304688, :x2 242.4211883544922, :y2 698.4161987304688, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 113.09844207763672, :y1 670.0255737304688, :x2 170.60972595214844, :y2 698.4161987304688, :width 722.0799999999999, :height 1005.44} {:x1 96.0234375, :y1 675.0869140625, :x2 111.62409210205078, :y2 694.0869140625, :width 722.0799999999999, :height 1005.44} {:x1 172.33096313476562, :y1 677.1505737304688, :x2 242.4211883544922, :y2 691.1505737304688, :width 722.0799999999999, :height 1005.44}), :page 312}, :content {:text "3. 两种API的结合使用"}, :properties {:color "yellow"}} {:id #uuid "62551cee-6d38-42f7-a471-1f72e966bb88", :page 313, :position {:bounding {:x1 -0.005750903394073248, :y1 336.8018798828125, :x2 722.0684814453125, :y2 390.94561767578125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 437.52105712890625, :y1 336.8018798828125, :x2 722.0684814453125, :y2 368.2237548828125, :width 722.0799999999999, :height 1005.44} {:x1 114.89679718017578, :y1 346.9112548828125, :x2 654.3652954101562, :y2 365.9112548828125, :width 722.0799999999999, :height 1005.44} {:x1 -0.005750903394073248, :y1 368.32061767578125, :x2 564.4696655273438, :y2 390.94561767578125, :width 722.0799999999999, :height 1005.44}), :page 313}, :content {:text "表的创建和查询，就对应着流处理中的读取数据源（Source）和转换（Transform）；而最后一个步骤Sink，也就是将结果数据输出到外部系统，就对应着表的输出操作"}, :properties {:color "yellow"}} {:id #uuid "62551d28-22c4-4fbf-ae2c-996e4d64d5f9", :page 314, :position {:bounding {:x1 96.0234375, :y1 133.9630889892578, :x2 722.0614624023438, :y2 162.3380889892578, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 113.09844207763672, :y1 133.9630889892578, :x2 348.8500671386719, :y2 162.3380889892578, :width 722.0799999999999, :height 1005.44} {:x1 96.0234375, :y1 139.0244140625, :x2 111.62409210205078, :y2 158.0244140625, :width 722.0799999999999, :height 1005.44} {:x1 156.8125, :y1 139.03125, :x2 190.24920654296875, :y2 159.34375, :width 722.0799999999999, :height 1005.44} {:x1 274.140625, :y1 139.03125, :x2 722.0614624023438, :y2 159.34375, :width 722.0799999999999, :height 1005.44} {:x1 190.2585906982422, :y1 141.0880889892578, :x2 274.2739562988281, :y2 155.0880889892578, :width 722.0799999999999, :height 1005.44} {:x1 348.859375, :y1 141.0880889892578, :x2 362.859375, :y2 155.0880889892578, :width 722.0799999999999, :height 1005.44}), :page 314}, :content {:text "1. 将表（Table）转换成流（DataStream）"}, :properties {:color "yellow"}} {:id #uuid "62551d35-ce6a-4225-9eb1-bec347a67897", :page 315, :position {:bounding {:x1 114.90262603759766, :y1 156.68182373046875, :x2 381.90625, :y2 185.0625, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 131.97610473632812, :y1 156.68182373046875, :x2 367.87518310546875, :y2 185.05682373046875, :width 722.0799999999999, :height 1005.44} {:x1 114.90262603759766, :y1 161.7431640625, :x2 130.50328063964844, :y2 180.7431640625, :width 722.0799999999999, :height 1005.44} {:x1 334.453125, :y1 161.75, :x2 367.9039306640625, :y2 182.0625, :width 722.0799999999999, :height 1005.44} {:x1 367.90625, :y1 163.80682373046875, :x2 381.90625, :y2 177.80682373046875, :width 722.0799999999999, :height 1005.44} {:x1 175.53125, :y1 164.75, :x2 250.4254913330078, :y2 185.0625, :width 722.0799999999999, :height 1005.44}), :page 315}, :content {:text "2. 将流（DataStream）转换成表（Table）"}, :properties {:color "yellow"}} {:id #uuid "62551d54-3f53-4ea1-a91c-8893e18f3c81", :page 316, :position {:bounding {:x1 96.0234375, :y1 229.7431640625, :x2 212.82118225097656, :y2 248.7431640625, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.0234375, :y1 229.7431640625, :x2 111.62409210205078, :y2 248.7431640625, :width 722.0799999999999, :height 1005.44} {:x1 114.5709457397461, :y1 231.80682373046875, :x2 212.82118225097656, :y2 245.80682373046875, :width 722.0799999999999, :height 1005.44}), :page 316}, :content {:text "3. 支持的数据类型"}, :properties {:color "yellow"}} {:id #uuid "62552ae9-09b4-415d-9d45-be8cd248dab6", :page 314, :position {:bounding {:x1 162.72378540039062, :y1 165.74249267578125, :x2 249.0212860107422, :y2 184.74249267578125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 162.72378540039062, :y1 165.74249267578125, :x2 249.0212860107422, :y2 184.74249267578125, :width 722.0799999999999, :height 1005.44}), :page 314}, :content {:text "toDataStream()"}, :properties {:color "yellow"}} {:id #uuid "62552af4-7cc9-4984-9fe3-81445329a362", :page 314, :position {:bounding {:x1 162.7244415283203, :y1 417.791259765625, :x2 283.09368896484375, :y2 440.338134765625, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 162.7244415283203, :y1 417.791259765625, :x2 283.09368896484375, :y2 440.338134765625, :width 722.0799999999999, :height 1005.44}), :page 314}, :content {:text "toChangelogStream()"}, :properties {:color "yellow"}} {:id #uuid "62552b09-bdf9-43fa-9661-a3e1f4a7aef3", :page 314, :position {:bounding {:x1 67, :y1 440, :x2 636, :y2 740, :width 722.0799999999999, :height 1005.44}, :rects (), :page 314}, :content {:text "[:span]", :image 1649748745993}, :properties {:color "yellow"}} {:id #uuid "62552b25-0636-413d-b046-bfa68823f49f", :page 315, :position {:bounding {:x1 181.61280822753906, :y1 188.46124267578125, :x2 284.0763244628906, :y2 207.46124267578125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 181.61280822753906, :y1 188.46124267578125, :x2 284.0763244628906, :y2 207.46124267578125, :width 722.0799999999999, :height 1005.44}), :page 315}, :content {:text "fromDataStream()"}, :properties {:color "yellow"}} {:id #uuid "62552b33-8471-4e31-88a4-cfa737b234a4", :page 315, :position {:bounding {:x1 181.4430694580078, :y1 709.8469848632812, :x2 314.9552001953125, :y2 728.8469848632812, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 181.4430694580078, :y1 709.8469848632812, :x2 314.9552001953125, :y2 728.8469848632812, :width 722.0799999999999, :height 1005.44}), :page 315}, :content {:text "createTemporaryView()"}, :properties {:color "yellow"}} {:id #uuid "62552b3d-9e8d-452f-af7f-d57b963112e9", :page 316, :position {:bounding {:x1 162.72117614746094, :y1 109.7373046875, :x2 302.93157958984375, :y2 128.7373046875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 162.72117614746094, :y1 109.7373046875, :x2 302.93157958984375, :y2 128.7373046875, :width 722.0799999999999, :height 1005.44}), :page 316}, :content {:text "fromChangelogStream ()"}, :properties {:color "yellow"}} {:id #uuid "62552b65-ae27-4697-84dc-6e7b69956948", :page 316, :position {:bounding {:x1 96.03050231933594, :y1 347.22686767578125, :x2 187.23577880859375, :y2 369.77374267578125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.03050231933594, :y1 347.22686767578125, :x2 187.23577880859375, :y2 369.77374267578125, :width 722.0799999999999, :height 1005.44}), :page 316}, :content {:text "（1）原子类型"}, :properties {:color "yellow"}} {:id #uuid "62552b6c-d473-4055-bb96-db1543dce882", :page 316, :position {:bounding {:x1 96.03050231933594, :y1 564.5388793945312, :x2 194.8960723876953, :y2 587.8513793945312, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 96.03050231933594, :y1 564.5388793945312, :x2 194.8960723876953, :y2 587.8513793945312, :width 722.0799999999999, :height 1005.44}), :page 316}, :content {:text "（2）Tuple类型"}, :properties {:color "yellow"}} {:id #uuid "62552bb8-5aab-44ad-8721-0f88aecf186f", :page 317, :position {:bounding {:x1 128.97862243652344, :y1 109.7373046875, :x2 128.99424743652344, :y2 128.7373046875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 128.97862243652344, :y1 109.7373046875, :x2 128.99424743652344, :y2 128.7373046875, :width 722.0799999999999, :height 1005.44}), :page 317}, :content {:text ""}, :properties {:color "yellow"}} {:id #uuid "62552bba-b27d-4dae-97ba-8e02e26912b3", :page 317, :position {:bounding {:x1 114.90049743652344, :y1 -0.012664794921875, :x2 218.5846405029297, :y2 131.0498046875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 128.984375, :y1 -0.012664794921875, :x2 188.71536254882812, :y2 131.0498046875, :width 722.0799999999999, :height 1005.44} {:x1 114.90049743652344, :y1 109.7373046875, :x2 218.5846405029297, :y2 128.7373046875, :width 722.0799999999999, :height 1005.44}), :page 317}, :content {:text "（3）POJO 类型"}, :properties {:color "yellow"}} {:id #uuid "62552bc2-b1c5-44e8-8d20-57f206b471b1", :page 317, :position {:bounding {:x1 128.97862243652344, :y1 407.22637939453125, :x2 128.99424743652344, :y2 426.22637939453125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 128.97862243652344, :y1 407.22637939453125, :x2 128.99424743652344, :y2 426.22637939453125, :width 722.0799999999999, :height 1005.44}), :page 317}, :content {:text ""}, :properties {:color "yellow"}} {:id #uuid "62552bcd-ae41-4b4d-86dd-f1617e515888", :page 317, :position {:bounding {:x1 114.90049743652344, :y1 407.22637939453125, :x2 208.0252227783203, :y2 430.46075439453125, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 114.90049743652344, :y1 407.22637939453125, :x2 208.0252227783203, :y2 430.46075439453125, :width 722.0799999999999, :height 1005.44}), :page 317}, :content {:text "（4）Row类型"}, :properties {:color "yellow"}} {:id #uuid "62552da6-5944-4d50-8de3-10b0455a454e", :page 320, :position {:bounding {:x1 96.0234375, :y1 380.08807373046875, :x2 283.3338928222656, :y2 408.46875, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 113.09844207763672, :y1 380.08807373046875, :x2 269.2827377319336, :y2 408.46307373046875, :width 722.0799999999999, :height 1005.44} {:x1 96.0234375, :y1 385.1494140625, :x2 111.62409210205078, :y2 404.1494140625, :width 722.0799999999999, :height 1005.44} {:x1 269.3338928222656, :y1 387.21307373046875, :x2 283.3338928222656, :y2 401.21307373046875, :width 722.0799999999999, :height 1005.44} {:x1 170.734375, :y1 388.15625, :x2 269.2846984863281, :y2 408.46875, :width 722.0799999999999, :height 1005.44}), :page 320}, :content {:text "1. 动态表（Dynamic Tables）"}, :properties {:color "yellow"}} {:id #uuid "62552db2-a0d8-41ca-b4ef-f58819fa2ca7", :page 320, :position {:bounding {:x1 96.0234375, :y1 708.1305541992188, :x2 311.65380859375, :y2 736.5211791992188, :width 722.0799999999999, :height 1005.44}, :rects ({:x1 113.09844207763672, :y1 708.1305541992188, :x2 297.61730194091797, :y2 736.5211791992188, :width 722.0799999999999, :height 1005.44} {:x1 96.0234375, :y1 713.20751953125, :x2 111.62409210205078, :y2 732.20751953125, :width 722.0799999999999, :height 1005.44} {:x1 184.65625, :y1 713.21875, :x2 297.647705078125, :y2 733.53125, :width 722.0799999999999, :height 1005.44} {:x1 297.65380859375, :y1 715.2711791992188, :x2 311.65380859375, :y2 729.2711791992188, :width 722.0799999999999, :height 1005.44}), :page 320}, :content {:text "2. 持续查询（Continuous Query）"}, :properties {:color "yellow"}} {:id #uuid "625530f1-da93-49b7-922d-d06ff6415928", :page 321, :position {:bounding {:x1 78, :y1 103, :x2 647, :y2 434, :width 705.9999999999999, :height 983.0498559716375}, :rects (), :page 321}, :content {:text "[:span]", :image 1649750257562}, :properties {:color "yellow"}} {:id #uuid "625531bd-461b-43be-9aa5-2beb05fa7f40", :page 322, :position {:bounding {:x1 109, :y1 621, :x2 598, :y2 899, :width 705.9999999999999, :height 983.0498559716375}, :rects (), :page 322}, :content {:text "[:span]", :image 1649750461489}, :properties {:color "yellow"}} {:id #uuid "6255322a-5a8b-4674-bc23-2f1e9ae175d8", :page 323, :position {:bounding {:x1 111, :y1 518, :x2 589, :y2 822, :width 705.9999999999999, :height 983.0498559716375}, :rects (), :page 323}, :content {:text "[:span]", :image 1649750570905}, :properties {:color "yellow"}} {:id #uuid "62553324-15ab-45d7-9dc8-1198af59bde2", :page 324, :position {:bounding {:x1 -0.0013366341590881348, :y1 373.212890625, :x2 705.990478515625, :y2 437.7918395996094, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 266.9585876464844, :y1 373.212890625, :x2 705.9691162109375, :y2 392.212890625, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.00133514404296875, :y1 394.2137145996094, :x2 705.990478515625, :y2 415.6512145996094, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013366341590881348, :y1 416.4324645996094, :x2 590.5234375, :y2 437.7918395996094, :width 705.9999999999999, :height 983.0498559716375}), :page 324}, :content {:text "追加查询（Append  Query），它定义的结果表的更新日志（changelog）流中只有INSERT操作。追加查询得到的结果表，转换成DataStream调用方法没有限制，可以直接用toDataStream()，也可以像更新查询一样调用toChangelogStream()"}, :properties {:color "yellow"}} {:id #uuid "62553338-4ca4-4874-9f74-31035c29f180", :page 324, :position {:bounding {:x1 -0.00133514404296875, :y1 439.71380615234375, :x2 705.9942098259926, :y2 504.3100280761719, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.88960266113281, :y1 439.71380615234375, :x2 621.3243560791016, :y2 458.71380615234375, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013346076011657715, :y1 460.6980895996094, :x2 705.9942098259926, :y2 482.1512145996094, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.00133514404296875, :y1 482.9350280761719, :x2 495.73670959472656, :y2 504.3100280761719, :width 705.9999999999999, :height 983.0498559716375}), :page 324}, :content {:text "这样看来，我们似乎可以总结一个规律：只要用到了聚合，在之前的结果上有叠加，就会产生更新操作，就是一个更新查询。但事实上，更新查询的判断标准是结果表中的数据是否会有UPDATE操作，如果聚合的结果不再改变，那么同样也不是更新查询"}, :properties {:color "yellow"}} {:id #uuid "625533d1-021f-4487-ad63-3a747aadfaef", :page 325, :position {:bounding {:x1 106, :y1 114, :x2 659, :y2 404, :width 705.9999999999999, :height 983.0498559716375}, :rects (), :page 325}, :content {:text "[:span]", :image 1649750993804}, :properties {:color "yellow"}} {:id #uuid "62553468-e6a6-4f38-80cc-540050a238af", :page 327, :position {:bounding {:x1 84.96505737304688, :y1 408.41448974609375, :x2 705.9827880859375, :y2 449.6355895996094, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 112.33228302001953, :y1 408.41448974609375, :x2 705.9827880859375, :y2 431.80511474609375, :width 705.9999999999999, :height 983.0498559716375} {:x1 84.96505737304688, :y1 430.6355895996094, :x2 509.673828125, :y2 449.6355895996094, :width 705.9999999999999, :height 983.0498559716375}), :page 327}, :content {:text "在实际应用中，有些持续查询会因为计算代价太高而受到限制。所谓的“代价太高”，可能是由于需要维护的状态持续增长，也可能是由于更新数据的计算太复杂"}, :properties {:color "yellow"}} {:id #uuid "6255354c-b0fc-4ada-8a92-6f93c8a9ddee", :page 328, :position {:bounding {:x1 66.47283172607422, :y1 200.3231658935547, :x2 705.974609375, :y2 241.5261993408203, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 445.4934997558594, :y1 200.3231658935547, :x2 705.974609375, :y2 219.3231658935547, :width 705.9999999999999, :height 983.0498559716375} {:x1 66.47283172607422, :y1 222.5261993408203, :x2 176.21438598632812, :y2 241.5261993408203, :width 705.9999999999999, :height 983.0498559716375}), :page 328}, :content {:text "在Flink中，Table API和SQL支持三种编码方式"}, :properties {:color "yellow"}} {:id #uuid "62553554-73b9-4a9a-9791-45baf4ba83c5", :page 328, :position {:bounding {:x1 176.01211547851562, :y1 244.7449493408203, :x2 330.6222839355469, :y2 266.1043395996094, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 176.01211547851562, :y1 244.7449493408203, :x2 330.6222839355469, :y2 266.1043395996094, :width 705.9999999999999, :height 983.0498559716375}), :page 328}, :content {:text "仅追加（Append-only）流"}, :properties {:color "yellow"}} {:id #uuid "62553559-0930-4942-b41f-0d3a4757e8b4", :page 328, :position {:bounding {:x1 176.00440979003906, :y1 311.2762145996094, :x2 283.9967956542969, :y2 332.6355895996094, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 176.00440979003906, :y1 311.2762145996094, :x2 283.9967956542969, :y2 332.6355895996094, :width 705.9999999999999, :height 983.0498559716375}), :page 328}, :content {:text "撤回（Retract）流"}, :properties {:color "yellow"}} {:id #uuid "62553560-dc5f-4aa0-b697-4ed1f942a380", :page 329, :position {:bounding {:x1 194.45436096191406, :y1 129.44805908203125, :x2 327.0285339355469, :y2 150.88555908203125, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 194.45436096191406, :y1 129.44805908203125, :x2 327.0285339355469, :y2 150.88555908203125, :width 705.9999999999999, :height 983.0498559716375}), :page 329}, :content {:text "更新插入（Upsert）流"}, :properties {:color "yellow"}} {:id #uuid "625535f4-7572-427a-9a88-77171f616e0d", :page 329, :position {:bounding {:x1 -0.007808566093444824, :y1 284.67852783203125, :x2 705.9908447265625, :y2 326.94818115234375, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 139.5229034423828, :y1 284.67852783203125, :x2 705.9908447265625, :y2 306.05352783203125, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007808566093444824, :y1 305.58880615234375, :x2 400.6112976074219, :y2 326.94818115234375, :width 705.9999999999999, :height 983.0498559716375}), :page 329}, :content {:text "需要动态表中必须有唯一的键（key）。通过这个key进行查询，如果存在对应的数据就做更新（update），如果不存在就直接插入（insert）"}, :properties {:color "yellow"}} {:id #uuid "625535fe-8c3a-4c56-a568-81679d489afa", :page 329, :position {:bounding {:x1 84.96151733398438, :y1 328.9480895996094, :x2 705.97900390625, :y2 370.1668395996094, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 206.91415405273438, :y1 328.9480895996094, :x2 705.97900390625, :y2 350.3855895996094, :width 705.9999999999999, :height 983.0498559716375} {:x1 84.96151733398438, :y1 351.1668395996094, :x2 180.93731689453125, :y2 370.1668395996094, :width 705.9999999999999, :height 983.0498559716375}), :page 329}, :content {:text "收到这条流中数据的外部系统，也需要知道这唯一的键（key），这样才能正确地处理消息"}, :properties {:color "yellow"}} {:id #uuid "6255360e-50d1-473e-8d68-144ad93bd1b5", :page 329, :position {:bounding {:x1 -0.007806956768035889, :y1 752.9636840820312, :x2 705.9925537109375, :y2 838.4480590820312, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 208.28773498535156, :y1 752.9636840820312, :x2 705.984375, :y2 771.9636840820312, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007806956768035889, :y1 773.9480590820312, :x2 705.9904174804688, :y2 795.3074340820312, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007804930210113525, :y1 796.0888061523438, :x2 705.9925537109375, :y2 817.4481811523438, :width 705.9999999999999, :height 983.0498559716375} {:x1 84.96195220947266, :y1 819.4480590820312, :x2 523.4407424926758, :y2 838.4480590820312, :width 705.9999999999999, :height 983.0498559716375}), :page 329}, :content {:text "在代码里将动态表转换为DataStream时，只支持仅追加（append-only）和撤回（retract）流，我们调用toChangelogStream()得到的其实就是撤回流；这也很好理解，DataStream中并没有key的定义，所以只能通过两条消息一减一增来表示更新操作。而连接到外部系统时，则可以支持不同的编码方法，这取决于外部系统本身的特性"}, :properties {:color "yellow"}} {:id #uuid "6255392b-7da9-4d65-aa96-237af57c7411", :page 330, :position {:bounding {:x1 -0.0013337135314941406, :y1 164.18423461914062, :x2 705.9911346435547, :y2 227.44818115234375, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 607.7947998046875, :y1 164.18423461914062, :x2 621.3242797851562, :y2 183.18423461914062, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013337135314941406, :y1 185.18243408203125, :x2 705.9911346435547, :y2 206.54180908203125, :width 705.9999999999999, :height 983.0498559716375} {:x1 66.48297882080078, :y1 208.44818115234375, :x2 94.02715301513672, :y2 227.44818115234375, :width 705.9999999999999, :height 983.0498559716375}), :page 330}, :content {:text "在Table API和SQL中，会给表单独提供一个逻辑上的时间字段，专门用来在表处理程序中指示时间"}, :properties {:color "yellow"}} {:id #uuid "625539a0-c1b3-43a4-be23-97bf834c2ac1", :page 330, :position {:bounding {:x1 93.87641906738281, :y1 629.7625122070312, :x2 255.79583740234375, :y2 656.8250122070312, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 110.58451843261719, :y1 629.7625122070312, :x2 213.21804809570312, :y2 656.8250122070312, :width 705.9999999999999, :height 983.0498559716375} {:x1 93.87641906738281, :y1 634.6416015625, :x2 109.12968444824219, :y2 653.6416015625, :width 705.9999999999999, :height 983.0498559716375} {:x1 214.96580505371094, :y1 635.7312622070312, :x2 255.79583740234375, :y2 649.7312622070312, :width 705.9999999999999, :height 983.0498559716375}), :page 330}, :content {:text "1. 在创建表的DDL中定义"}, :properties {:color "yellow"}} {:id #uuid "625539f8-c868-4dc2-8cb5-5f6e8e653ffc", :page 331, :position {:bounding {:x1 -0.007805466651916504, :y1 168.55743408203125, :x2 705.9953002929688, :y2 255.26055908203125, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 112.34141540527344, :y1 168.55743408203125, :x2 705.9736938476562, :y2 187.55743408203125, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007803976535797119, :y1 189.55743408203125, :x2 705.9953002929688, :y2 210.91680908203125, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007805466651916504, :y1 211.69818115234375, :x2 705.9868774414062, :y2 233.05755615234375, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007805287837982178, :y1 233.82305908203125, :x2 402.7849426269531, :y2 255.26055908203125, :width 705.9999999999999, :height 983.0498559716375}), :page 331}, :content {:text "Flink中支持的事件时间属性数据类型必须为TIMESTAMP或者TIMESTAMP_LTZ。这里TIMESTAMP_LTZ是指带有本地时区信息的时间戳（TIMESTAMP  WITH  LOCAL  TIME ZONE）；一般情况下如果数据中的时间戳是“年-月-日-时-分-秒”的形式，那就是不带时区信息的，可以将事件时间属性定义为TIMESTAMP类型"}, :properties {:color "yellow"}} {:id #uuid "625539ff-590a-42f0-9aef-43dda244f83a", :page 331, :position {:bounding {:x1 -0.007805287837982178, :y1 257.2606201171875, :x2 639.7769088745117, :y2 297.24505615234375, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 112.34221649169922, :y1 257.2606201171875, :x2 639.7769088745117, :y2 276.2606201171875, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007805287837982178, :y1 278.18255615234375, :x2 392.3343811035156, :y2 297.24505615234375, :width 705.9999999999999, :height 983.0498559716375}), :page 331}, :content {:text "而如果原始的时间戳就是一个长整型的毫秒数，这时就需要另外定义一个字段来表示事件时间属性，类型定义为TIMESTAMP_LTZ会更方便"}, :properties {:color "yellow"}} {:id #uuid "62553a37-fa2a-467b-965b-d8c263debf8c", :page 331, :position {:bounding {:x1 -0.007806956768035889, :y1 454.103515625, :x2 706.0018920898438, :y2 499.2918395996094, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 112.33197021484375, :y1 454.103515625, :x2 706.0018920898438, :y2 473.103515625, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007806956768035889, :y1 475.0887145996094, :x2 465.7328796386719, :y2 499.2918395996094, :width 705.9999999999999, :height 983.0498559716375} {:x1 466.2572937011719, :y1 476.3074645996094, :x2 562.2330932617188, :y2 495.3074645996094, :width 705.9999999999999, :height 983.0498559716375}), :page 331}, :content {:text "这里我们另外定义了一个字段ts_ltz，是把长整型的ts转换为TIMESTAMP_LTZ得到的；进而使用WATERMARK语句将它设为事件时间属性，并设置5秒的水位线延迟"}, :properties {:color "yellow"}} {:id #uuid "62553a57-32e6-43eb-a751-e4c34d10f230", :page 331, :position {:bounding {:x1 112.33121490478516, :y1 504.9566955566406, :x2 281.3039855957031, :y2 523.9567260742188, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 112.33121490478516, :y1 504.9566955566406, :x2 127.58447265625, :y2 523.9567260742188, :width 705.9999999999999, :height 983.0498559716375} {:x1 130.47872924804688, :y1 506.04632568359375, :x2 281.3039855957031, :y2 520.0463256835938, :width 705.9999999999999, :height 983.0498559716375}), :page 331}, :content {:text "2. 在数据流转换为表时定义"}, :properties {:color "yellow"}} {:id #uuid "62554311-c581-4134-b602-c3b27fa74b1c", :page 332, :position {:bounding {:x1 -0.00133514404296875, :y1 297.980712890625, :x2 705.99658203125, :y2 371.2606201171875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 307.5576477050781, :y1 297.980712890625, :x2 705.9811401367188, :y2 328.043212890625, :width 705.9999999999999, :height 983.0498559716375} {:x1 93.88279724121094, :y1 307.824462890625, :x2 307.2005310058594, :y2 326.824462890625, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.00133514404296875, :y1 328.8231201171875, :x2 705.99658203125, :y2 350.2606201171875, :width 705.9999999999999, :height 983.0498559716375} {:x1 66.4775161743164, :y1 352.2606201171875, :x2 285.75501251220703, :y2 371.2606201171875, :width 705.9999999999999, :height 983.0498559716375}), :page 332}, :content {:text "相比之下处理时间就比较简单了，它就是我们的系统时间，使用时不需要提取时间戳（timestamp）和生成水位线（watermark）。因此在定义处理时间属性时，必须要额外声明一个字段，专门用来保存当前的处理时间"}, :properties {:color "yellow"}} {:id #uuid "6255431a-a128-48df-8dcd-c1ff7605b73e", :page 332, :position {:bounding {:x1 93.87641906738281, :y1 420.27813720703125, :x2 255.79583740234375, :y2 447.34063720703125, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 110.58451843261719, :y1 420.27813720703125, :x2 213.21804809570312, :y2 447.34063720703125, :width 705.9999999999999, :height 983.0498559716375} {:x1 93.87641906738281, :y1 425.1416015625, :x2 109.12968444824219, :y2 444.1416015625, :width 705.9999999999999, :height 983.0498559716375} {:x1 214.96580505371094, :y1 426.24688720703125, :x2 255.79583740234375, :y2 440.24688720703125, :width 705.9999999999999, :height 983.0498559716375}), :page 332}, :content {:text "1. 在创建表的DDL中定义"}, :properties {:color "yellow"}} {:id #uuid "62554322-bf67-4e26-b058-7ce2ccd622ad", :page 332, :position {:bounding {:x1 93.87641906738281, :y1 709.4598388671875, :x2 262.8482360839844, :y2 728.4598388671875, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.87641906738281, :y1 709.4598388671875, :x2 109.12968444824219, :y2 728.4598388671875, :width 705.9999999999999, :height 983.0498559716375} {:x1 112.02299499511719, :y1 710.5593872070312, :x2 262.8482360839844, :y2 724.5593872070312, :width 705.9999999999999, :height 983.0498559716375}), :page 332}, :content {:text "2. 在数据流转换为表时定义"}, :properties {:color "yellow"}} {:id #uuid "625543ad-b397-46dc-b491-940dfb30413c", :page 333, :position {:bounding {:x1 112.33121490478516, :y1 781.3875122070312, :x2 705.9854736328125, :y2 808.4500122070312, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 129.04025268554688, :y1 781.3875122070312, :x2 329.64996337890625, :y2 808.4500122070312, :width 705.9999999999999, :height 983.0498559716375} {:x1 112.33121490478516, :y1 786.2666015625, :x2 127.58447265625, :y2 805.2666015625, :width 705.9999999999999, :height 983.0498559716375} {:x1 226.53125, :y1 786.28125, :x2 705.9854736328125, :y2 805.453125, :width 705.9999999999999, :height 983.0498559716375} {:x1 329.671875, :y1 787.3562622070312, :x2 398.2012634277344, :y2 801.3562622070312, :width 705.9999999999999, :height 983.0498559716375}), :page 333}, :content {:text "2. 窗口表值函数（Windowing TVFs，新版本）"}, :properties {:color "yellow"}} {:id #uuid "62554e23-67a2-4c75-9aff-d4a380e88ba6", :page 334, :position {:bounding {:x1 93.88778686523438, :y1 484.1694030761719, :x2 266.625, :y2 503.1694030761719, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.88778686523438, :y1 484.1694030761719, :x2 266.625, :y2 503.1694030761719, :width 705.9999999999999, :height 983.0498559716375}), :page 334}, :content {:text "（1）滚动窗口（TUMBLE）"}, :properties {:color "yellow"}} {:id #uuid "62554e2a-caeb-443e-a020-ad8c0084ac1e", :page 334, :position {:bounding {:x1 93.88778686523438, :y1 700.5574340820312, :x2 237.78311157226562, :y2 719.5574340820312, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 93.88778686523438, :y1 700.5574340820312, :x2 237.78311157226562, :y2 719.5574340820312, :width 705.9999999999999, :height 983.0498559716375}), :page 334}, :content {:text "（2）滑动窗口（HOP）"}, :properties {:color "yellow"}} {:id #uuid "62554e31-8844-4dfe-940e-38eba7551833", :page 334, :position {:bounding {:x1 93.88778686523438, :y1 871.4011840820312, :x2 284.9210510253906, :y2 900.6199340820312, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 107.65625, :y1 871.4011840820312, :x2 271.1233825683594, :y2 900.6199340820312, :width 705.9999999999999, :height 983.0498559716375} {:x1 93.88778686523438, :y1 872.6199340820312, :x2 284.9210510253906, :y2 891.6199340820312, :width 705.9999999999999, :height 983.0498559716375}), :page 334}, :content {:text "（3）累积窗口（CUMULATE）"}, :properties {:color "yellow"}} {:id #uuid "62554e63-dfc8-4d4a-a3d8-56e6ea3b2542", :page 336, :position {:bounding {:x1 -0.0013306736946105957, :y1 208.44818115234375, :x2 705.9784545898438, :y2 262.0730895996094, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 66.47014617919922, :y1 208.44818115234375, :x2 705.9784545898438, :y2 227.44818115234375, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.0013306736946105957, :y1 229.44805908203125, :x2 323.53955078125, :y2 262.0730895996094, :width 705.9999999999999, :height 983.0498559716375} {:x1 325.282958984375, :y1 230.66680908203125, :x2 448.6396789550781, :y2 249.66680908203125, :width 705.9999999999999, :height 983.0498559716375}), :page 336}, :content {:text "Flink 中的SQL是流处理与标准SQL结合的产物，所以聚合查询也可以分成两种：流处理中特有的聚合（主要指窗口聚合），以及SQL原生的聚合查询方式"}, :properties {:color "yellow"}} {:id #uuid "62554f49-cd1a-43ec-a931-6511e2b576c4", :page 337, :position {:bounding {:x1 -0.007807135581970215, :y1 195.93243408203125, :x2 705.9798583984375, :y2 259.21380615234375, :width 705.9999999999999, :height 983.0498559716375}, :rects ({:x1 180.8235321044922, :y1 195.93243408203125, :x2 705.9798583984375, :y2 214.93243408203125, :width 705.9999999999999, :height 983.0498559716375} {:x1 -0.007807135581970215, :y1 216.93243408203125, :x2 705.9793754816055, :y2 238.29180908203125, :width 705.9999999999999, :height 983.0498559716375} {:x1 84.95813751220703, :y1 240.21380615234375, :x2 194.6046600341797, :y2 259.21380615234375, :width 705.9999999999999, :height 983.0498559716375}), :page 337}, :content {:text "分组聚合既是SQL原生的聚合查询，也是流处理中的聚合操作，这是实际应用中最常见的聚合方式。当然，使用的聚合函数一般都是系统内置的，如果希望实现特殊需求也可以进行自定义"}, :properties {:color "yellow"}}]}