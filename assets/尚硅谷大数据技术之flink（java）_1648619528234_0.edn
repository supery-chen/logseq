{:highlights [{:id #uuid "62440a36-c97d-4cb0-939a-621b0e56e98b", :page 28, :position {:bounding {:x1 -0.008093699812889099, :y1 705.771728515625, :x2 721.9751586914062, :y2 749.8054809570312, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.01123809814453, :y1 705.771728515625, :x2 721.9751586914062, :y2 724.771728515625, :width 722, :height 1005.3286062486153} {:x1 -0.008093699812889099, :y1 727.1804809570312, :x2 246.83384704589844, :y2 749.8054809570312, :width 722, :height 1005.3286062486153}), :page 28}, :content {:text "这里需要提到Flink中的几个关键组件：客户端（Client）、作业管理器（JobManager）和任务管理器（TaskManager）"}, :properties {:color "yellow"}} {:id #uuid "62440a74-bd5d-41e4-b278-4d1f25aaba68", :page 29, :position {:bounding {:x1 119, :y1 56, :x2 615, :y2 385, :width 722, :height 1005.3286062486153}, :rects (), :page 29}, :content {:text "[:span]", :image 1648626292381}, :properties {:color "yellow"}} {:id #uuid "62450ce5-4bd3-430d-ad09-3c77d87ceace", :page 38, :position {:bounding {:x1 96.00945281982422, :y1 269.5573425292969, :x2 446.33260345458984, :y2 288.557373046875, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.00945281982422, :y1 269.5573425292969, :x2 446.33260345458984, :y2 288.557373046875, :width 722, :height 1005.3286062486153}), :page 38}, :content {:text "会话模式比较适合于单个规模小、执行时间短的大量作业"}, :properties {:color "yellow"}} {:id #uuid "62450cfa-2832-4b40-b6f9-7b46e358410e", :page 38, :position {:bounding {:x1 180.0704803466797, :y1 707.849853515625, :x2 586.4908905029297, :y2 726.849853515625, :width 722, :height 1005.3286062486153}, :rects ({:x1 180.0704803466797, :y1 707.849853515625, :x2 586.4908905029297, :y2 726.849853515625, :width 722, :height 1005.3286062486153}), :page 38}, :content {:text "单作业模式在生产环境运行更加稳定，所以是实际应用的首选模式"}, :properties {:color "yellow"}} {:id #uuid "62450d13-0ed7-4469-962b-e908d22704a6", :page 39, :position {:bounding {:x1 -0.011749267578125, :y1 132.44610595703125, :x2 721.9923095703125, :y2 196.729248046875, :width 722, :height 1005.3286062486153}, :rects ({:x1 142.9627227783203, :y1 132.44610595703125, :x2 721.9923095703125, :y2 151.44610595703125, :width 722, :height 1005.3286062486153} {:x1 -0.011749267578125, :y1 153.85235595703125, :x2 721.9876708984375, :y2 176.39923095703125, :width 722, :height 1005.3286062486153} {:x1 86.87938690185547, :y1 177.729248046875, :x2 170.93898010253906, :y2 196.729248046875, :width 722, :height 1005.3286062486153}), :page 39}, :content {:text "我们需要为每一个提交的应用单独启动一个JobManager，也就是创建一个集群。这个JobManager只为执行这一个应用而存在，执行结束之后JobManager也就关闭了，这就是所谓的应用模式"}, :properties {:color "yellow"}} {:id #uuid "62450d33-59e4-48c0-ad47-02c1bc2cd5f3", :page 39, :position {:bounding {:x1 -0.011748969554901123, :y1 460.77423095703125, :x2 721.9739110171795, :y2 550.1023559570312, :width 722, :height 1005.3286062486153}, :rects ({:x1 184.0330810546875, :y1 460.77423095703125, :x2 654.266357421875, :y2 479.77423095703125, :width 722, :height 1005.3286062486153} {:x1 -0.011748969554901123, :y1 482.18048095703125, :x2 721.9712832570076, :y2 504.74298095703125, :width 722, :height 1005.3286062486153} {:x1 -0.011745721101760864, :y1 504.82525634765625, :x2 721.9739110171795, :y2 527.3877563476562, :width 722, :height 1005.3286062486153} {:x1 -0.011742755770683289, :y1 527.4773559570312, :x2 470.11065673828125, :y2 550.1023559570312, :width 722, :height 1005.3286062486153}), :page 39}, :content {:text "在会话模式下，集群的生命周期独立于集群上运行的任何作业的生命周期，并且提交的所有作业共享资源。而单作业模式为每个提交的作业创建一个集群，带来了更好的资源隔离，这时集群的生命周期与作业的生命周期绑定。最后，应用模式为每个应用程序创建一个会话集群，在JobManager上直接调用应用程序的main()方法"}, :properties {:color "yellow"}} {:id #uuid "62450dec-7154-4f5d-819e-fc4150cff13e", :page 42, :position {:bounding {:x1 -0.008094295859336853, :y1 439.49298095703125, :x2 721.9898681640625, :y2 540.2765502929688, :width 722, :height 1005.3286062486153}, :rects ({:x1 164.640625, :y1 439.49298095703125, :x2 721.9898681640625, :y2 458.49298095703125, :width 722, :height 1005.3286062486153} {:x1 -0.008091747760772705, :y1 460.8229675292969, :x2 721.9821166992188, :y2 483.3698425292969, :width 722, :height 1005.3286062486153} {:x1 -0.008094295859336853, :y1 483.46173095703125, :x2 721.9684448242188, :y2 506.10235595703125, :width 722, :height 1005.3286062486153} {:x1 -0.00808832049369812, :y1 506.1983947753906, :x2 318.8908996582031, :y2 540.2765502929688, :width 722, :height 1005.3286062486153} {:x1 320.6511535644531, :y1 507.5265197753906, :x2 362.7403564453125, :y2 526.5265502929688, :width 722, :height 1005.3286062486153}), :page 42}, :content {:text "YARN上部署的过程是：客户端把Flink应用提交给Yarn的ResourceManager, Yarn的ResourceManager会向Yarn的NodeManager申请容器。在这些容器上，Flink会部署JobManager和TaskManager的实例，从而启动集群。Flink会根据运行在JobManger上的作业所需要的Slot数量动态分配TaskManager资源。"}, :properties {:color "yellow"}} {:id #uuid "62451f28-540a-4c62-abfe-46958ef9aef6", :page 49, :position {:bounding {:x1 90, :y1 59, :x2 653, :y2 461, :width 721.9999999999999, :height 1005.3286062486152}, :rects (), :page 49}, :content {:text "[:span]", :image 1648697128409}, :properties {:color "yellow"}} {:id #uuid "62451f57-78fd-4be4-ad93-a47a58f42523", :page 48, :position {:bounding {:x1 -0.008094727993011475, :y1 725.503173828125, :x2 721.9892578125, :y2 884.5603637695312, :width 721.9999999999999, :height 1005.3286062486152}, :rects ({:x1 127.37031555175781, :y1 725.503173828125, :x2 721.9892578125, :y2 754.846923828125, :width 721.9999999999999, :height 1005.3286062486152} {:x1 96.00971984863281, :y1 734.409423828125, :x2 635.235107421875, :y2 753.409423828125, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.0001220703125, :y1 754.9353637695312, :x2 721.9823608398438, :y2 775.7322387695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.008091211318969727, :y1 775.812255859375, :x2 721.974609375, :y2 796.609130859375, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.0001220703125, :y1 796.7009887695312, :x2 721.9725341796875, :y2 817.5759887695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 -0.008094727993011475, :y1 817.6541137695312, :x2 205.21875, :y2 884.5603637695312, :width 721.9999999999999, :height 1005.3286062486152} {:x1 183.6564178466797, :y1 818.0916137695312, :x2 247.82403564453125, :y2 837.0916137695312, :width 721.9999999999999, :height 1005.3286062486152}), :page 48}, :content {:text "Flink的运行时架构中，最重要的就是两大组件：作业管理器（JobManger）和任务管理器（TaskManager）。对于一个提交执行的作业，JobManager是真正意义上的“管理者”（Master），负责管理调度，所以在不考虑高可用的情况下只能有一个；而TaskManager是“工作者”（Worker、Slave），负责执行任务处理数据，所以可以有一个或多个。Flink的作业提交和任务处理时的系统如图4-1所示。"}, :properties {:color "yellow"}} {:id #uuid "62453fc2-a342-43cb-8e2c-678f7917fb1d", :page 51, :position {:bounding {:x1 132, :y1 562, :x2 606, :y2 734, :width 722, :height 1005.3286062486153}, :rects (), :page 51}, :content {:text "[:span]", :image 1648705474055}, :properties {:color "yellow"}} {:id #uuid "62454063-0020-4aa4-b678-18e16e071e4f", :page 52, :position {:bounding {:x1 126, :y1 426, :x2 574, :y2 665, :width 722, :height 1005.3286062486153}, :rects (), :page 52}, :content {:text "[:span]", :image 1648705635790}, :properties {:color "yellow"}} {:id #uuid "62454115-6eba-4154-ab1d-e057d767c4a2", :page 53, :position {:bounding {:x1 119, :y1 370, :x2 654, :y2 616, :width 722, :height 1005.3286062486153}, :rects (), :page 53}, :content {:text "[:span]", :image 1648705813730}, :properties {:color "yellow"}} {:id #uuid "62454135-1954-4edb-99bf-2f6d9975f66e", :page 54, :position {:bounding {:x1 108, :y1 165, :x2 628, :y2 447, :width 722, :height 1005.3286062486153}, :rects (), :page 54}, :content {:text "[:span]", :image 1648705845181}, :properties {:color "yellow"}} {:id #uuid "624541f2-189f-4995-a375-3ef37f35add8", :page 55, :position {:bounding {:x1 107, :y1 363, :x2 601, :y2 443, :width 722, :height 1005.3286062486153}, :rects (), :page 55}, :content {:text "[:span]", :image 1648706034535}, :properties {:color "yellow"}} {:id #uuid "6245466b-87c3-47f2-b8e0-eb30d8b2cfa7", :page 55, :position {:bounding {:x1 79, :y1 457, :x2 642, :y2 683, :width 722, :height 1005.3286062486153}, :rects (), :page 55}, :content {:text "[:span]", :image 1648707179638}, :properties {:color "yellow"}} {:id #uuid "62454701-8930-4021-934b-388c85a330e5", :page 57, :position {:bounding {:x1 190, :y1 101, :x2 543, :y2 358, :width 722, :height 1005.3286062486153}, :rects (), :page 57}, :content {:text "[:span]", :image 1648707329143}, :properties {:color "yellow"}} {:id #uuid "6245471b-13ef-4cfb-975d-69af821a09d0", :page 57, :position {:bounding {:x1 -0.011749625205993652, :y1 361.59027099609375, :x2 721.9967651367188, :y2 514.2658081054688, :width 722, :height 1005.3286062486153}, :rects ({:x1 267.8672790527344, :y1 361.59027099609375, :x2 721.9942626953125, :y2 385.87152099609375, :width 722, :height 1005.3286062486153} {:x1 114.88359832763672, :y1 365.43402099609375, :x2 654.1092529296875, :y2 384.43402099609375, :width 722, :height 1005.3286062486153} {:x1 -0.011743202805519104, :y1 385.9510192871094, :x2 721.9967651367188, :y2 406.8260192871094, :width 722, :height 1005.3286062486153} {:x1 -0.01174706220626831, :y1 406.9041442871094, :x2 721.982210457325, :y2 427.7791748046875, :width 722, :height 1005.3286062486153} {:x1 -0.011749625205993652, :y1 427.8729248046875, :x2 721.9796444177628, :y2 448.7479248046875, :width 722, :height 1005.3286062486153} {:x1 -0.008644431829452515, :y1 448.8260498046875, :x2 721.9788208007812, :y2 469.6229248046875, :width 722, :height 1005.3286062486153} {:x1 -0.011743947863578796, :y1 469.702880859375, :x2 721.9738159179688, :y2 490.499755859375, :width 722, :height 1005.3286062486153} {:x1 -0.011744558811187744, :y1 490.59393310546875, :x2 335.703125, :y2 514.2658081054688, :width 722, :height 1005.3286062486153}), :page 57}, :content {:text "一个特定算子的子任务（subtask）的个数被称之为其并行度（parallelism）。这样，包含并行子任务的数据流，就是并行数据流，它需要多个分区（stream  partition）来分配并行任务。一般情况下，一个流程序的并行度，可以认为就是其所有算子中最大的并行度。一个程序中，不同的算子可能具有不同的并行度。如图4-8所示，当前数据流中有source、map、window、sink四个算子，除最后sink，其他算子的并行度都为2。整个程序包含了7个子任务，至少需要2个分区来并行执行。我们可以说，这段流处理程序的并行度就是2。"}, :properties {:color "yellow"}} {:id #uuid "62454a8d-db87-42a7-838d-611c206f0a5e", :page 61, :position {:bounding {:x1 131, :y1 277, :x2 608, :y2 916, :width 722, :height 1005.3286062486153}, :rects (), :page 61}, :content {:text "[:span]", :image 1648708237078}, :properties {:color "yellow"}} {:id #uuid "62454e39-97d3-4303-a24a-a1467fc124fa", :page 63, :position {:bounding {:x1 86, :y1 623, :x2 655, :y2 914, :width 722, :height 1005.3286062486153}, :rects (), :page 63}, :content {:text "[:span]", :image 1648709177499}, :properties {:color "yellow"}} {:id #uuid "62454e59-5ef5-47ad-85b9-66b9677fa165", :page 64, :position {:bounding {:x1 -0.012770503759384155, :y1 178.26185607910156, :x2 721.997314453125, :y2 440.984130859375, :width 722, :height 1005.3286062486153}, :rects ({:x1 321.94390869140625, :y1 178.26185607910156, :x2 721.9793701171875, :y2 205.24623107910156, :width 722, :height 1005.3286062486153} {:x1 96.00971984863281, :y1 180.77748107910156, :x2 320.1858215332031, :y2 199.77748107910156, :width 722, :height 1005.3286062486153} {:x1 -0.012770503759384155, :y1 205.32569885253906, :x2 721.9720317423344, :y2 228.59132385253906, :width 722, :height 1005.3286062486153} {:x1 -0.005736827850341797, :y1 228.5986785888672, :x2 721.9789428710938, :y2 249.8330535888672, :width 722, :height 1005.3286062486153} {:x1 -0.0057320743799209595, :y1 249.9197540283203, :x2 721.9963989257812, :y2 270.7947692871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809459388256073, :y1 270.8885192871094, :x2 721.9739990234375, :y2 291.7010192871094, :width 722, :height 1005.3286062486153} {:x1 -0.008093178272247314, :y1 291.776611328125, :x2 721.9934692382812, :y2 312.589111328125, :width 722, :height 1005.3286062486153} {:x1 -0.00808800756931305, :y1 312.6853942871094, :x2 721.997314453125, :y2 333.5603942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809478759765625, :y1 333.6385192871094, :x2 721.9752655029297, :y2 354.5135192871094, :width 722, :height 1005.3286062486153} {:x1 -0.008094727993011475, :y1 354.5916442871094, :x2 721.967735350132, :y2 375.4666442871094, :width 722, :height 1005.3286062486153} {:x1 -0.005731731653213501, :y1 375.5603942871094, :x2 721.9813232421875, :y2 396.4353942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00809277594089508, :y1 396.5135192871094, :x2 721.995849609375, :y2 417.3103942871094, :width 722, :height 1005.3286062486153} {:x1 -0.00808839499950409, :y1 417.390380859375, :x2 340.34051513671875, :y2 440.984130859375, :width 722, :height 1005.3286062486153}), :page 64}, :content {:text "我们可以通过集群的配置文件来设定TaskManager的slot数量：taskmanager.numberOfTaskSlots: 8通过调整slot的数量，我们就可以控制子任务之间的隔离级别。具体来说，如果一个TaskManager只有一个slot，那将意味着每个任务都会运行在独立的JVM中（当然，该JVM可能是通过一个特定的容器启动的）；而一个TaskManager设置多个slot则意味着多个子任务可以共享同一个JVM。它们的区别在于：前者任务之间完全独立运行，隔离级别更高、彼此间的影响可以降到最小；而后者在同一个JVM进程中运行的任务，将共享TCP连接和心跳消息，也可能共享数据集和数据结构，这就减少了每个任务的运行开销，在降低隔离级别的同时提升了性能。需要注意的是，slot目前仅仅用来隔离内存，不会涉及CPU的隔离。在具体应用时，可以将slot数量配置为机器的CPU核心数，尽量避免不同任务之间对CPU的竞争。这也是开发环境默认并行度设为机器CPU数量的原因。"}, :properties {:color "yellow"}} {:id #uuid "62454e82-ff8f-4b89-b726-614cb95daff5", :page 64, :position {:bounding {:x1 57, :y1 662, :x2 613, :y2 926, :width 722, :height 1005.3286062486153}, :rects (), :page 64}, :content {:text "[:span]", :image 1648709252945}, :properties {:color "yellow"}} {:id #uuid "62454e91-b72e-43b4-86a2-5c5565148a9e", :page 65, :position {:bounding {:x1 269.03875732421875, :y1 127.34027099609375, :x2 539.35205078125, :y2 151.54339599609375, :width 722, :height 1005.3286062486153}, :rects ({:x1 353.140625, :y1 127.34027099609375, :x2 523.5791625976562, :y2 151.54339599609375, :width 722, :height 1005.3286062486153} {:x1 269.03875732421875, :y1 131.18402099609375, :x2 382.7509460449219, :y2 150.18402099609375, :width 722, :height 1005.3286062486153} {:x1 525.30419921875, :y1 131.18402099609375, :x2 539.35205078125, :y2 150.18402099609375, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "默认情况下，Flink是允许子任务共享slot的"}, :properties {:color "yellow"}} {:id #uuid "62454ee2-c050-42d0-a67a-8d1e48e7e94f", :page 65, :position {:bounding {:x1 -0.01174953579902649, :y1 151.984130859375, :x2 721.9873657226562, :y2 298.015380859375, :width 722, :height 1005.3286062486153}, :rects ({:x1 86.87904357910156, :y1 151.984130859375, :x2 721.9708251953125, :y2 170.984130859375, :width 722, :height 1005.3286062486153} {:x1 -0.011747121810913086, :y1 172.49786376953125, :x2 721.9742431640625, :y2 193.37286376953125, :width 722, :height 1005.3286062486153} {:x1 -0.01174953579902649, :y1 193.45098876953125, :x2 721.9864501953125, :y2 214.32598876953125, :width 722, :height 1005.3286062486153} {:x1 -0.011743947863578796, :y1 214.40411376953125, :x2 721.96875, :y2 235.27911376953125, :width 722, :height 1005.3286062486153} {:x1 -0.008644431829452515, :y1 235.37286376953125, :x2 721.978515625, :y2 256.2479248046875, :width 722, :height 1005.3286062486153} {:x1 -0.011748388409614563, :y1 256.3260498046875, :x2 721.9873657226562, :y2 277.1229248046875, :width 722, :height 1005.3286062486153} {:x1 -0.011742889881134033, :y1 277.202880859375, :x2 412.1725158691406, :y2 298.015380859375, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "只要属于同一个作业，那么对于不同任务节点的并行子任务，就可以放到同一个slot上执行。所以对于第一个任务节点source→map，它的6个并行子任务必须分到不同的slot上（如果在同一slot就没法数据并行了），而第二个任务节点keyBy/window/apply的并行子任务却可以和第一个任务节点共享slot。于是最终结果就变成了：每个任务节点的并行子任务一字排开，占据不同的slot；而不同的任务节点的子任务可以共享slot。一个slot中，可以将程序处理的所有任务都放在这里执行，我们把它叫作保存了整个作业的运行管道（pipeline）。"}, :properties {:color "yellow"}} {:id #uuid "62454f17-cf32-4f0c-b7c4-06f09a36058b", :page 65, :position {:bounding {:x1 -0.01174953579902649, :y1 549.7634887695312, :x2 721.9903564453125, :y2 612.1072387695312, :width 722, :height 1005.3286062486153}, :rects ({:x1 365.5645751953125, :y1 549.7634887695312, :x2 654.2659301757812, :y2 568.7634887695312, :width 722, :height 1005.3286062486153} {:x1 -0.01174953579902649, :y1 570.2791137695312, :x2 721.9903564453125, :y2 591.1541137695312, :width 722, :height 1005.3286062486153} {:x1 -0.011745616793632507, :y1 591.2322387695312, :x2 176.953125, :y2 612.1072387695312, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "当我们将资源密集型和非密集型的任务同时放到一个slot中，它们就可以自行分配对资源占用的比例，从而保证最重的活平均分配给所有的TaskManager。"}, :properties {:color "yellow"}} {:id #uuid "62454f2b-de44-4b9a-bef3-00b9580a1ecb", :page 65, :position {:bounding {:x1 -0.011747926473617554, :y1 612.6384887695312, :x2 721.9775390625, :y2 653.9509887695312, :width 722, :height 1005.3286062486153}, :rects ({:x1 114.8781967163086, :y1 612.6384887695312, :x2 721.9775390625, :y2 631.6384887695312, :width 722, :height 1005.3286062486153} {:x1 -0.011747926473617554, :y1 633.1541137695312, :x2 535.29541015625, :y2 653.9509887695312, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "slot共享另一个好处就是允许我们保存完整的作业管道。这样一来，即使某个TaskManager出现故障宕机，其他节点也可以完全不受影响，作业的任务可以继续执行"}, :properties {:color "yellow"}} {:id #uuid "62454f43-7104-418b-a2e3-2e593ce87043", :page 65, :position {:bounding {:x1 -0.011747121810913086, :y1 654.390380859375, :x2 722.00537109375, :y2 736.2947387695312, :width 722, :height 1005.3286062486153}, :rects ({:x1 114.88580322265625, :y1 654.390380859375, :x2 722.00537109375, :y2 673.390380859375, :width 722, :height 1005.3286062486153} {:x1 -0.011747121810913086, :y1 674.9041137695312, :x2 721.9780883789062, :y2 695.7947387695312, :width 722, :height 1005.3286062486153} {:x1 -0.011746898293495178, :y1 695.8841552734375, :x2 721.9851684570312, :y2 716.7747802734375, :width 722, :height 1005.3286062486153} {:x1 86.87538146972656, :y1 717.2947387695312, :x2 213.03448486328125, :y2 736.2947387695312, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "另外，同一个任务节点的并行子任务是不能共享slot的，所以允许slot共享之后，运行作业所需的slot数量正好就是作业中所有算子并行度的最大值。这样一来，我们考虑当前集群需要配置多少slot资源时，就不需要再去详细计算一个作业总共包含多少个并行子任务了，只看最大的并行度就够了"}, :properties {:color "yellow"}} {:id #uuid "62454f5f-ecb2-4910-8248-aed5113b5b47", :page 65, :position {:bounding {:x1 -0.01174953579902649, :y1 738.2634887695312, :x2 721.9948120117188, :y2 879.1411743164062, :width 722, :height 1005.3286062486153}, :rects ({:x1 114.888427734375, :y1 738.2634887695312, :x2 721.984375, :y2 759.1384887695312, :width 722, :height 1005.3286062486153} {:x1 -0.011747851967811584, :y1 758.7791137695312, :x2 721.979736328125, :y2 779.5759887695312, :width 722, :height 1005.3286062486153} {:x1 -0.01174953579902649, :y1 779.656005859375, :x2 721.9840390384197, :y2 799.359130859375, :width 722, :height 1005.3286062486153} {:x1 -0.00080108642578125, :y1 799.4451293945312, :x2 721.9948120117188, :y2 817.5857543945312, :width 722, :height 1005.3286062486153} {:x1 89.78044891357422, :y1 801.7888793945312, :x2 456.9737854003906, :y2 813.7888793945312, :width 722, :height 1005.3286062486153} {:x1 478.59375, :y1 801.7888793945312, :x2 493.0041809082031, :y2 813.7888793945312, :width 722, :height 1005.3286062486153} {:x1 -0.008642926812171936, :y1 817.5986938476562, :x2 721.983642578125, :y2 838.7549438476562, :width 722, :height 1005.3286062486153} {:x1 -0.011748388409614563, :y1 838.843505859375, :x2 721.9830932617188, :y2 859.624755859375, :width 722, :height 1005.3286062486153} {:x1 86.8905029296875, :y1 860.1411743164062, :x2 255.06129455566406, :y2 879.1411743164062, :width 722, :height 1005.3286062486153}), :page 65}, :content {:text "当然，Flink默认是允许slot共享的，如果希望某个算子对应的任务完全独占一个slot，或者只有某一部分算子共享slot，我们也可以通过设置“slot共享组”（SlotSharingGroup）手动指定：.map(word -> Tuple2.of(word, 1L)).slotSharingGroup(“1”);这样，只有属于同一个slot共享组的子任务，才会开启slot共享；不同组之间的任务是完全隔离的，必须分配到不同的slot上。在这种场景下，总共需要的slot数量，就是各个slot共享组最大并行度的总和。"}, :properties {:color "yellow"}} {:id #uuid "624551f0-6d44-4f88-b3d9-9d73db8febc9", :page 69, :position {:bounding {:x1 88, :y1 319, :x2 584, :y2 413, :width 722, :height 1005.3286062486153}, :rects (), :page 69}, :content {:text "[:span]", :image 1648710128297}, :properties {:color "yellow"}} {:id #uuid "6245531d-7ab5-43c2-8e46-cace6d0eb13c", :page 69, :position {:bounding {:x1 89.7641372680664, :y1 861.6134033203125, :x2 658.2296600341797, :y2 890.8915405273438, :width 722, :height 1005.3286062486153}, :rects ({:x1 89.77494812011719, :y1 861.6134033203125, :x2 658.2296600341797, :y2 873.6134033203125, :width 722, :height 1005.3286062486153} {:x1 89.7641372680664, :y1 878.8915405273438, :x2 471.3401870727539, :y2 890.8915405273438, :width 722, :height 1005.3286062486153}), :page 69}, :content {:text "StreamExecutionEnvironment                        env                        = StreamExecutionEnvironment.getExecutionEnvironment();"}, :properties {:color "yellow"}} {:id #uuid "62455327-4900-47c2-a95b-64c588a3069e", :page 70, :position {:bounding {:x1 70.84210205078125, :y1 207.3450927734375, :x2 721.9764404296875, :y2 236.62591552734375, :width 722, :height 1005.3286062486153}, :rects ({:x1 70.84210205078125, :y1 207.3450927734375, :x2 721.9764404296875, :y2 219.3450927734375, :width 722, :height 1005.3286062486153} {:x1 70.85724639892578, :y1 224.62591552734375, :x2 445.2280960083008, :y2 236.62591552734375, :width 722, :height 1005.3286062486153}), :page 70}, :content {:text "StreamExecutionEnvironment                     localEnv                     = StreamExecutionEnvironment.createLocalEnvironment();"}, :properties {:color "yellow"}} {:id #uuid "62455333-4059-4d0a-a266-e4d36f31f389", :page 70, :position {:bounding {:x1 -0.009825989603996277, :y1 318.5638427734375, :x2 721.9963989257812, :y2 417.13525390625, :width 722, :height 1005.3286062486153}, :rects ({:x1 70.85724639892578, :y1 318.5638427734375, :x2 538.8208084106445, :y2 330.5638427734375, :width 722, :height 1005.3286062486153} {:x1 -0.00263214111328125, :y1 333.21966552734375, :x2 721.9930419921875, :y2 350.46966552734375, :width 722, :height 1005.3286062486153} {:x1 124.01299285888672, :y1 335.84466552734375, :x2 303.99688720703125, :y2 347.84466552734375, :width 722, :height 1005.3286062486153} {:x1 -0.009825989603996277, :y1 350.50091552734375, :x2 721.9963989257812, :y2 368.65716552734375, :width 722, :height 1005.3286062486153} {:x1 -0.009825989603996277, :y1 367.8583984375, :x2 721.9755859375, :y2 385.6083984375, :width 722, :height 1005.3286062486153} {:x1 -0.009825989603996277, :y1 385.61962890625, :x2 721.9801635742188, :y2 402.88525390625, :width 722, :height 1005.3286062486153} {:x1 124.00582885742188, :y1 405.13525390625, :x2 145.62147521972656, :y2 417.13525390625, :width 722, :height 1005.3286062486153}), :page 70}, :content {:text "StreamExecutionEnvironment remoteEnv = StreamExecutionEnvironment.createRemoteEnvironment(\"host\", // JobManager主机名1234, // JobManager进程端口号\"path/to/jarFile.jar\"// 提交给JobManager的JAR包); "}, :properties {:color "yellow"}} {:id #uuid "6245533d-b444-4af3-855e-91035b9a28e8", :page 70, :position {:bounding {:x1 -0.008092910051345825, :y1 424.1331787109375, :x2 721.9904422461987, :y2 488.57110595703125, :width 722, :height 1005.3286062486153}, :rects ({:x1 96.00318145751953, :y1 424.1331787109375, :x2 635.3948440551758, :y2 443.1331787109375, :width 722, :height 1005.3286062486153} {:x1 -0.008092910051345825, :y1 445.53985595703125, :x2 721.9904422461987, :y2 468.16485595703125, :width 722, :height 1005.3286062486153} {:x1 67.98240661621094, :y1 469.57110595703125, :x2 278.2424011230469, :y2 488.57110595703125, :width 722, :height 1005.3286062486153}), :page 70}, :content {:text "在获取到程序执行环境后，我们还可以对执行环境进行灵活的设置。比如可以全局设置程序的并行度、禁用算子链，还可以定义程序的时间语义、配置容错机制。关于时间语义和容错机制，我们会在后续的章节介绍。"}, :properties {:color "yellow"}} {:id #uuid "624553b8-d0e6-46c6-908f-3c6be96c2c9f", :page 71, :position {:bounding {:x1 89.7641372680664, :y1 362.7044677734375, :x2 406.573974609375, :y2 381.6419677734375, :width 722, :height 1005.3286062486153}, :rects ({:x1 190.5625, :y1 362.7044677734375, :x2 333.3706359863281, :y2 381.6419677734375, :width 722, :height 1005.3286062486153} {:x1 89.7641372680664, :y1 364.6419677734375, :x2 406.573974609375, :y2 376.6419677734375, :width 722, :height 1005.3286062486153}), :page 71}, :content {:text "bin/flink run -Dexecution.runtime-mode=BATCH"}, :properties {:color "yellow"}} {:id #uuid "6245550b-ea82-43bc-ab73-c4b9d079dd19", :page 72, :position {:bounding {:x1 109, :y1 515, :x2 590, :y2 601, :width 722, :height 1005.3286062486153}, :rects (), :page 72}, :content {:text "[:span]", :image 1648710923832}, :properties {:color "yellow"}} {:id #uuid "62466b57-e09a-407f-bdf8-4e7212545c6e", :page 82, :position {:bounding {:x1 85, :y1 357, :x2 687, :y2 464, :width 800, :height 1113.937513848881}, :rects (), :page 82}, :content {:text "[:span]", :image 1648782167373}, :properties {:color "yellow"}} {:id #uuid "6246c794-102a-411c-8d96-1a780b226178", :page 96, :position {:bounding {:x1 -0.00979013741016388, :y1 781.4329833984375, :x2 799.9881591796875, :y2 932.1044311523438, :width 800, :height 1113.937513848881}, :rects ({:x1 224.894775390625, :y1 781.4329833984375, :x2 799.9881591796875, :y2 809.2923583984375, :width 800, :height 1113.937513848881} {:x1 98.58726501464844, :y1 786.6048583984375, :x2 222.8818817138672, :y2 806.6048583984375, :width 800, :height 1113.937513848881} {:x1 -0.00979013741016388, :y1 809.911865234375, :x2 799.9842529296875, :y2 834.380615234375, :width 800, :height 1113.937513848881} {:x1 -0.009788081049919128, :y1 834.9950561523438, :x2 799.9869537353516, :y2 859.5575561523438, :width 800, :height 1113.937513848881} {:x1 -0.004230603575706482, :y1 860.1669311523438, :x2 799.9848441034555, :y2 884.6356811523438, :width 800, :height 1113.937513848881} {:x1 -0.009789690375328064, :y1 885.239990234375, :x2 799.9852664619684, :y2 909.708740234375, :width 800, :height 1113.937513848881} {:x1 75.31381225585938, :y1 912.1044311523438, :x2 184.17691040039062, :y2 932.1044311523438, :width 800, :height 1113.937513848881}), :page 96}, :content {:text "“富函数类”也是DataStream  API提供的一个函数类的接口，所有的Flink函数类都有其Rich版本。富函数类一般是以抽象类的形式出现的。例如：RichMapFunction、RichFilterFunction、RichReduceFunction等。既然“富”，那么它一定会比常规的函数类提供更多、更丰富的功能。与常规函数类的不同主要在于，富函数类可以获取运行环境的上下文，并拥有一些生命周期方法，所以可以实现更复杂的功能。"}, :properties {:color "yellow"}} {:id #uuid "624d0a28-e019-4df0-b32c-11d000f59cf8", :page 106, :position {:bounding {:x1 116, :y1 190, :x2 651, :y2 297, :width 800, :height 1113.937513848881}, :rects (), :page 106}, :content {:text "[:span]", :image 1649216040884}, :properties {:color "yellow"}} {:id #uuid "624d0aa0-3e59-4af2-87e7-97cfae105126", :page 107, :position {:bounding {:x1 91, :y1 285, :x2 731, :y2 927, :width 800, :height 1113.937513848881}, :rects (), :page 107}, :content {:text "[:span]", :image 1649216160184}, :properties {:color "yellow"}} {:id #uuid "624d5897-727a-4259-ba83-8dfcd325e250", :page 108, :position {:bounding {:x1 -0.009789541363716125, :y1 302.7243347167969, :x2 799.9926147460938, :y2 375.8075866699219, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38900756835938, :y1 302.7243347167969, :x2 799.9926147460938, :y2 322.7243347167969, :width 800, :height 1113.937513848881} {:x1 -0.009789541363716125, :y1 326.1448059082031, :x2 799.98681640625, :y2 350.7229309082031, :width 800, :height 1113.937513848881} {:x1 -0.009785771369934082, :y1 351.3388366699219, :x2 213.39759826660156, :y2 375.8075866699219, :width 800, :height 1113.937513848881}), :page 108}, :content {:text "Flink为此专门提供了一个流式文件系统的连接器：StreamingFileSink，它继承自抽象类RichSinkFunction，而且集成了Flink的检查点（checkpoint）机制，用来保证精确一次（exactly once）的一致性语义"}, :properties {:color "yellow"}} {:id #uuid "624d58b3-f284-494c-b4db-60cdbbf1b3bf", :page 108, :position {:bounding {:x1 -0.009788185358047485, :y1 528.786865234375, :x2 799.9979858398438, :y2 601.8544311523438, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38325500488281, :y1 528.786865234375, :x2 799.984375, :y2 553.271240234375, :width 800, :height 1113.937513848881} {:x1 -0.009788185358047485, :y1 552.1990356445312, :x2 799.9979858398438, :y2 576.7771606445312, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 577.3856811523438, :x2 273.3728942871094, :y2 601.8544311523438, :width 800, :height 1113.937513848881}), :page 108}, :content {:text "StreamingFileSink支持行编码（Row-encoded）和批量编码（Bulk-encoded，比如Parquet）格式。这两种不同的方式都有各自的构建器（builder），调用方法也非常简单，可以直接调用StreamingFileSink的静态方法"}, :properties {:color "yellow"}} {:id #uuid "624d5a84-e517-4adc-82bd-457353787338", :page 110, :position {:bounding {:x1 -0.00978851318359375, :y1 -0.009063720703125, :x2 799.9957885742188, :y2 242.43255615234375, :width 800, :height 1113.937513848881}, :rects ({:x1 520.1137084960938, :y1 -0.009063720703125, :x2 799.9957885742188, :y2 144.69406127929688, :width 800, :height 1113.937513848881} {:x1 485.984375, :y1 121.91281127929688, :x2 518.8026123046875, :y2 141.91281127929688, :width 800, :height 1113.937513848881} {:x1 -0.00978851318359375, :y1 145.30755615234375, :x2 799.9874877929688, :y2 169.87005615234375, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 170.47943115234375, :x2 799.991943359375, :y2 194.94818115234375, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 195.56808471679688, :x2 799.9818725585938, :y2 220.036865234375, :width 800, :height 1113.937513848881} {:x1 75.3202133178711, :y1 222.43255615234375, :x2 401.4337387084961, :y2 242.43255615234375, :width 800, :height 1113.937513848881}), :page 110}, :content {:text "Flink官方为Kafka提供了Source和Sink的连接器，我们可以用它方便地从Kafka读写数据。如果仅仅是支持读写，那还说明不了Kafka和Flink关系的亲密；真正让它们密不可分的是，Flink与Kafka的连接器提供了端到端的精确一次（exactlyonce）语义保证，这在实际项目中是最高级别的一致性保证。关于这部分内容，我们会在后续章节做更详细的讲解"}, :properties {:color "yellow"}} {:id #uuid "624d5dd4-ef84-4514-a23e-b3ffdff8cac0", :page 111, :position {:bounding {:x1 -0.009467989206314087, :y1 616.7450561523438, :x2 800.0007934570312, :y2 712.0731811523438, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29585266113281, :y1 616.7450561523438, :x2 799.9992065429688, :y2 636.7450561523438, :width 800, :height 1113.937513848881} {:x1 -0.009467989206314087, :y1 640.036865234375, :x2 800.0007934570312, :y2 664.505615234375, :width 800, :height 1113.937513848881} {:x1 -0.009462624788284302, :y1 665.1200561523438, :x2 799.9901733398438, :y2 689.6825561523438, :width 800, :height 1113.937513848881} {:x1 96.26974487304688, :y1 692.0731811523438, :x2 422.3832702636719, :y2 712.0731811523438, :width 800, :height 1113.937513848881}), :page 111}, :content {:text "Flink没有直接提供官方的Redis连接器，不过Bahir项目还是担任了合格的辅助角色，为我们提供了Flink-Redis的连接工具。但版本升级略显滞后，目前连接器版本为1.0，支持的Scala版本最新到2.11。由于我们的测试不涉及到Scala的相关版本变化，所以并不影响使用。在实际项目应用中，应该以匹配的组件版本运行"}, :properties {:color "yellow"}} {:id #uuid "624d64b8-ea6f-4870-a0b3-edacc8bbdc83", :page 113, :position {:bounding {:x1 -0.015334829688072205, :y1 399.7298278808594, :x2 800.006591796875, :y2 534.5575561523438, :width 800, :height 1113.937513848881}, :rects ({:x1 213.81507873535156, :y1 399.7298278808594, :x2 800.006591796875, :y2 434.0423278808594, :width 800, :height 1113.937513848881} {:x1 127.29486083984375, :y1 411.2610778808594, :x2 211.8882293701172, :y2 431.2610778808594, :width 800, :height 1113.937513848881} {:x1 640.25, :y1 411.2610778808594, :x2 724.6717529296875, :y2 431.2610778808594, :width 800, :height 1113.937513848881} {:x1 -0.009463220834732056, :y1 434.6513366699219, :x2 800.0010375976562, :y2 459.2138366699219, :width 800, :height 1113.937513848881} {:x1 -0.00946451723575592, :y1 459.8232116699219, :x2 799.9822957366705, :y2 484.2919616699219, :width 800, :height 1113.937513848881} {:x1 -0.015334829688072205, :y1 484.9118347167969, :x2 799.9931030273438, :y2 509.3805847167969, :width 800, :height 1113.937513848881} {:x1 -0.009464949369430542, :y1 509.9950866699219, :x2 180.87240600585938, :y2 534.5575561523438, :width 800, :height 1113.937513848881}), :page 113}, :content {:text "ElasticSearch是一个分布式的开源搜索和分析引擎，适用于所有类型的数据。ElasticSearch有着简洁的REST风格的API，以良好的分布式特性、速度和可扩展性而闻名，在大数据领域应用非常广泛。Flink为ElasticSearch专门提供了官方的Sink 连接器，Flink1.13支持当前最新版本的ElasticSearch"}, :properties {:color "yellow"}} {:id #uuid "624d64f5-9a95-43e3-80a3-e8dec01baee7", :page 116, :position {:bounding {:x1 -0.009789779782295227, :y1 165.69859313964844, :x2 799.9995513558388, :y2 275.3388366699219, :width 800, :height 1113.937513848881}, :rects ({:x1 465.8512878417969, :y1 165.69859313964844, :x2 799.9835815429688, :y2 200.01109313964844, :width 800, :height 1113.937513848881} {:x1 106.37696838378906, :y1 177.22984313964844, :x2 463.4549102783203, :y2 197.22984313964844, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 200.6200714111328, :x2 799.9840087890625, :y2 225.0888214111328, :width 800, :height 1113.937513848881} {:x1 -0.009787023067474365, :y1 225.69308471679688, :x2 799.9995513558388, :y2 250.16183471679688, :width 800, :height 1113.937513848881} {:x1 -0.009789779782295227, :y1 250.7763214111328, :x2 638.8895874023438, :y2 275.3388366699219, :width 800, :height 1113.937513848881}), :page 116}, :content {:text "关系型数据库有着非常好的结构化数据设计、方便的SQL查询，是很多企业中业务数据存储的主要形式。MySQL就是其中的典型代表。尽管在大数据处理中直接与MySQL交互的场景不多，但最终处理的计算结果是要给外部应用消费使用的，而外部应用读取的数据存储往往就是MySQL。所以我们也需要知道如何将数据输出到MySQL这样的传统数据库"}, :properties {:color "yellow"}} {:id #uuid "624d6516-35c7-44f1-90f2-f292732b462b", :page 118, :position {:bounding {:x1 -0.00978650152683258, :y1 147.0888214111328, :x2 799.9957275390625, :y2 217.25558471679688, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38639068603516, :y1 147.0888214111328, :x2 799.9839477539062, :y2 167.0888214111328, :width 800, :height 1113.937513848881} {:x1 -0.00978650152683258, :y1 170.4794464111328, :x2 799.9957275390625, :y2 194.94818115234375, :width 800, :height 1113.937513848881} {:x1 75.31902313232422, :y1 197.25558471679688, :x2 121.75395202636719, :y2 217.25558471679688, :width 800, :height 1113.937513848881}), :page 118}, :content {:text "与Source类似，Flink为我们提供了通用的SinkFunction接口和对应的RichSinkDunction抽象类，只要实现它，通过简单地调用DataStream的.addSink()方法就可以自定义写入任何外部存储"}, :properties {:color "yellow"}} {:id #uuid "624d6528-9cff-4418-bfb0-3644bff5f1a3", :page 118, :position {:bounding {:x1 75.31798553466797, :y1 272.5837097167969, :x2 799.995849609375, :y2 317.7607116699219, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38720703125, :y1 272.5837097167969, :x2 799.995849609375, :y2 292.5837097167969, :width 800, :height 1113.937513848881} {:x1 75.31798553466797, :y1 297.7607116699219, :x2 323.7907028198242, :y2 317.7607116699219, :width 800, :height 1113.937513848881}), :page 118}, :content {:text "在实现SinkFunction的时候，需要重写的一个关键方法invoke()，在这个方法中我们就可以实现将流里的数据发送出去的逻辑"}, :properties {:color "yellow"}} {:id #uuid "624d73cd-f0f4-4503-8c5b-a249320e88a2", :page 120, :position {:bounding {:x1 -0.009787902235984802, :y1 627.1887817382812, :x2 799.9993676245213, :y2 716.6731567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 106.3875732421875, :y1 627.1887817382812, :x2 704.0524291992188, :y2 647.1887817382812, :width 800, :height 1113.937513848881} {:x1 -0.009787648916244507, :y1 649.5274047851562, :x2 799.9993676245213, :y2 672.0430297851562, :width 800, :height 1113.937513848881} {:x1 -0.009787902235984802, :y1 672.6575317382812, :x2 799.9842529296875, :y2 695.2512817382812, :width 800, :height 1113.937513848881} {:x1 75.31381225585938, :y1 696.6731567382812, :x2 168.622802734375, :y2 716.6731567382812, :width 800, :height 1113.937513848881}), :page 120}, :content {:text "在流数据处理应用中，一个很重要、也很常见的操作就是窗口计算。所谓的“窗口”，一般就是划定的一段时间范围，也就是“时间窗”；对在这范围内的数据进行处理，就是所谓的窗口计算。所以窗口和时间往往是分不开的。接下来我们就深入了解一下Flink中的时间语义和窗口的应用"}, :properties {:color "yellow"}} {:id #uuid "624d73e6-ad9f-4d11-bcb7-dec87e9b12b7", :page 121, :position {:bounding {:x1 129, :y1 641, :x2 674, :y2 917, :width 800, :height 1113.937513848881}, :rects (), :page 121}, :content {:text "[:span]", :image 1649243110616}, :properties {:color "yellow"}} {:id #uuid "624d7450-47f1-4794-b90b-7a420f938162", :page 121, :position {:bounding {:x1 -0.009463533759117126, :y1 922.7723999023438, :x2 799.9932861328125, :y2 993.6241455078125, :width 800, :height 1113.937513848881}, :rects ({:x1 437.9987487792969, :y1 922.7723999023438, :x2 799.9922485351562, :y2 949.1473999023438, :width 800, :height 1113.937513848881} {:x1 405.23675537109375, :y1 927.3505249023438, :x2 461.984375, :y2 947.3505249023438, :width 800, :height 1113.937513848881} {:x1 -0.009463533759117126, :y1 949.7669067382812, :x2 799.9932861328125, :y2 972.2825317382812, :width 800, :height 1113.937513848881} {:x1 96.28030395507812, :y1 973.6241455078125, :x2 531.0861206054688, :y2 993.6241455078125, :width 800, :height 1113.937513848881}), :page 121}, :content {:text "如图6-1所示，在事件发生之后，生成的数据被收集起来，首先进入分布式消息队列，然后被Flink系统中的Source算子读取消费，进而向下游的转换算子（窗口算子）传递，最终由窗口算子进行计算处理"}, :properties {:color "yellow"}} {:id #uuid "624d747f-09b4-467a-9960-0f4471a71d76", :page 122, :position {:bounding {:x1 106.37866973876953, :y1 246.87921142578125, :x2 556.6193923950195, :y2 266.87921142578125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.37866973876953, :y1 246.87921142578125, :x2 556.6193923950195, :y2 266.87921142578125, :width 800, :height 1113.937513848881}), :page 122}, :content {:text "处理时间的概念非常简单，就是指执行处理操作的机器的系统时间"}, :properties {:color "yellow"}} {:id #uuid "624d7486-7d16-4c11-8bf5-36eec0a20ca0", :page 122, :position {:bounding {:x1 106.38426971435547, :y1 490.67608642578125, :x2 634.2654342651367, :y2 510.67608642578125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38426971435547, :y1 490.67608642578125, :x2 634.2654342651367, :y2 510.67608642578125, :width 800, :height 1113.937513848881}), :page 122}, :content {:text "事件时间，是指每个事件在对应的设备上发生的时间，也就是数据生成的时间"}, :properties {:color "yellow"}} {:id #uuid "624d752b-f7b6-40ec-956c-57fe3a40198c", :page 123, :position {:bounding {:x1 -0.009466663002967834, :y1 946.6731567382812, :x2 724.7639617919922, :y2 994.8167724609375, :width 800, :height 1113.937513848881}, :rects ({:x1 157.9178924560547, :y1 946.6731567382812, :x2 724.7639617919922, :y2 966.6731567382812, :width 800, :height 1113.937513848881} {:x1 -0.009466663002967834, :y1 969.0823974609375, :x2 285.10357666015625, :y2 994.8167724609375, :width 800, :height 1113.937513848881} {:x1 96.27487182617188, :y1 969.8792724609375, :x2 541.7899169921875, :y2 989.8792724609375, :width 800, :height 1113.937513848881}), :page 123}, :content {:text "在实际应用中，事件时间语义会更为常见。一般情况下，业务日志数据中都会记录数据生成的时间戳（timestamp），它就可以作为事件时间的判断基础"}, :properties {:color "yellow"}} {:id #uuid "624d758e-ebea-4e88-9757-486fc6217c9f", :page 124, :position {:bounding {:x1 75.31956481933594, :y1 467.09503173828125, :x2 800.0042724609375, :y2 510.31378173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 136.70692443847656, :y1 467.09503173828125, :x2 800.0042724609375, :y2 487.09503173828125, :width 800, :height 1113.937513848881} {:x1 75.31956481933594, :y1 490.31378173828125, :x2 603.2007293701172, :y2 510.31378173828125, :width 800, :height 1113.937513848881}), :page 124}, :content {:text "事件时间语义是以一定延迟为代价，换来了处理结果的正确性。由于网络延迟一般只有毫秒级，所以即使是事件时间语义，同样可以完成低延迟实时流处理的任务"}, :properties {:color "yellow"}} {:id #uuid "624d75b1-badc-4aaf-8841-2cf3c0567484", :page 124, :position {:bounding {:x1 -0.009790614247322083, :y1 513.5325317382812, :x2 799.998779296875, :y2 718.9961547851562, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38673400878906, :y1 513.5325317382812, :x2 799.985107421875, :y2 536.1262817382812, :width 800, :height 1113.937513848881} {:x1 -0.009790614247322083, :y1 535.9544067382812, :x2 799.9912719726562, :y2 558.4856567382812, :width 800, :height 1113.937513848881} {:x1 -0.009784668684005737, :y1 559.1063842773438, :x2 799.983642578125, :y2 581.6376342773438, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 582.2512817382812, :x2 799.9833984375, :y2 604.8450317382812, :width 800, :height 1113.937513848881} {:x1 -0.009786859154701233, :y1 605.4700317382812, :x2 799.998779296875, :y2 628.0637817382812, :width 800, :height 1113.937513848881} {:x1 -0.009785711765289307, :y1 628.7044067382812, :x2 799.9823407530785, :y2 651.2981567382812, :width 800, :height 1113.937513848881} {:x1 -0.00423431396484375, :y1 651.9231567382812, :x2 799.9972381591797, :y2 674.5169067382812, :width 800, :height 1113.937513848881} {:x1 -0.009788021445274353, :y1 675.1419067382812, :x2 799.9768676757812, :y2 697.6575317382812, :width 800, :height 1113.937513848881} {:x1 75.3167724609375, :y1 698.9961547851562, :x2 106.52304077148438, :y2 718.9961547851562, :width 800, :height 1113.937513848881}), :page 124}, :content {:text "另外，除了事件时间和处理时间，Flink还有一个“摄入时间”（Ingestion Time）的概念，它是指数据进入Flink数据流的时间，也就是Source算子读入数据的时间。摄入时间相当于是事件时间和处理时间的一个中和，它是把Source任务的处理时间，当作了数据的产生时间添加到数据里。这样一来，水位线（watermark）也就基于这个时间直接生成，不需要单独指定了。这种时间语义可以保证比较好的正确性，同时又不会引入太大的延迟。它的具体行为跟事件时间非常像，可以当作特殊的事件时间来处理。在Flink中，由于处理时间比较简单，早期版本默认的时间语义是处理时间；而考虑到事件时间在实际应用中更为广泛，从1.12版本开始，Flink已经将事件时间作为了默认的时间语义。"}, :properties {:color "yellow"}} {:id #uuid "624d75ec-cd06-4784-a920-40e3e39611d1", :page 126, :position {:bounding {:x1 71, :y1 304, :x2 704, :y2 592, :width 800, :height 1113.937513848881}, :rects (), :page 126}, :content {:text "[:span]", :image 1649243628159}, :properties {:color "yellow"}} {:id #uuid "624d7695-7a05-4437-9d37-e5daced9ea8d", :page 127, :position {:bounding {:x1 -0.015336096286773682, :y1 211.95440673828125, :x2 799.9890747070312, :y2 394.37628173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29544830322266, :y1 211.95440673828125, :x2 724.9603652954102, :y2 231.95440673828125, :width 800, :height 1113.937513848881} {:x1 -0.009462714195251465, :y1 234.39190673828125, :x2 799.984494805336, :y2 256.98565673828125, :width 800, :height 1113.937513848881} {:x1 -0.00946684181690216, :y1 257.61065673828125, :x2 799.9843686074018, :y2 280.12628173828125, :width 800, :height 1113.937513848881} {:x1 -0.009467273950576782, :y1 280.7461853027344, :x2 799.9817504882812, :y2 303.2618103027344, :width 800, :height 1113.937513848881} {:x1 -0.00946912169456482, :y1 303.87628173828125, :x2 799.9832153320312, :y2 326.50128173828125, :width 800, :height 1113.937513848881} {:x1 -0.015336096286773682, :y1 327.1197509765625, :x2 799.9890747070312, :y2 349.7447509765625, :width 800, :height 1113.937513848881} {:x1 -0.00946684181690216, :y1 350.36065673828125, :x2 799.9843686074018, :y2 372.95440673828125, :width 800, :height 1113.937513848881} {:x1 96.27604675292969, :y1 374.37628173828125, :x2 670.7214813232422, :y2 394.37628173828125, :width 800, :height 1113.937513848881}), :page 127}, :content {:text "所以我们应该把时钟也以数据的形式传递出去，告诉下游任务当前时间的进展；而且这个时钟的传递不会因为窗口聚合之类的运算而停滞。一种简单的想法是，在数据流中加入一个时钟标记，记录当前的事件时间；这个标记可以直接广播到下游，当下游任务收到这个标记，就可以更新自己的时钟了。由于类似于水流中用来做标志的记号，在Flink中，这种用来衡量事件时间（Event Time）进展的标记，就被称作“水位线”（Watermark）。具体实现上，水位线可以看作一条特殊的数据记录，它是插入到数据流中的一个标记点，主要内容就是一个时间戳，用来指示当前的事件时间。而它插入流中的位置，就应该是在某个数据到来之后；这样就可以从这个数据中提取时间戳，作为当前水位线的时间戳了。"}, :properties {:color "yellow"}} {:id #uuid "624d76a2-30ff-4449-ad1a-d17f74994e5f", :page 127, :position {:bounding {:x1 128, :y1 427, :x2 634, :y2 591, :width 800, :height 1113.937513848881}, :rects (), :page 127}, :content {:text "[:span]", :image 1649243810153}, :properties {:color "yellow"}} {:id #uuid "624d771d-b069-49ce-a5b8-daefa46b3118", :page 127, :position {:bounding {:x1 -0.009464815258979797, :y1 819.7593383789062, :x2 800.0010942667723, :y2 909.2356567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29541778564453, :y1 819.7593383789062, :x2 724.9602127075195, :y2 839.7593383789062, :width 800, :height 1113.937513848881} {:x1 -0.009462714195251465, :y1 842.0742797851562, :x2 799.984494805336, :y2 864.5899047851562, :width 800, :height 1113.937513848881} {:x1 -0.009464815258979797, :y1 865.2200317382812, :x2 800.0010942667723, :y2 887.8137817382812, :width 800, :height 1113.937513848881} {:x1 96.26719665527344, :y1 889.2356567382812, :x2 111.87033081054688, :y2 909.2356567382812, :width 800, :height 1113.937513848881}), :page 127}, :content {:text "在理想状态下，数据应该按照它们生成的先后顺序、排好队进入流中；也就是说，它们处理的过程会保持原先的顺序不变，遵守先来后到的原则。这样的话我们从每个数据中提取时间戳，就可以保证总是从小到大增长的，从而插入的水位线也会不断增长、事件时钟不断向前推进"}, :properties {:color "yellow"}} {:id #uuid "624d7723-e7a3-4d42-a428-0e0506554434", :page 127, :position {:bounding {:x1 -0.00946807861328125, :y1 912.4544067382812, :x2 799.9964556694031, :y2 1028.811767578125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29290008544922, :y1 912.4544067382812, :x2 724.8016891479492, :y2 932.4544067382812, :width 800, :height 1113.937513848881} {:x1 -0.009464740753173828, :y1 934.8762817382812, :x2 799.9964556694031, :y2 957.4700317382812, :width 800, :height 1113.937513848881} {:x1 -0.00946684181690216, :y1 958.0980224609375, :x2 799.9843686074018, :y2 980.6136474609375, :width 800, :height 1113.937513848881} {:x1 -0.009463459253311157, :y1 981.2305297851562, :x2 799.9831237792969, :y2 1003.7774047851562, :width 800, :height 1113.937513848881} {:x1 -0.00946807861328125, :y1 1004.3742065429688, :x2 633.2125473022461, :y2 1028.811767578125, :width 800, :height 1113.937513848881}), :page 127}, :content {:text "实际应用中，如果当前数据量非常大，可能会有很多数据的时间戳是相同的，这时每来一条数据就提取时间戳、插入水位线就做了大量的无用功。而且即使时间戳不同，同时涌来的数据时间差会非常小（比如几毫秒），往往对处理计算也没什么影响。所以为了提高效率，一般会每隔一段时间生成一个水位线，这个水位线的时间戳，就是当前最新数据的时间戳，如图6-6所示。所以这时的水位线，其实就是有序流中的一个周期性出现的时间标记"}, :properties {:color "yellow"}} {:id #uuid "624d7738-58d0-4497-8523-1da0b5853af2", :page 128, :position {:bounding {:x1 77, :y1 118, :x2 661, :y2 256, :width 800, :height 1113.937513848881}, :rects (), :page 128}, :content {:text "[:span]", :image 1649243960966}, :properties {:color "yellow"}} {:id #uuid "624d7741-e155-4d0c-90e5-af1da5cdbef8", :page 128, :position {:bounding {:x1 -0.009790405631065369, :y1 263.19427490234375, :x2 799.9978637695312, :y2 381.37628173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38758850097656, :y1 263.19427490234375, :x2 704.0525054931641, :y2 283.19427490234375, :width 800, :height 1113.937513848881} {:x1 -0.009786337614059448, :y1 285.5274353027344, :x2 799.9978637695312, :y2 308.0430603027344, :width 800, :height 1113.937513848881} {:x1 -0.009790405631065369, :y1 308.65753173828125, :x2 799.97607421875, :y2 331.28253173828125, :width 800, :height 1113.937513848881} {:x1 -0.00978882610797882, :y1 331.9010009765625, :x2 799.9913330078125, :y2 354.5260009765625, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 355.14190673828125, :x2 106.53868289291859, :y2 381.37628173828125, :width 800, :height 1113.937513848881} {:x1 106.5599365234375, :y1 355.93878173828125, :x2 394.07989501953125, :y2 375.93878173828125, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "这里需要注意的是，水位线插入的“周期”，本身也是一个时间概念。在当前事件时间语义下，假如我们设定了每隔100ms生成一次水位线，那就是要等事件时钟推进100ms才能插入；但是事件时钟本身的进展，本身就是靠水位线来表示的——现在要插入一个水位线，可前提又是水位线要向前推进100ms，这就陷入了死循环。所以对于水位线的周期性生成，周期时间是指处理时间（系统时间），而不是事件时间"}, :properties {:color "yellow"}} {:id #uuid "624d7763-2dbe-4064-9d3f-61293225b7ea", :page 128, :position {:bounding {:x1 -0.00978812575340271, :y1 414.08233642578125, :x2 799.9980854094028, :y2 480.53253173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38758850097656, :y1 414.08233642578125, :x2 704.0525054931641, :y2 434.08233642578125, :width 800, :height 1113.937513848881} {:x1 -0.00978812575340271, :y1 436.51690673828125, :x2 799.9980854094028, :y2 459.11065673828125, :width 800, :height 1113.937513848881} {:x1 75.31901550292969, :y1 460.53253173828125, :x2 393.9873504638672, :y2 480.53253173828125, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "有序流的处理非常简单，看起来水位线也并没有起到太大的作用。但这种情况只存在于理想状态下。我们知道在分布式系统中，数据在节点间传输，会因为网络传输延迟的不确定性，导致顺序发生改变，这就是所谓的“乱序数据”"}, :properties {:color "yellow"}} {:id #uuid "624d776b-b031-46fa-b4ec-7b3718ac549e", :page 128, :position {:bounding {:x1 -0.009786754846572876, :y1 483.75128173828125, :x2 799.9911499023438, :y2 573.2677612304688, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38162994384766, :y1 483.75128173828125, :x2 799.9868774414062, :y2 506.34503173828125, :width 800, :height 1113.937513848881} {:x1 -0.009786754846572876, :y1 506.17315673828125, :x2 799.9911499023438, :y2 528.6887817382812, :width 800, :height 1113.937513848881} {:x1 -0.009784668684005737, :y1 529.3086547851562, :x2 799.98193359375, :y2 551.8399047851562, :width 800, :height 1113.937513848881} {:x1 75.32462310791016, :y1 553.2677612304688, :x2 587.6203384399414, :y2 573.2677612304688, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "这里所说的“乱序”（out-of-order），是指数据的先后顺序不一致，主要就是基于数据的产生时间而言的。如图6-7所示，一个7秒时产生的数据，生成时间自然要比9秒的数据早；但是经过数据缓存和传输之后，处理任务可能先收到了9秒的数据，之后7秒的数据才姗姗来迟。这时如果我们希望插入水位线，来指示当前的事件时间进展，又该怎么做呢"}, :properties {:color "yellow"}} {:id #uuid "624d777a-befd-4f11-b81c-1c6020008671", :page 128, :position {:bounding {:x1 84, :y1 596, :x2 592, :y2 699, :width 800, :height 1113.937513848881}, :rects (), :page 128}, :content {:text "[:span]", :image 1649244026504}, :properties {:color "yellow"}} {:id #uuid "624d77a5-9d73-4204-800c-2ef0cbb3b99f", :page 128, :position {:bounding {:x1 -0.009789824485778809, :y1 708.9130249023438, :x2 799.9993676245213, :y2 798.4427490234375, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38758850097656, :y1 708.9130249023438, :x2 704.0525054931641, :y2 728.9130249023438, :width 800, :height 1113.937513848881} {:x1 -0.009787648916244507, :y1 731.3294067382812, :x2 799.9993676245213, :y2 753.9231567382812, :width 800, :height 1113.937513848881} {:x1 -0.009789824485778809, :y1 754.5637817382812, :x2 799.9841918945312, :y2 777.0950317382812, :width 800, :height 1113.937513848881} {:x1 75.32777404785156, :y1 778.4427490234375, :x2 370.42066955566406, :y2 798.4427490234375, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "最直观的想法自然是跟之前一样，我们还是靠数据来驱动，每来一个数据就提取它的时间戳、插入一个水位线。不过现在的情况是数据乱序，所以有可能新的时间戳比之前的还小，如果直接将这个时间的水位线再插入，我们的“时钟”就回退了——水位线就代表了时钟，时光不能倒流，所以水位线的时间戳也不能减小"}, :properties {:color "yellow"}} {:id #uuid "624d77ac-653e-4ebd-9da0-657b6aac48dc", :page 128, :position {:bounding {:x1 -0.009790048003196716, :y1 801.6575317382812, :x2 799.9869995117188, :y2 868.1106567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38494873046875, :y1 801.6575317382812, :x2 703.862548828125, :y2 821.6575317382812, :width 800, :height 1113.937513848881} {:x1 -0.009790048003196716, :y1 824.0950317382812, :x2 799.9869995117188, :y2 846.6887817382812, :width 800, :height 1113.937513848881} {:x1 75.32777404785156, :y1 848.1106567382812, :x2 292.7638244628906, :y2 868.1106567382812, :width 800, :height 1113.937513848881}), :page 128}, :content {:text "解决思路也很简单：我们插入新的水位线时，要先判断一下时间戳是否比之前的大，否则就不再生成新的水位线，如图6-8所示。也就是说，只有数据的时间戳比当前时钟大，才能推动时钟前进，这时才插入水位线"}, :properties {:color "yellow"}} {:id #uuid "624d77bc-da3e-4c0b-86ca-86db87ff8a47", :page 128, :position {:bounding {:x1 82, :y1 886, :x2 676, :y2 1012, :width 800, :height 1113.937513848881}, :rects (), :page 128}, :content {:text "[:span]", :image 1649244092583}, :properties {:color "yellow"}} {:id #uuid "624d77cc-d526-4354-b5e1-0f4692ad5161", :page 129, :position {:bounding {:x1 -0.009462714195251465, :y1 145.66302490234375, :x2 799.984494805336, :y2 211.92315673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29541778564453, :y1 145.66302490234375, :x2 724.9602127075195, :y2 165.66302490234375, :width 800, :height 1113.937513848881} {:x1 -0.009462714195251465, :y1 167.99615478515625, :x2 799.984494805336, :y2 190.51177978515625, :width 800, :height 1113.937513848881} {:x1 96.26748657226562, :y1 191.92315673828125, :x2 158.50839233398438, :y2 211.92315673828125, :width 800, :height 1113.937513848881}), :page 129}, :content {:text "如果考虑到大量数据同时到来的处理效率，我们同样可以周期性地生成水位线。这时只需要保存一下之前所有数据中的最大时间戳，需要插入水位线时，就直接以它作为时间戳生成新的水位线"}, :properties {:color "yellow"}} {:id #uuid "624d77d7-9e4b-4fa3-a20c-7f54cfa2dab3", :page 129, :position {:bounding {:x1 106, :y1 229, :x2 652, :y2 336, :width 800, :height 1113.937513848881}, :rects (), :page 129}, :content {:text "[:span]", :image 1649244119120}, :properties {:color "yellow"}} {:id #uuid "624d782d-730c-4fed-98dc-de769f768588", :page 129, :position {:bounding {:x1 88.45015716552734, :y1 347.609619140625, :x2 724.9603652954102, :y2 390.82940673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.29544830322266, :y1 347.609619140625, :x2 724.9603652954102, :y2 367.609619140625, :width 800, :height 1113.937513848881} {:x1 88.45015716552734, :y1 370.82940673828125, :x2 197.09117126464844, :y2 390.82940673828125, :width 800, :height 1113.937513848881}), :page 129}, :content {:text "这样做尽管可以定义出一个事件时钟，却也会带来一个非常大的问题：我们无法正确处理“迟到”的数据"}, :properties {:color "yellow"}} {:id #uuid "624d787c-4f01-4921-b832-fa8862411c02", :page 129, :position {:bounding {:x1 -0.00946912169456482, :y1 834.6524047851562, :x2 799.9905395507812, :y2 947.5169067382812, :width 800, :height 1113.937513848881}, :rects ({:x1 127.2840576171875, :y1 834.6524047851562, :x2 799.9784545898438, :y2 854.6524047851562, :width 800, :height 1113.937513848881} {:x1 -0.009463220834732056, :y1 857.0637817382812, :x2 799.9887084960938, :y2 879.6575317382812, :width 800, :height 1113.937513848881} {:x1 -0.00946912169456482, :y1 880.2825317382812, :x2 799.9901123046875, :y2 902.8762817382812, :width 800, :height 1113.937513848881} {:x1 -0.009467840194702148, :y1 903.5012817382812, :x2 799.9905395507812, :y2 926.0950317382812, :width 800, :height 1113.937513848881} {:x1 96.2772445678711, :y1 927.5169067382812, :x2 267.09395599365234, :y2 947.5169067382812, :width 800, :height 1113.937513848881}), :page 129}, :content {:text "回到上面的例子，为了让窗口能够正确收集到迟到的数据，我们也可以等上2秒；也就是用当前已有数据的最大时间戳减去2秒，就是要插入的水位线的时间戳，如图6-10所示。这样的话，9秒的数据到来之后，事件时钟不会直接推进到9秒，而是进展到了7秒；必须等到11秒的数据到来之后，事件时钟才会进展到9秒，这时迟到数据也都已收集齐，0~9秒的窗口就可以正确计算结果了"}, :properties {:color "yellow"}} {:id #uuid "624d78a9-8735-4d43-bf6d-346f4ee6a988", :page 130, :position {:bounding {:x1 80, :y1 138, :x2 593, :y2 253, :width 800, :height 1113.937513848881}, :rects (), :page 130}, :content {:text "[:span]", :image 1649244329103}, :properties {:color "yellow"}} {:id #uuid "624d79e6-9e65-4aa9-9803-f604b7d61f5f", :page 131, :position {:bounding {:x1 96.2743911743164, :y1 269.75128173828125, :x2 799.9932556152344, :y2 312.97003173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 127.28852081298828, :y1 269.75128173828125, :x2 799.9932556152344, :y2 289.75128173828125, :width 800, :height 1113.937513848881} {:x1 96.2743911743164, :y1 292.97003173828125, :x2 236.02368927001953, :y2 312.97003173828125, :width 800, :height 1113.937513848881}), :page 131}, :content {:text "水位线是Flink流处理中保证结果正确性的核心机制，它往往会跟窗口一起配合，完成对乱序数据的正确处理"}, :properties {:color "yellow"}} {:id #uuid "624d7ad7-aa62-4e31-8123-cdaa8f544abf", :page 132, :position {:bounding {:x1 -0.009786650538444519, :y1 223.83746337890625, :x2 800.0018920898438, :y2 290.11065673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38639068603516, :y1 223.83746337890625, :x2 799.9832153320312, :y2 243.83746337890625, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 246.16802978515625, :x2 800.0018920898438, :y2 268.6836853027344, :width 800, :height 1113.937513848881} {:x1 75.31745147705078, :y1 270.11065673828125, :x2 184.0732879638672, :y2 290.11065673828125, :width 800, :height 1113.937513848881}), :page 132}, :content {:text "在Flink的DataStream  API中 ， 有 一 个 单 独 用 于 生 成 水 位 线 的 方法：.assignTimestampsAndWatermarks()，它主要用来为流中的数据分配时间戳，并生成水位线来指示事件时间"}, :properties {:color "yellow"}} {:id #uuid "624d86d4-800d-4c72-a550-e218a8fbf472", :page 139, :position {:bounding {:x1 96.27236938476562, :y1 327.9478759765625, :x2 724.9746704101562, :y2 371.15753173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 664.1770629882812, :y1 327.9478759765625, :x2 724.9746704101562, :y2 347.9478759765625, :width 800, :height 1113.937513848881} {:x1 96.27236938476562, :y1 351.15753173828125, :x2 686.2086486816406, :y2 371.15753173828125, :width 800, :height 1113.937513848881}), :page 139}, :content {:text "所有的上游并行任务就像围成木桶的一块块木板，它们中最短的那一块，决定了我们桶中的水位"}, :properties {:color "yellow"}} {:id #uuid "624d86e2-4ec4-4138-8b0e-76f997bd0677", :page 139, :position {:bounding {:x1 120, :y1 383, :x2 687, :y2 681, :width 800, :height 1113.937513848881}, :rects (), :page 139}, :content {:text "[:span]", :image 1649247970080}, :properties {:color "yellow"}} {:id #uuid "624d8926-4f07-4842-bef4-85a8e3e77edb", :page 141, :position {:bounding {:x1 -0.009467989206314087, :y1 572.7581787109375, :x2 800.0011596679688, :y2 651.1106567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 163.1201171875, :y1 572.7581787109375, :x2 800.0011596679688, :y2 604.6800537109375, :width 800, :height 1113.937513848881} {:x1 127.29585266113281, :y1 582.8831787109375, :x2 160.11410522460938, :y2 602.8831787109375, :width 800, :height 1113.937513848881} {:x1 -0.009467124938964844, :y1 605.2981567382812, :x2 799.9962768554688, :y2 627.8919067382812, :width 800, :height 1113.937513848881} {:x1 -0.009467989206314087, :y1 628.5169067382812, :x2 294.6840515136719, :y2 651.1106567382812, :width 800, :height 1113.937513848881}), :page 141}, :content {:text "Flink是一种流式计算引擎，主要是来处理无界数据流的，数据源源不断、无穷无尽。想要更加方便高效地处理无界流，一种方式就是将无限数据切割成有限的“数据块”进行处理，这就是所谓的“窗口”（Window）"}, :properties {:color "yellow"}} {:id #uuid "624d893e-c501-4b9b-9519-f8305ac76d58", :page 142, :position {:bounding {:x1 -0.009786650538444519, :y1 622.2305297851562, :x2 800.0013885498047, :y2 711.8919067382812, :width 800, :height 1113.937513848881}, :rects ({:x1 137.46348571777344, :y1 622.2305297851562, :x2 800.0013885498047, :y2 642.2305297851562, :width 800, :height 1113.937513848881} {:x1 -0.009786650538444519, :y1 644.6575317382812, :x2 799.9866333007812, :y2 667.2512817382812, :width 800, :height 1113.937513848881} {:x1 -0.009785011410713196, :y1 667.8762817382812, :x2 799.9896240234375, :y2 690.4700317382812, :width 800, :height 1113.937513848881} {:x1 75.31390380859375, :y1 691.8919067382812, :x2 432.46337890625, :y2 711.8919067382812, :width 800, :height 1113.937513848881}), :page 142}, :content {:text "在Flink中，窗口其实并不是一个“框”，流进来的数据被框住了就只能进这一个窗口。相比之下，我们应该把窗口理解成一个“桶”，如图6-15所示。在Flink中，窗口可以把流切割成有限大小的多个“存储桶”（bucket)；每个数据都会分发到对应的桶中，当到达窗口结束时间时，就对每个桶中收集的数据进行计算处理"}, :properties {:color "yellow"}} {:id #uuid "624d894c-f5c6-4dff-abe0-11347e5de48f", :page 142, :position {:bounding {:x1 80, :y1 737, :x2 682, :y2 1025, :width 800, :height 1113.937513848881}, :rects (), :page 142}, :content {:text "[:span]", :image 1649248588599}, :properties {:color "yellow"}} {:id #uuid "624d8963-e525-484a-b9ce-8b2ca2d13bfc", :page 143, :position {:bounding {:x1 91, :y1 115, :x2 727, :y2 512, :width 800, :height 1113.937513848881}, :rects (), :page 143}, :content {:text "[:span]", :image 1649248611224}, :properties {:color "yellow"}} {:id #uuid "624d89c3-e8b3-42bf-9d43-f3303f46201d", :page 144, :position {:bounding {:x1 137.74374389648438, :y1 -0.0063323974609375, :x2 324.8125, :y2 140.97802734375, :width 800, :height 1113.937513848881}, :rects ({:x1 215.75, :y1 -0.0063323974609375, :x2 309.2570495605469, :y2 140.97802734375, :width 800, :height 1113.937513848881} {:x1 137.74374389648438, :y1 119.25927734375, :x2 324.8125, :y2 139.25927734375, :width 800, :height 1113.937513848881}), :page 144}, :content {:text "时间窗口（Time Window）"}, :properties {:color "yellow"}} {:id #uuid "624d89cc-a708-4f42-bf79-ba086afc0fd4", :page 144, :position {:bounding {:x1 137.74374389648438, :y1 771.8853759765625, :x2 331.90625, :y2 794.5103759765625, :width 800, :height 1113.937513848881}, :rects ({:x1 137.74374389648438, :y1 771.8853759765625, :x2 331.90625, :y2 794.5103759765625, :width 800, :height 1113.937513848881}), :page 144}, :content {:text "计数窗口（Count Window）"}, :properties {:color "yellow"}} {:id #uuid "624d89d5-8af4-47f9-b226-54dfaaef6ba3", :page 145, :position {:bounding {:x1 158.66561889648438, :y1 211.95440673828125, :x2 381.71875, :y2 234.54815673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 211.95440673828125, :x2 381.71875, :y2 234.54815673828125, :width 800, :height 1113.937513848881}), :page 145}, :content {:text "滚动窗口（Tumbling Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d89dd-a838-46bd-992e-cf0c2c902035", :page 145, :position {:bounding {:x1 158.66561889648438, :y1 866.8919067382812, :x2 363.984375, :y2 889.4075317382812, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 866.8919067382812, :x2 363.984375, :y2 889.4075317382812, :width 800, :height 1113.937513848881}), :page 145}, :content {:text "滑动窗口（Sliding Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d89e8-74c3-4733-a361-05b2faf363de", :page 146, :position {:bounding {:x1 137.74374389648438, :y1 855.2044067382812, :x2 344.84375, :y2 877.7981567382812, :width 800, :height 1113.937513848881}, :rects ({:x1 137.74374389648438, :y1 855.2044067382812, :x2 344.84375, :y2 877.7981567382812, :width 800, :height 1113.937513848881}), :page 146}, :content {:text "会话窗口（Session Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d89f8-c4ae-4c95-ab8d-d33a24116fda", :page 147, :position {:bounding {:x1 158.66561889648438, :y1 969.8792724609375, :x2 362.21875, :y2 992.5042724609375, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 969.8792724609375, :x2 362.21875, :y2 992.5042724609375, :width 800, :height 1113.937513848881}), :page 147}, :content {:text "全局窗口（Global Windows）"}, :properties {:color "yellow"}} {:id #uuid "624d8cf7-33fa-489f-ba95-0201b2d026ee", :page 148, :position {:bounding {:x1 76, :y1 939, :x2 709, :y2 1025, :width 800, :height 1113.937513848881}, :rects (), :page 148}, :content {:text "[:span]", :image 1649249527680}, :properties {:color "yellow"}} {:id #uuid "624d8d63-06b8-48a1-b56a-f76bc202904f", :page 149, :position {:bounding {:x1 92, :y1 304, :x2 728, :y2 576, :width 800, :height 1113.937513848881}, :rects (), :page 149}, :content {:text "[:span]", :image 1649249635320}, :properties {:color "yellow"}} {:id #uuid "624d8f14-011b-4ccf-8b9d-44563aeca4db", :page 149, :position {:bounding {:x1 148.3755340576172, :y1 592.26806640625, :x2 439.6828918457031, :y2 642.26806640625, :width 800, :height 1113.937513848881}, :rects ({:x1 263.68414306640625, :y1 592.26806640625, :x2 420.5423889160156, :y2 642.26806640625, :width 800, :height 1113.937513848881} {:x1 148.3755340576172, :y1 607.15869140625, :x2 263.55377197265625, :y2 632.15869140625, :width 800, :height 1113.937513848881} {:x1 368.24517822265625, :y1 607.15869140625, :x2 439.6828918457031, :y2 632.15869140625, :width 800, :height 1113.937513848881}), :page 149}, :content {:text "窗口分配器（Window Assigners）"}, :properties {:color "yellow"}} {:id #uuid "624d8f27-39b2-4e3b-8e81-3a82de5de67f", :page 152, :position {:bounding {:x1 127.4810791015625, :y1 427.1102600097656, :x2 399.61676025390625, :y2 488.8133850097656, :width 800, :height 1113.937513848881}, :rects ({:x1 223.52572631835938, :y1 427.1102600097656, :x2 380.39910888671875, :y2 488.8133850097656, :width 800, :height 1113.937513848881} {:x1 127.4810791015625, :y1 453.6102600097656, :x2 223.5139923095703, :y2 478.6102600097656, :width 800, :height 1113.937513848881} {:x1 380.47613525390625, :y1 453.6102600097656, :x2 399.61676025390625, :y2 478.6102600097656, :width 800, :height 1113.937513848881}), :page 152}, :content {:text "窗口函数（Window Functions）"}, :properties {:color "yellow"}} {:id #uuid "624d8f90-7c29-4740-ab8c-e6d989e54422", :page 152, :position {:bounding {:x1 196, :y1 673, :x2 592, :y2 1005, :width 800, :height 1113.937513848881}, :rects (), :page 152}, :content {:text "[:span]", :image 1649250192559}, :properties {:color "yellow"}} {:id #uuid "624d8f9f-0e0d-437d-9d91-2965fb9e9fe1", :page 153, :position {:bounding {:x1 147.84786987304688, :y1 172.796875, :x2 505.5298767089844, :y2 193.90625, :width 800, :height 1113.937513848881}, :rects ({:x1 256.703125, :y1 172.796875, :x2 489.4577941894531, :y2 193.90625, :width 800, :height 1113.937513848881} {:x1 147.84786987304688, :y1 174.76231384277344, :x2 256.7003479003906, :y2 189.76231384277344, :width 800, :height 1113.937513848881} {:x1 489.5298767089844, :y1 174.76231384277344, :x2 505.5298767089844, :y2 189.76231384277344, :width 800, :height 1113.937513848881}), :page 153}, :content {:text "增量聚合函数（incremental aggregation functions）"}, :properties {:color "yellow"}} {:id #uuid "624d8fa9-5743-4779-952d-3c607b7219a9", :page 153, :position {:bounding {:x1 158.66561889648438, :y1 432.51690673828125, :x2 360.625, :y2 455.11065673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 432.51690673828125, :x2 360.625, :y2 455.11065673828125, :width 800, :height 1113.937513848881}), :page 153}, :content {:text "归约函数（ReduceFunction）"}, :properties {:color "yellow"}} {:id #uuid "624d8fb1-7a06-4197-9240-7f339c3d4783", :page 155, :position {:bounding {:x1 158.66561889648438, :y1 559.4708862304688, :x2 379.234375, :y2 582.0802612304688, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 559.4708862304688, :x2 379.234375, :y2 582.0802612304688, :width 800, :height 1113.937513848881}), :page 155}, :content {:text "聚合函数（AggregateFunction）"}, :properties {:color "yellow"}} {:id #uuid "624d8fc0-a0ff-40cb-bc20-b3d9ef6193e6", :page 159, :position {:bounding {:x1 147.85000610351562, :y1 172.796875, :x2 799.989501953125, :y2 193.90625, :width 800, :height 1113.937513848881}, :rects ({:x1 241.28125, :y1 172.796875, :x2 799.989501953125, :y2 193.90625, :width 800, :height 1113.937513848881} {:x1 147.85000610351562, :y1 174.7623291015625, :x2 241.27468872070312, :y2 189.7623291015625, :width 800, :height 1113.937513848881} {:x1 383.484375, :y1 174.7623291015625, :x2 399.484375, :y2 189.7623291015625, :width 800, :height 1113.937513848881}), :page 159}, :content {:text "全窗口函数（full window functions）"}, :properties {:color "yellow"}} {:id #uuid "624d8fc8-f423-41d1-aa61-12dc4b2ec46e", :page 159, :position {:bounding {:x1 158.66561889648438, :y1 455.75128173828125, :x2 367.359375, :y2 478.34503173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 158.66561889648438, :y1 455.75128173828125, :x2 367.359375, :y2 478.34503173828125, :width 800, :height 1113.937513848881}), :page 159}, :content {:text "窗口函数（WindowFunction）"}, :properties {:color "yellow"}} {:id #uuid "624d8fcf-a24f-4d44-9e35-053e43ae793e", :page 159, :position {:bounding {:x1 158.64419555664062, :y1 945.7825317382812, :x2 448.1875, :y2 968.3762817382812, :width 800, :height 1113.937513848881}, :rects ({:x1 158.64419555664062, :y1 945.7825317382812, :x2 448.1875, :y2 968.3762817382812, :width 800, :height 1113.937513848881}), :page 159}, :content {:text "处理窗口函数（ProcessWindowFunction）"}, :properties {:color "yellow"}} {:id #uuid "624e8adc-14d1-453b-856c-0f6f16d726c4", :page 162, :position {:bounding {:x1 126.95298767089844, :y1 422.2623291015625, :x2 360.0857238769531, :y2 437.2623291015625, :width 800, :height 1113.937513848881}, :rects ({:x1 126.95298767089844, :y1 422.2623291015625, :x2 360.0857238769531, :y2 437.2623291015625, :width 800, :height 1113.937513848881}), :page 162}, :content {:text "增量聚合和全窗口函数的结合使用"}, :properties {:color "yellow"}} {:id #uuid "624e8b33-a97d-4167-a62f-4895d7ab1e8f", :page 169, :position {:bounding {:x1 147.85299682617188, :y1 717.7736206054688, :x2 799.9989013671875, :y2 746.3204956054688, :width 800, :height 1113.937513848881}, :rects ({:x1 210.265625, :y1 717.7736206054688, :x2 799.9989013671875, :y2 746.3204956054688, :width 800, :height 1113.937513848881} {:x1 210.265625, :y1 722.2111206054688, :x2 258.8658752441406, :y2 742.2111206054688, :width 800, :height 1113.937513848881} {:x1 147.85299682617188, :y1 724.1685791015625, :x2 210.25050354003906, :y2 739.1685791015625, :width 800, :height 1113.937513848881}), :page 169}, :content {:text "触发器（Trigger）"}, :properties {:color "yellow"}} {:id #uuid "624e8fcb-e66d-4992-97e7-a504d42d9b43", :page 173, :position {:bounding {:x1 147.85299682617188, :y1 241.75, :x2 799.9892578125, :y2 262.765625, :width 800, :height 1113.937513848881}, :rects ({:x1 210.078125, :y1 241.75, :x2 799.9892578125, :y2 262.765625, :width 800, :height 1113.937513848881} {:x1 147.85299682617188, :y1 243.7139892578125, :x2 210.25050354003906, :y2 258.7139892578125, :width 800, :height 1113.937513848881} {:x1 257.59375, :y1 243.7139892578125, :x2 273.59375, :y2 258.7139892578125, :width 800, :height 1113.937513848881}), :page 173}, :content {:text "移除器（Evictor）"}, :properties {:color "yellow"}} {:id #uuid "624e8fda-742e-4ee0-a039-7b17e245f166", :page 173, :position {:bounding {:x1 147.8494110107422, :y1 519.75, :x2 800.004150390625, :y2 540.78125, :width 800, :height 1113.937513848881}, :rects ({:x1 225.6875, :y1 519.75, :x2 800.004150390625, :y2 540.78125, :width 800, :height 1113.937513848881} {:x1 147.8494110107422, :y1 521.7154541015625, :x2 225.67471313476562, :y2 536.7154541015625, :width 800, :height 1113.937513848881} {:x1 347.328125, :y1 521.7154541015625, :x2 363.328125, :y2 536.7154541015625, :width 800, :height 1113.937513848881}), :page 173}, :content {:text "允许延迟（Allowed Lateness）"}, :properties {:color "yellow"}} {:id #uuid "624e9024-9c7e-49b4-a7dd-3a8c98f336e0", :page 174, :position {:bounding {:x1 126.95298767089844, :y1 221.1998291015625, :x2 313.45916748046875, :y2 236.1998291015625, :width 800, :height 1113.937513848881}, :rects ({:x1 126.95298767089844, :y1 221.1998291015625, :x2 313.45916748046875, :y2 236.1998291015625, :width 800, :height 1113.937513848881}), :page 174}, :content {:text "将迟到的数据放入侧输出流"}, :properties {:color "yellow"}} {:id #uuid "624f9fec-b367-4274-817e-1efe5ba2337f", :page 183, :position {:bounding {:x1 138, :y1 234, :x2 528, :y2 499, :width 800, :height 1113.937513848881}, :rects (), :page 183}, :content {:text "[:span]", :image 1649385452726}, :properties {:color "yellow"}} {:id #uuid "624fa609-e298-4607-9209-e15ad163052f", :page 184, :position {:bounding {:x1 -0.009788364171981812, :y1 312.1243896484375, :x2 800.0025024414062, :y2 451.76690673828125, :width 800, :height 1113.937513848881}, :rects ({:x1 484.7102966308594, :y1 312.1243896484375, :x2 711.6514282226562, :y2 332.1243896484375, :width 800, :height 1113.937513848881} {:x1 -0.0069732666015625, :y1 334.5572509765625, :x2 799.962158203125, :y2 357.1822509765625, :width 800, :height 1113.937513848881} {:x1 -0.0069732666015625, :y1 357.79815673828125, :x2 800.0025024414062, :y2 380.31378173828125, :width 800, :height 1113.937513848881} {:x1 -0.009788364171981812, :y1 380.9337158203125, :x2 799.998779296875, :y2 403.4493408203125, :width 800, :height 1113.937513848881} {:x1 -0.00978650152683258, :y1 404.07940673828125, :x2 799.9951171875, :y2 426.67315673828125, :width 800, :height 1113.937513848881} {:x1 -0.009785205125808716, :y1 427.29815673828125, :x2 619.1115112304688, :y2 451.76690673828125, :width 800, :height 1113.937513848881}), :page 184}, :content {:text "处理函数提供了一个“定时服务”（TimerService），我们可以通过它访问流中的事件（event）、时间戳（timestamp）、水位线（watermark），甚至可以注册“定时事件”。而且处理函数继承了AbstractRichFunction抽象类，所以拥有富函数类的所有特性，同样可以访问状态（state）和其他运行时信息。此外，处理函数还可以直接将数据输出到侧输出流（sideoutput）中。所以，处理函数是最为灵活的处理方法，可以实现各种自定义的业务逻辑；同时也是整个DataStreamAPI的底层基础"}, :properties {:color "yellow"}} {:id #uuid "624fa641-8b3e-416d-87a4-f854f536d145", :page 184, :position {:bounding {:x1 75.32501220703125, :y1 455.0462341308594, :x2 799.9827270507812, :y2 498.25128173828125, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38638305664062, :y1 455.0462341308594, :x2 799.9827270507812, :y2 475.0462341308594, :width 800, :height 1113.937513848881} {:x1 75.32501220703125, :y1 478.25128173828125, :x2 137.4735107421875, :y2 498.25128173828125, :width 800, :height 1113.937513848881}), :page 184}, :content {:text "处理函数的使用与基本的转换操作类似，只需要直接基于DataStream调用.process()方法就可以了"}, :properties {:color "yellow"}} {:id #uuid "624fcaec-0a62-45dc-8ec7-6fcb18040cff", :page 185, :position {:bounding {:x1 143.30242919921875, :y1 768.8765258789062, :x2 330.4830627441406, :y2 793.8765258789062, :width 800, :height 1113.937513848881}, :rects ({:x1 143.30242919921875, :y1 768.8765258789062, :x2 330.4830627441406, :y2 793.8765258789062, :width 800, :height 1113.937513848881}), :page 185}, :content {:text "ProcessFunction解析"}, :properties {:color "yellow"}} {:id #uuid "624fcaf9-0fe7-4dbd-8d73-4d9d731f414a", :page 187, :position {:bounding {:x1 148.37713623046875, :y1 460.0024108886719, :x2 282.8538513183594, :y2 485.0024108886719, :width 800, :height 1113.937513848881}, :rects ({:x1 148.37713623046875, :y1 460.0024108886719, :x2 282.8538513183594, :y2 485.0024108886719, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "处理函数的分类"}, :properties {:color "yellow"}} {:id #uuid "624fcb07-91b9-4613-b348-4f3549e1dee4", :page 187, :position {:bounding {:x1 127.29585266113281, :y1 649.3431396484375, :x2 350.22064208984375, :y2 680.9993896484375, :width 800, :height 1113.937513848881}, :rects ({:x1 162.05870056152344, :y1 649.3431396484375, :x2 225.52166748046875, :y2 680.9993896484375, :width 800, :height 1113.937513848881} {:x1 127.29585266113281, :y1 652.0150146484375, :x2 160.11410522460938, :y2 672.0150146484375, :width 800, :height 1113.937513848881} {:x1 226.0213623046875, :y1 652.0150146484375, :x2 350.22064208984375, :y2 672.0150146484375, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "Flink提供了8个不同的处理函数"}, :properties {:color "yellow"}} {:id #uuid "624fcb0f-820a-4cd0-b4ae-0ca7fdbb25ba", :page 187, :position {:bounding {:x1 166.125, :y1 689.603271484375, :x2 268.7948303222656, :y2 709.603271484375, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 689.603271484375, :x2 268.7948303222656, :y2 709.603271484375, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "ProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb15-d9f7-4612-9fc3-34e3cb8874dd", :page 187, :position {:bounding {:x1 166.125, :y1 753.05126953125, :x2 309.19195556640625, :y2 773.05126953125, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 753.05126953125, :x2 309.19195556640625, :y2 773.05126953125, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "KeyedProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb1b-7a75-42d0-93a0-8dbf483345d9", :page 187, :position {:bounding {:x1 166.125, :y1 839.78564453125, :x2 321.59930419921875, :y2 859.78564453125, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 839.78564453125, :x2 321.59930419921875, :y2 859.78564453125, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "ProcessWindowFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb20-1768-44ca-8e12-b90ab03f6b1b", :page 187, :position {:bounding {:x1 166.125, :y1 926.45751953125, :x2 341.28497314453125, :y2 946.45751953125, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 926.45751953125, :x2 341.28497314453125, :y2 946.45751953125, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "ProcessAllWindowFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb29-5775-4665-97c8-2a3d59005df8", :page 187, :position {:bounding {:x1 166.125, :y1 990.103271484375, :x2 286.83319091796875, :y2 1010.103271484375, :width 800, :height 1113.937513848881}, :rects ({:x1 166.125, :y1 990.103271484375, :x2 286.83319091796875, :y2 1010.103271484375, :width 800, :height 1113.937513848881}), :page 187}, :content {:text "CoProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb2f-e54f-4ee5-a617-9b3de45dcdad", :page 188, :position {:bounding {:x1 145.203125, :y1 179.884521484375, :x2 273.7420959472656, :y2 199.884521484375, :width 800, :height 1113.937513848881}, :rects ({:x1 145.203125, :y1 179.884521484375, :x2 273.7420959472656, :y2 199.884521484375, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "ProcessJoinFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb37-9ea0-4844-bc5b-892ba23266cc", :page 188, :position {:bounding {:x1 145.203125, :y1 266.56689453125, :x2 309.7374267578125, :y2 286.56689453125, :width 800, :height 1113.937513848881}, :rects ({:x1 145.203125, :y1 266.56689453125, :x2 309.7374267578125, :y2 286.56689453125, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "BroadcastProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcb3d-9372-443e-86f1-19c207a2240e", :page 188, :position {:bounding {:x1 145.203125, :y1 399.743896484375, :x2 350.30609130859375, :y2 419.743896484375, :width 800, :height 1113.937513848881}, :rects ({:x1 145.203125, :y1 399.743896484375, :x2 350.30609130859375, :y2 419.743896484375, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "KeyedBroadcastProcessFunction"}, :properties {:color "yellow"}} {:id #uuid "624fcdb1-350a-489a-9aec-9625f4472497", :page 188, :position {:bounding {:x1 120.02024841308594, :y1 559.2941284179688, :x2 599.4364624023438, :y2 618.8878784179688, :width 800, :height 1113.937513848881}, :rects ({:x1 332.57794189453125, :y1 559.2941284179688, :x2 575.7553100585938, :y2 618.8878784179688, :width 800, :height 1113.937513848881} {:x1 120.02024841308594, :y1 577.7409057617188, :x2 332.54803466796875, :y2 600.7409057617188, :width 800, :height 1113.937513848881} {:x1 575.8583374023438, :y1 577.7409057617188, :x2 599.4364624023438, :y2 600.7409057617188, :width 800, :height 1113.937513848881}), :page 188}, :content {:text "按键分区处理函数（KeyedProcessFunction）"}, :properties {:color "yellow"}} {:id #uuid "624ffdf8-0638-43ce-ae26-a770e8e19bed", :page 210, :position {:bounding {:x1 202, :y1 107, :x2 581, :y2 442, :width 800, :height 1113.937513848881}, :rects (), :page 210}, :content {:text "[:span]", :image 1649409528679}, :properties {:color "yellow"}} {:id #uuid "62500020-8592-4d21-bbec-c9acf4eaa582", :page 214, :position {:bounding {:x1 238, :y1 179, :x2 539, :y2 444, :width 800, :height 1113.937513848881}, :rects (), :page 214}, :content {:text "[:span]", :image 1649410080889}, :properties {:color "yellow"}} {:id #uuid "62500036-ceec-4550-9036-20eef640437d", :page 214, :position {:bounding {:x1 76, :y1 438, :x2 705, :y2 550, :width 800, :height 1113.937513848881}, :rects (), :page 214}, :content {:text "[:span]", :image 1649410102782}, :properties {:color "yellow"}} {:id #uuid "625002d5-6cc3-4cd5-8821-f2d1adeed9cd", :page 214, :position {:bounding {:x1 -0.009787231683731079, :y1 553.9865112304688, :x2 799.9995513558388, :y2 713.1262817382812, :width 800, :height 1113.937513848881}, :rects ({:x1 106.38497161865234, :y1 553.9865112304688, :x2 703.8626937866211, :y2 573.9865112304688, :width 800, :height 1113.937513848881} {:x1 -0.009787231683731079, :y1 576.4075317382812, :x2 799.98136267066, :y2 599.0012817382812, :width 800, :height 1113.937513848881} {:x1 -0.004237741231918335, :y1 599.6262817382812, :x2 799.9819946289062, :y2 622.2200317382812, :width 800, :height 1113.937513848881} {:x1 -0.009785979986190796, :y1 622.8450317382812, :x2 799.9916178286076, :y2 645.3606567382812, :width 800, :height 1113.937513848881} {:x1 -0.00978676974773407, :y1 645.9805297851562, :x2 799.9949129372835, :y2 668.4961547851562, :width 800, :height 1113.937513848881} {:x1 -0.009787023067474365, :y1 669.1106567382812, :x2 799.9995513558388, :y2 691.7044067382812, :width 800, :height 1113.937513848881} {:x1 75.31745147705078, :y1 693.1262817382812, :x2 323.89112091064453, :y2 713.1262817382812, :width 800, :height 1113.937513848881}), :page 214}, :content {:text "这里需要考虑一个问题。在事件时间语义下，水位线是时间的进度标志；不同的流中可能水位线的进展快慢完全不同，如果它们合并在一起，水位线又该以哪个为准呢？还以要考虑水位线的本质含义，是“之前的所有数据已经到齐了”；所以对于合流之后的水位线，也是要以最小的那个为准，这样才可以保证所有流都不会再传来之前的数据。换句话说，多流合并时处理的时效性是以最慢的那个流为准的。我们自然可以想到，这与之前介绍的并行任务水位线传递的规则是完全一致的；多条流的合并，某种意义上也可以看作是多个并行任务向同一个下游任务汇合的过程。"}, :properties {:color "yellow"}} {:id #uuid "6250ffc4-19c0-4baf-b90d-406b2ca215b7", :page 218, :position {:bounding {:x1 247, :y1 115, :x2 559, :y2 504, :width 800, :height 1113.937513848881}, :rects (), :page 218}, :content {:text "[:span]", :image 1649475524609}, :properties {:color "yellow"}}]}